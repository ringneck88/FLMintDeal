import {
  intervalToDuration,
  isPast
} from "./chunk-4VJMDUUJ.js";
import {
  useIntl
} from "./chunk-BIMWENKL.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/admin/dist/admin/admin/src/components/RelativeTime.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var intervals = [
  "years",
  "months",
  "days",
  "hours",
  "minutes",
  "seconds"
];
var RelativeTime = React.forwardRef(({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {
  const { formatRelativeTime, formatDate, formatTime } = useIntl();
  const interval = intervalToDuration({
    start: timestamp,
    end: Date.now()
  });
  const unit = intervals.find((intervalUnit) => {
    return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);
  });
  const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];
  const customInterval = customIntervals.find((custom) => interval[custom.unit] < custom.threshold);
  const displayText = customInterval ? customInterval.text : formatRelativeTime(relativeTime, unit, {
    numeric: "auto"
  });
  return (0, import_jsx_runtime.jsx)("time", {
    ref: forwardedRef,
    dateTime: timestamp.toISOString(),
    role: "time",
    title: `${formatDate(timestamp)} ${formatTime(timestamp)}`,
    ...restProps,
    children: displayText
  });
});

export {
  RelativeTime
};
//# sourceMappingURL=chunk-T2EV5HXF.js.map
