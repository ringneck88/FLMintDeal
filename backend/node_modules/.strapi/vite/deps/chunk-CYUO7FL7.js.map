{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/hooks/usePersistentState.ts", "../../../@strapi/admin/admin/src/components/GuidedTour/Context.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Step.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Tours.tsx"],
  "sourcesContent": ["import { useEffect, useState } from 'react';\n\nimport { useInitQuery } from '../services/admin';\n\nconst usePersistentState = <T>(key: string, defaultValue: T) => {\n  const [value, setValue] = useState<T>(() => {\n    const stickyValue = window.localStorage.getItem(key);\n\n    if (stickyValue !== null) {\n      try {\n        return JSON.parse(stickyValue);\n      } catch {\n        // JSON.parse fails when the stored value is a primitive\n        return stickyValue;\n      }\n    }\n\n    return defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue] as const;\n};\n\n// Same as usePersistentState, but scoped to the current instance of Strapi\n// useful for storing state that should not be shared across different instances of Strapi running on localhost\nconst useScopedPersistentState = <T>(key: string, defaultValue: T) => {\n  const { data: initData } = useInitQuery();\n  const { uuid } = initData ?? {};\n\n  const namespacedKey = `${key}:${uuid}`;\n  return usePersistentState<T>(namespacedKey, defaultValue);\n};\n\nexport { usePersistentState, useScopedPersistentState };\n", "import * as React from 'react';\n\nimport { produce } from 'immer';\n\nimport { GetGuidedTourMeta } from '../../../../shared/contracts/admin';\nimport { usePersistentState } from '../../hooks/usePersistentState';\nimport { createContext } from '../Context';\n\nimport { type Tours, tours as guidedTours } from './Tours';\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype ValidTourName = keyof Tours;\n\nexport type ExtendedCompletedActions = (\n  | GetGuidedTourMeta.Response['data']['completedActions'][number]\n  | 'didCopyApiToken'\n)[];\n\ntype Action =\n  | {\n      type: 'next_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'skip_tour';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'set_completed_actions';\n      payload: ExtendedCompletedActions;\n    }\n  | {\n      type: 'skip_all_tours';\n    }\n  | {\n      type: 'reset_all_tours';\n    };\n\ntype Tour = Record<ValidTourName, { currentStep: number; length: number; isCompleted: boolean }>;\ntype State = {\n  tours: Tour;\n  enabled: boolean;\n  completedActions: ExtendedCompletedActions;\n};\n\nconst [GuidedTourProviderImpl, useGuidedTour] = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}>('GuidedTour');\n\nconst getInitialTourState = (tours: Tours) => {\n  return Object.keys(tours).reduce((acc, tourName) => {\n    const tourLength = Object.keys(tours[tourName as ValidTourName]).length;\n    acc[tourName as ValidTourName] = {\n      currentStep: 0,\n      length: tourLength,\n      isCompleted: false,\n    };\n\n    return acc;\n  }, {} as Tour);\n};\n\nfunction reducer(state: State, action: Action): State {\n  return produce(state, (draft) => {\n    if (action.type === 'next_step') {\n      const nextStep = draft.tours[action.payload].currentStep + 1;\n      draft.tours[action.payload].currentStep = nextStep;\n      draft.tours[action.payload].isCompleted = nextStep === draft.tours[action.payload].length;\n    }\n\n    if (action.type === 'skip_tour') {\n      draft.tours[action.payload].isCompleted = true;\n    }\n\n    if (action.type === 'set_completed_actions') {\n      draft.completedActions = [...new Set([...draft.completedActions, ...action.payload])];\n    }\n\n    if (action.type === 'skip_all_tours') {\n      draft.enabled = false;\n    }\n\n    if (action.type === 'reset_all_tours') {\n      draft.enabled = true;\n      draft.tours = getInitialTourState(guidedTours);\n      draft.completedActions = [];\n    }\n  });\n}\n\nconst STORAGE_KEY = 'STRAPI_GUIDED_TOUR';\nconst GuidedTourContext = ({\n  children,\n  enabled = true,\n}: {\n  children: React.ReactNode;\n  enabled?: boolean;\n}) => {\n  const [tours, setTours] = usePersistentState<State>(STORAGE_KEY, {\n    tours: getInitialTourState(guidedTours),\n    enabled,\n    completedActions: [],\n  });\n  const [state, dispatch] = React.useReducer(reducer, tours);\n\n  // Sync local storage\n  React.useEffect(() => {\n    setTours(state);\n  }, [state, setTours]);\n\n  return (\n    <GuidedTourProviderImpl state={state} dispatch={dispatch}>\n      {children}\n    </GuidedTourProviderImpl>\n  );\n};\n\nexport type { Action, State, ValidTourName };\nexport { GuidedTourContext, useGuidedTour, reducer };\n", "import * as React from 'react';\n\nimport {\n  Popover,\n  Box,\n  Flex,\n  Button,\n  Typography,\n  LinkButton,\n  FlexProps,\n} from '@strapi/design-system';\nimport { FormattedMessage, type MessageDescriptor } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useTracking } from '../../features/Tracking';\n\nimport { useGuidedTour, type ValidTourName } from './Context';\n\n/* -------------------------------------------------------------------------------------------------\n * Step factory\n * -----------------------------------------------------------------------------------------------*/\n\ntype WithChildren = {\n  children: React.ReactNode;\n  id?: never;\n  defaultMessage?: never;\n};\n\ntype WithIntl = {\n  children?: undefined;\n  id: MessageDescriptor['id'];\n  defaultMessage: MessageDescriptor['defaultMessage'];\n  withArrow?: boolean;\n};\n\ntype WithActionsChildren = {\n  children: React.ReactNode;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n};\n\ntype WithActionsProps = {\n  children?: undefined;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n};\n\ntype StepProps = WithChildren | WithIntl;\ntype ActionsProps = WithActionsChildren | WithActionsProps;\n\ntype Step = {\n  Root: React.ForwardRefExoticComponent<\n    React.ComponentProps<typeof Popover.Content> & { withArrow?: boolean }\n  >;\n  Title: (props: StepProps) => React.ReactNode;\n  Content: (props: StepProps) => React.ReactNode;\n  Actions: (props: ActionsProps & { to?: string } & FlexProps) => React.ReactNode;\n};\n\nconst ActionsContainer = styled(Flex)`\n  border-top: ${({ theme }) => `1px solid ${theme.colors.neutral150}`};\n`;\n\n/**\n * TODO:\n * We should probably move all arrow styles + svg to the DS\n */\nconst PopoverArrow = styled(Popover.Arrow)`\n  fill: ${({ theme }) => theme.colors.neutral0};\n  transform: translateY(-16px) rotate(-90deg);\n`;\n\nexport const StepCount = ({ tourName }: { tourName: ValidTourName }) => {\n  const state = useGuidedTour('GuidedTourPopover', (s) => s.state);\n  const currentStep = state.tours[tourName].currentStep + 1;\n  // TODO: Currently all tours do not count their last step, but we should find a way to make this more smart\n  const displayedLength = state.tours[tourName].length - 1;\n\n  return (\n    <Typography variant=\"omega\" fontSize=\"12px\">\n      <FormattedMessage\n        id=\"tours.stepCount\"\n        defaultMessage=\"Step {currentStep} of {tourLength}\"\n        values={{ currentStep, tourLength: displayedLength }}\n      />\n    </Typography>\n  );\n};\n\nconst createStepComponents = (tourName: ValidTourName): Step => ({\n  Root: React.forwardRef(({ withArrow = true, ...props }, ref) => {\n    return (\n      <Popover.Content\n        ref={ref}\n        aria-labelledby=\"guided-tour-title\"\n        side=\"top\"\n        align=\"center\"\n        style={{ border: 'none' }}\n        {...props}\n      >\n        {withArrow && (\n          <PopoverArrow asChild>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"23\"\n              height=\"25\"\n              viewBox=\"0 0 23 25\"\n              fill=\"none\"\n            >\n              <path d=\"M11 24.5L1.82843 15.3284C0.266332 13.7663 0.26633 11.2337 1.82843 9.67157L11 0.5L23 12.5L11 24.5Z\" />\n            </svg>\n          </PopoverArrow>\n        )}\n        <Flex width=\"360px\" direction=\"column\" alignItems=\"start\">\n          {props.children}\n        </Flex>\n      </Popover.Content>\n    );\n  }),\n\n  Title: (props) => {\n    return (\n      <Box paddingTop={5} paddingLeft={5} paddingRight={5} paddingBottom={1} width=\"100%\">\n        {'children' in props ? (\n          props.children\n        ) : (\n          <Typography tag=\"h1\" id=\"guided-tour-title\" variant=\"omega\" fontWeight=\"bold\">\n            <FormattedMessage id={props.id} defaultMessage={props.defaultMessage} />\n          </Typography>\n        )}\n      </Box>\n    );\n  },\n\n  Content: (props) => (\n    <Box paddingBottom={5} paddingLeft={5} paddingRight={5} width=\"100%\">\n      {'children' in props ? (\n        props.children\n      ) : (\n        <Typography tag=\"div\" variant=\"omega\">\n          <FormattedMessage id={props.id} defaultMessage={props.defaultMessage} />\n        </Typography>\n      )}\n    </Box>\n  ),\n\n  Actions: ({ showStepCount = true, showSkip = false, to, children, ...flexProps }) => {\n    const { trackUsage } = useTracking();\n    const dispatch = useGuidedTour('GuidedTourPopover', (s) => s.dispatch);\n    const state = useGuidedTour('GuidedTourPopover', (s) => s.state);\n    const currentStep = state.tours[tourName].currentStep + 1;\n    const actualTourLength = state.tours[tourName].length;\n\n    const handleSkipAction = () => {\n      trackUsage('didSkipGuidedTour', { name: tourName });\n      dispatch({ type: 'skip_tour', payload: tourName });\n    };\n\n    const handleNextStep = () => {\n      if (currentStep === actualTourLength) {\n        trackUsage('didCompleteGuidedTour', { name: tourName });\n      }\n      dispatch({ type: 'next_step', payload: tourName });\n    };\n\n    return (\n      <ActionsContainer\n        width=\"100%\"\n        padding={3}\n        paddingLeft={5}\n        justifyContent={showStepCount ? 'space-between' : 'flex-end'}\n        {...flexProps}\n      >\n        {children ? (\n          children\n        ) : (\n          <>\n            {showStepCount && <StepCount tourName={tourName} />}\n            <Flex gap={2}>\n              {showSkip && (\n                <Button variant=\"tertiary\" onClick={handleSkipAction}>\n                  <FormattedMessage id=\"tours.skip\" defaultMessage=\"Skip\" />\n                </Button>\n              )}\n              {to ? (\n                <LinkButton tag={NavLink} to={to} onClick={handleNextStep}>\n                  <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n                </LinkButton>\n              ) : (\n                <Button onClick={handleNextStep}>\n                  <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n                </Button>\n              )}\n            </Flex>\n          </>\n        )}\n      </ActionsContainer>\n    );\n  },\n});\n\nexport type { Step };\nexport { createStepComponents };\n", "import * as React from 'react';\n\nimport { Box, Popover, Portal, Button } from '@strapi/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useGetGuidedTourMetaQuery } from '../../services/admin';\n\nimport {\n  type State,\n  type Action,\n  useGuidedTour,\n  ValidTourName,\n  ExtendedCompletedActions,\n} from './Context';\nimport { Step, StepCount, createStepComponents } from './Step';\n\n/* -------------------------------------------------------------------------------------------------\n * Tours\n * -----------------------------------------------------------------------------------------------*/\n\nconst GotItAction = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <Button onClick={onClick}>\n      <FormattedMessage id=\"tours.gotIt\" defaultMessage=\"Got it\" />\n    </Button>\n  );\n};\n\nconst tours = {\n  contentTypeBuilder: createTour('contentTypeBuilder', [\n    {\n      name: 'Introduction',\n      content: (Step) => (\n        <Step.Root side=\"bottom\" sideOffset={33} withArrow={false}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.Introduction.title\"\n            defaultMessage=\"Content-Type Builder\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Introduction.content\"\n            defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CollectionTypes',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={16}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.CollectionTypes.title\"\n            defaultMessage=\"Collection Types\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.CollectionTypes.content\"\n            defaultMessage=\"A content structure that can manage multiple entries, such as articles or products.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'SingleTypes',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={16}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.SingleTypes.title\"\n            defaultMessage=\"Single Types\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.SingleTypes.content\"\n            defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Components',\n      content: (Step, { dispatch }) => (\n        <Step.Root side=\"right\" sideOffset={16}>\n          <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Components.content\"\n            defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\n          />\n          <Step.Actions>\n            <StepCount tourName=\"contentTypeBuilder\" />\n            <GotItAction\n              onClick={() => dispatch({ type: 'next_step', payload: 'contentTypeBuilder' })}\n            />\n          </Step.Actions>\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\">\n          <Step.Title\n            id=\"tours.contentTypeBuilder.Finish.title\"\n            defaultMessage=\"It's time to create content!\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Finish.content\"\n            defaultMessage=\"Now that you created content types, you'll be able to create content in the content manager.\"\n          />\n          <Step.Actions showStepCount={false} to=\"/content-manager\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateContentTypeSchema'),\n    },\n  ]),\n  contentManager: createTour('contentManager', [\n    {\n      name: 'Introduction',\n      when: (completedActions) => completedActions.includes('didCreateContentTypeSchema'),\n      content: (Step) => (\n        <Step.Root side=\"top\" sideOffset={33} withArrow={false}>\n          <Step.Title\n            id=\"tours.contentManager.Introduction.title\"\n            defaultMessage=\"Content manager\"\n          />\n          <Step.Content\n            id=\"tours.contentManager.Introduction.content\"\n            defaultMessage=\"Create and manage content from your collection types and single types.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Fields',\n      content: (Step) => (\n        <Step.Root sideOffset={-12}>\n          <Step.Title id=\"tours.contentManager.Fields.title\" defaultMessage=\"Fields\" />\n          <Step.Content\n            id=\"tours.contentManager.Fields.content\"\n            defaultMessage=\"Add content to the fields created in the Content-Type Builder.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Publish',\n      content: (Step, { dispatch }) => (\n        <Step.Root side=\"left\" align=\"center\">\n          <Step.Title id=\"tours.contentManager.Publish.title\" defaultMessage=\"Publish\" />\n          <Step.Content\n            id=\"tours.contentManager.Publish.content\"\n            defaultMessage=\"Publish entries to make their content available through the Document Service API.\"\n          />\n          <Step.Actions>\n            <StepCount tourName=\"contentManager\" />\n            <GotItAction\n              onClick={() => dispatch({ type: 'next_step', payload: 'contentManager' })}\n            />\n          </Step.Actions>\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\">\n          <Step.Title\n            id=\"tours.contentManager.FinalStep.title\"\n            defaultMessage=\"It's time to create API Tokens!\"\n          />\n          <Step.Content\n            id=\"tours.contentManager.FinalStep.content\"\n            defaultMessage=\"Now that you've created and published content, time to create API tokens and set up permissions.\"\n          />\n          <Step.Actions showStepCount={false} to=\"/settings/api-tokens\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateContent'),\n    },\n  ]),\n  apiTokens: createTour('apiTokens', [\n    {\n      name: 'Introduction',\n      content: (Step) => (\n        <Step.Root sideOffset={-36} withArrow={false}>\n          <Step.Title id=\"tours.apiTokens.Introduction.title\" defaultMessage=\"API tokens\" />\n          <Step.Content\n            id=\"tours.apiTokens.Introduction.content\"\n            defaultMessage=\"Create and manage API tokens with highly customizable permissions.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CreateAnAPIToken',\n      content: (Step) => (\n        <Step.Root side=\"bottom\" align=\"end\" sideOffset={-10}>\n          <Step.Title\n            id=\"tours.apiTokens.CreateAnAPIToken.title\"\n            defaultMessage=\"Create an API token\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.CreateAnAPIToken.content\"\n            defaultMessage=\"Create a new API token. Choose a name, duration and type.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CopyAPIToken',\n      content: (Step, { dispatch }) => (\n        <Step.Root side=\"bottom\" align=\"start\" sideOffset={-5}>\n          <Step.Title\n            id=\"tours.apiTokens.CopyAPIToken.title\"\n            defaultMessage=\"Copy your new API token\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.CopyAPIToken.content\"\n            defaultMessage=\"Make sure to do it now, you won’t be able to see it again. You’ll need to generate a new one if you lose it.\"\n          />\n          <Step.Actions>\n            <StepCount tourName=\"apiTokens\" />\n            <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'apiTokens' })} />\n          </Step.Actions>\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateApiToken'),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\" align=\"start\">\n          <Step.Title\n            id=\"tours.apiTokens.FinalStep.title\"\n            defaultMessage=\"It's time to deploy your application!\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.FinalStep.content\"\n            defaultMessage=\"Your application is ready to be deployed and its content to be shared with the world!\"\n          />\n          <Step.Actions showStepCount={false} to=\"/\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCopyApiToken'),\n    },\n  ]),\n  strapiCloud: createTour('strapiCloud', []),\n} as const;\n\ntype Tours = typeof tours;\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourTooltip\n * -----------------------------------------------------------------------------------------------*/\n\ntype Content = (\n  Step: Step,\n  {\n    state,\n    dispatch,\n  }: {\n    state: State;\n    dispatch: React.Dispatch<Action>;\n  }\n) => React.ReactNode;\n\ntype GuidedTourTooltipProps = {\n  children: React.ReactNode;\n  content: Content;\n  tourName: ValidTourName;\n  step: number;\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\n};\n\nconst GuidedTourTooltip = ({ children, ...props }: GuidedTourTooltipProps) => {\n  const state = useGuidedTour('TooltipWrapper', (s) => s.state);\n\n  if (!state.enabled) {\n    return <>{children}</>;\n  }\n\n  return <GuidedTourTooltipImpl {...props}>{children}</GuidedTourTooltipImpl>;\n};\n\nconst GuidedTourOverlay = styled(Box)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(50, 50, 77, 0.2);\n  z-index: 10;\n`;\n\nconst GuidedTourTooltipImpl = ({\n  children,\n  content,\n  tourName,\n  step,\n  when,\n}: GuidedTourTooltipProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n\n  const state = useGuidedTour('GuidedTourTooltip', (s) => s.state);\n  const dispatch = useGuidedTour('GuidedTourTooltip', (s) => s.dispatch);\n\n  const isCurrentStep = state.tours[tourName].currentStep === step;\n  const isStepConditionMet = when ? when(state.completedActions) : true;\n  const isPopoverOpen =\n    guidedTourMeta?.data?.isFirstSuperAdminUser &&\n    !state.tours[tourName].isCompleted &&\n    isCurrentStep &&\n    isStepConditionMet;\n\n  // Lock the scroll\n  React.useEffect(() => {\n    if (!isPopoverOpen) return;\n\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, [isPopoverOpen]);\n\n  // TODO: This isn't great but the only solution for syncing the completed actions\n  React.useEffect(() => {\n    dispatch({\n      type: 'set_completed_actions',\n      payload: guidedTourMeta?.data?.completedActions ?? [],\n    });\n  }, [dispatch, guidedTourMeta?.data?.completedActions]);\n\n  const Step = React.useMemo(() => createStepComponents(tourName), [tourName]);\n\n  return (\n    <>\n      {isPopoverOpen && (\n        <Portal>\n          <GuidedTourOverlay />\n        </Portal>\n      )}\n      <Popover.Root open={isPopoverOpen}>\n        <Popover.Anchor>{children}</Popover.Anchor>\n        {content(Step, { state, dispatch })}\n      </Popover.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Tour factory\n * -----------------------------------------------------------------------------------------------*/\n\ntype TourStep<P extends string> = {\n  name: P;\n  content: Content;\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\n};\n\nfunction createTour<const T extends ReadonlyArray<TourStep<string>>>(tourName: string, steps: T) {\n  type Components = {\n    [K in T[number]['name']]: React.ComponentType<{ children: React.ReactNode }>;\n  };\n\n  const tour = steps.reduce((acc, step, index) => {\n    if (step.name in acc) {\n      throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);\n    }\n\n    acc[step.name as keyof Components] = ({ children }: { children: React.ReactNode }) => {\n      return (\n        <GuidedTourTooltip\n          tourName={tourName as ValidTourName}\n          step={index}\n          content={step.content}\n          when={step.when}\n        >\n          {children}\n        </GuidedTourTooltip>\n      );\n    };\n\n    return acc;\n  }, {} as Components);\n\n  return tour;\n}\n\nexport type { Content, Tours };\nexport { tours };\n"],
  "mappings": "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",
  "names": ["usePersistentState", "key", "defaultValue", "value", "setValue", "useState", "stickyValue", "window", "localStorage", "getItem", "JSON", "parse", "useEffect", "setItem", "stringify", "useScopedPersistentState", "data", "initData", "useInitQuery", "uuid", "namespacedKey", "GuidedTourProviderImpl", "useGuidedTour", "createContext", "getInitialTourState", "tours", "Object", "keys", "reduce", "acc", "tourName", "tourLength", "length", "currentStep", "isCompleted", "reducer", "state", "action", "produce", "draft", "type", "nextStep", "payload", "completedActions", "Set", "enabled", "guidedTours", "STORAGE_KEY", "GuidedTourContext", "children", "setTours", "usePersistentState", "dispatch", "useReducer", "React", "useEffect", "_jsx", "ActionsContainer", "styled", "Flex", "theme", "colors", "neutral150", "PopoverArrow", "Popover", "Arrow", "neutral0", "StepCount", "tourName", "state", "useGuidedTour", "s", "currentStep", "tours", "displayedLength", "length", "_jsx", "Typography", "variant", "fontSize", "FormattedMessage", "id", "defaultMessage", "values", "tourLength", "createStepComponents", "Root", "forwardRef", "withArrow", "props", "ref", "_jsxs", "Content", "aria-labelledby", "side", "align", "style", "border", "asChild", "svg", "xmlns", "width", "height", "viewBox", "fill", "path", "d", "direction", "alignItems", "children", "Title", "Box", "paddingTop", "paddingLeft", "paddingRight", "paddingBottom", "tag", "fontWeight", "Actions", "showStepCount", "showSkip", "to", "flexProps", "trackUsage", "useTracking", "dispatch", "actualTourLength", "handleSkipAction", "name", "type", "payload", "handleNextStep", "padding", "justifyContent", "_Fragment", "gap", "Button", "onClick", "LinkButton", "NavLink", "GotItAction", "onClick", "_jsx", "Button", "FormattedMessage", "id", "defaultMessage", "tours", "contentTypeBuilder", "createTour", "name", "content", "Step", "_jsxs", "Root", "side", "sideOffset", "withArrow", "Title", "Content", "Actions", "showSkip", "dispatch", "StepCount", "tourName", "type", "payload", "showStepCount", "to", "when", "completedActions", "includes", "contentManager", "align", "apiTokens", "strapiCloud", "GuidedTourTooltip", "children", "props", "state", "useGuidedTour", "s", "enabled", "_Fragment", "GuidedTourTooltipImpl", "GuidedTourOverlay", "styled", "Box", "step", "data", "guidedTourMeta", "useGetGuidedTourMetaQuery", "isCurrentStep", "currentStep", "isStepConditionMet", "isPopoverOpen", "isFirstSuperAdminUser", "isCompleted", "React", "useEffect", "originalStyle", "window", "getComputedStyle", "document", "body", "overflow", "style", "useMemo", "createStepComponents", "Portal", "Popover", "open", "Anchor", "steps", "tour", "reduce", "acc", "index", "Error"]
}
