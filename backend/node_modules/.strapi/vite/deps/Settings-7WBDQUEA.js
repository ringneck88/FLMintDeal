import {
  getTrad,
  useGetInfoQuery,
  useUpdateSettingsMutation
} from "./chunk-QIIHHXAQ.js";
import {
  PERMISSIONS
} from "./chunk-HWUKOP6W.js";
import "./chunk-EZ3QPNZL.js";
import "./chunk-EMUCV553.js";
import "./chunk-AK5CFNWL.js";
import "./chunk-3DGPTBZ7.js";
import "./chunk-2CY5KYYM.js";
import "./chunk-H3FCIDRW.js";
import "./chunk-5F4D4C6Z.js";
import "./chunk-OUEMYOXU.js";
import "./chunk-QCNXQ2DE.js";
import "./chunk-ZJQ4UYYY.js";
import "./chunk-EBVWQ5LF.js";
import "./chunk-6QEBUXYT.js";
import "./chunk-C7VZDD7X.js";
import "./chunk-DX4T3VF2.js";
import "./chunk-LZEGSNAG.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-CMQCI47J.js";
import "./chunk-VNSHIJM4.js";
import "./chunk-H4GPAAVJ.js";
import "./chunk-SRLQTEHQ.js";
import "./chunk-FSCF6JPV.js";
import "./chunk-WXSAIKAZ.js";
import "./chunk-A7N4DYUM.js";
import "./chunk-PPQUKZVZ.js";
import "./chunk-6LKHPO37.js";
import "./chunk-IG3EEXLH.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-6LY4MOO2.js";
import "./chunk-WS4NBQP7.js";
import "./chunk-XNACAI67.js";
import "./chunk-P2RTLUGO.js";
import "./chunk-YCAWQGXI.js";
import "./chunk-C7H2BX76.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-3UFYUP46.js";
import "./chunk-6ZZNC6KH.js";
import "./chunk-XR2TPJJN.js";
import "./chunk-CYUO7FL7.js";
import "./chunk-FF3ATDAJ.js";
import "./chunk-SWD7HKJO.js";
import "./chunk-4W3OO4IH.js";
import "./chunk-QIJGNK42.js";
import "./chunk-R7HEAKUN.js";
import "./chunk-NTF6YBGM.js";
import "./chunk-XDPMCWEQ.js";
import "./chunk-AKZSQR2T.js";
import "./chunk-PDOCLNCK.js";
import "./chunk-3U6PS7YQ.js";
import "./chunk-VODNMJFC.js";
import "./chunk-ETJ6P3HJ.js";
import "./chunk-CZEWOCNY.js";
import "./chunk-KIW6APWY.js";
import "./chunk-B3M52OQC.js";
import "./chunk-IBYRPVC7.js";
import "./chunk-ROXU537S.js";
import "./chunk-S4AL3GV7.js";
import {
  useRBAC
} from "./chunk-2ZLL6DD2.js";
import "./chunk-44ADQSDE.js";
import "./chunk-K45EVBK5.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-YJEURQPS.js";
import "./chunk-YDTXDZ2Q.js";
import "./chunk-3ZONBOKZ.js";
import "./chunk-K65KIEAL.js";
import "./chunk-GGK2TLCV.js";
import "./chunk-CNFWPOPO.js";
import {
  Form,
  Formik
} from "./chunk-P2PSSEAT.js";
import "./chunk-OCXEABBQ.js";
import "./chunk-77LOGOXU.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import {
  errorsTrads
} from "./chunk-IFOFBKTA.js";
import {
  create3 as create,
  create4 as create2,
  create6 as create3
} from "./chunk-JEQEPTUK.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-IV6RKRFF.js";
import {
  Layouts
} from "./chunk-4UYY5MP5.js";
import "./chunk-YIA2BFSF.js";
import "./chunk-ZOZRZF6A.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-J2PFNBDN.js";
import "./chunk-GISP7OGO.js";
import "./chunk-E5KWVS2H.js";
import {
  useNotification
} from "./chunk-IBZCKHK5.js";
import "./chunk-LMV7ZQ6O.js";
import "./chunk-VHSA2XKI.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-R47JF2WO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  Main,
  TextInput,
  Toggle,
  Typography,
  useIntl
} from "./chunk-65K7KNUE.js";
import "./chunk-S65ZWNEO.js";
import {
  ForwardRef$3J,
  ForwardRef$3L,
  ForwardRef$4N
} from "./chunk-KWJWDXSR.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-FOD4ENRR.js";
import {
  dt
} from "./chunk-2D5XVQ5Y.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/@strapi/plugin-documentation/dist/admin/components/SettingsForm.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var schema = create3().shape({
  restrictedAccess: create(),
  password: create2().when("restrictedAccess", (value, initSchema) => {
    return value ? initSchema.required(errorsTrads.required.id).min(8).matches(/[a-z]/, "components.Input.error.contain.lowercase").matches(/[A-Z]/, "components.Input.error.contain.uppercase").matches(/\d/, "components.Input.error.contain.number") : initSchema;
  })
});
var FieldActionWrapper = dt(Field.Action)`
  svg {
    height: 1.6rem;
    width: 1.6rem;
    path {
      fill: ${({ theme }) => theme.colors.neutral600};
    }
  }
`;
var SettingsForm = ({ data, onSubmit }) => {
  const { formatMessage } = useIntl();
  const [passwordShown, setPasswordShown] = React.useState(false);
  const { allowedActions } = useRBAC(PERMISSIONS);
  return (0, import_jsx_runtime.jsx)(Formik, {
    enableReinitialize: true,
    initialValues: {
      restrictedAccess: (data == null ? void 0 : data.documentationAccess.restrictedAccess) || false,
      password: ""
    },
    onSubmit,
    validationSchema: schema,
    children: ({ handleSubmit, values, handleChange, errors, setFieldTouched, setFieldValue, setFieldError, dirty }) => {
      return (0, import_jsx_runtime.jsxs)(Form, {
        noValidate: true,
        onSubmit: handleSubmit,
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title: formatMessage({
              id: getTrad("plugin.name"),
              defaultMessage: "Documentation"
            }),
            subtitle: formatMessage({
              id: getTrad("pages.SettingsPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(Button, {
              type: "submit",
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4N, {}),
              disabled: !dirty && allowedActions.canUpdate,
              children: formatMessage({
                id: getTrad("pages.SettingsPage.Button.save"),
                defaultMessage: "Save"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              background: "neutral0",
              hasRadius: true,
              shadow: "filterShadow",
              paddingTop: 6,
              paddingBottom: 6,
              paddingLeft: 7,
              paddingRight: 7,
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 4,
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "delta",
                    tag: "h2",
                    children: formatMessage({
                      id: "global.settings",
                      defaultMessage: "Settings"
                    })
                  }),
                  (0, import_jsx_runtime.jsxs)(Grid.Root, {
                    gap: 4,
                    children: [
                      (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "restrictedAccess",
                          hint: formatMessage({
                            id: getTrad("pages.SettingsPage.toggle.hint"),
                            defaultMessage: "Make the documentation endpoint private"
                          }),
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: getTrad("pages.SettingsPage.toggle.label"),
                                defaultMessage: "Restricted Access"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Toggle, {
                              checked: values.restrictedAccess,
                              onChange: () => {
                                if (values.restrictedAccess === true) {
                                  setFieldValue("password", "", false);
                                  setFieldTouched("password", false, false);
                                  setFieldError("password", void 0);
                                }
                                setFieldValue("restrictedAccess", !values.restrictedAccess, false);
                              },
                              onLabel: "On",
                              offLabel: "Off"
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Hint, {})
                          ]
                        })
                      }),
                      values.restrictedAccess && (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "password",
                          error: errors.password ? formatMessage({
                            id: errors.password,
                            defaultMessage: errors.password
                          }) : void 0,
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: "global.password",
                                defaultMessage: "Password"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(TextInput, {
                              placeholder: "**********",
                              type: passwordShown ? "text" : "password",
                              value: values.password,
                              onChange: handleChange,
                              endAction: (0, import_jsx_runtime.jsx)(FieldActionWrapper, {
                                onClick: (e) => {
                                  e.stopPropagation();
                                  setPasswordShown((prev) => !prev);
                                },
                                label: formatMessage(passwordShown ? {
                                  id: "Auth.form.password.show-password",
                                  defaultMessage: "Show password"
                                } : {
                                  id: "Auth.form.password.hide-password",
                                  defaultMessage: "Hide password"
                                }),
                                children: passwordShown ? (0, import_jsx_runtime.jsx)(ForwardRef$3L, {}) : (0, import_jsx_runtime.jsx)(ForwardRef$3J, {})
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Error, {})
                          ]
                        })
                      })
                    ]
                  })
                ]
              })
            })
          })
        ]
      });
    }
  });
};

// node_modules/@strapi/plugin-documentation/dist/admin/utils/baseQuery.mjs
var isBaseQueryError = (error) => {
  return error.name !== void 0;
};

// node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var SettingsPage = () => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError, _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();
  const { data, isError, isLoading, isFetching } = useGetInfoQuery();
  const [updateSettings] = useUpdateSettingsMutation();
  const onUpdateSettings = async (body, formik) => {
    return updateSettings({
      body
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.update.success"),
          defaultMessage: "Successfully updated settings"
        })
      });
    }).catch((err) => {
      if (isBaseQueryError(err) && err.name === "ValidationError") {
        toggleNotification({
          type: "danger",
          message: formatAPIError(err)
        });
      }
    });
  };
  if (isLoading || isFetching) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime2.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime2.jsx)(Main, {
    children: (0, import_jsx_runtime2.jsx)(SettingsForm, {
      data,
      onSubmit: onUpdateSettings
    })
  });
};
export {
  SettingsPage
};
//# sourceMappingURL=Settings-7WBDQUEA.js.map
