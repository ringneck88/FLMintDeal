import {
  DocumentStatus,
  RelativeTime
} from "./chunk-LDS4ORMA.js";
import {
  contentManagerApi
} from "./chunk-CPDHJOKM.js";
import {
  useGetCountDocumentsQuery
} from "./chunk-75AMSGKZ.js";
import "./chunk-7BQSG34G.js";
import "./chunk-OUDLGTLG.js";
import "./chunk-Z4VYVF6F.js";
import {
  Widget
} from "./chunk-MW7NR4II.js";
import "./chunk-GLF6YFV7.js";
import "./chunk-WFH7IKG3.js";
import "./chunk-QIJGNK42.js";
import "./chunk-CBXFKNI7.js";
import "./chunk-6SLSR3V5.js";
import "./chunk-DBSVQ25E.js";
import "./chunk-RP2HQERK.js";
import "./chunk-HKTRYX66.js";
import "./chunk-OQZXCP36.js";
import "./chunk-7KPVGNA7.js";
import "./chunk-L75TR3S6.js";
import "./chunk-MD77RHEK.js";
import "./chunk-CJYMQ5RC.js";
import "./chunk-Z5XU7XV3.js";
import "./chunk-OCGNPFME.js";
import "./chunk-HAKPDRH2.js";
import "./chunk-6BYSKXVC.js";
import "./chunk-KP2S67WQ.js";
import "./chunk-GN632RO4.js";
import "./chunk-ZLVXZKQT.js";
import "./chunk-LNEL7HVH.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-F2PEH3R3.js";
import "./chunk-K65KIEAL.js";
import "./chunk-K3CVWJE3.js";
import "./chunk-OCC2WVY6.js";
import "./chunk-RMY6H2PE.js";
import "./chunk-VIQAQTIJ.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-K6ILLSNA.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-PRPJRBJ4.js";
import "./chunk-KABRVNMG.js";
import {
  useTracking
} from "./chunk-ZVCBMQGR.js";
import "./chunk-7EF4ZGN2.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import "./chunk-3ZR4HWWZ.js";
import "./chunk-APRBSAKY.js";
import "./chunk-5UHWJQ4E.js";
import "./chunk-ITTLO5BD.js";
import "./chunk-K2WS5PFK.js";
import "./chunk-THQTG5GX.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Box,
  Flex,
  IconButton,
  Portal$1,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-VQZQIJHF.js";
import "./chunk-5ZC4PE57.js";
import {
  Link,
  useNavigate
} from "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$1z
} from "./chunk-KWJWDXSR.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-2D5XVQ5Y.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);

// node_modules/@strapi/content-manager/dist/admin/services/homepage.mjs
var homepageService = contentManagerApi.enhanceEndpoints({
  addTagTypes: [
    "RecentDocumentList"
  ]
}).injectEndpoints({
  /**
   * TODO: Remove overrideExisting when we remove the future flag
   * and delete the old homepage service in the admin
   */
  overrideExisting: true,
  endpoints: (builder) => ({
    getRecentDocuments: builder.query({
      query: (params) => `/content-manager/homepage/recent-documents?action=${params.action}`,
      transformResponse: (response) => response.data,
      providesTags: (res, _err, { action }) => [
        {
          type: "RecentDocumentList",
          id: action
        }
      ]
    })
  })
});
var { useGetRecentDocumentsQuery } = homepageService;

// node_modules/@strapi/content-manager/dist/admin/components/Widgets.mjs
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var RecentDocumentsTable = ({ documents }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome");
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 5,
    rowCount: (documents == null ? void 0 : documents.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(document),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: document.title,
              variant: "omega",
              textColor: "neutral800",
              children: document.title
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              variant: "omega",
              textColor: "neutral600",
              children: document.kind === "singleType" ? formatMessage({
                id: "content-manager.widget.last-edited.single-type",
                defaultMessage: "Single-Type"
              }) : formatMessage({
                id: document.contentTypeDisplayName,
                defaultMessage: document.contentTypeDisplayName
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, {
                status: document.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              textColor: "neutral600",
              children: (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(document.updatedAt)
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(document),
                onClick: () => trackUsage("willEditEntryFromHome"),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
              })
            })
          })
        ]
      }, document.documentId))
    })
  });
};
var LastEditedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentDocumentsQuery({
    action: "update"
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "content-manager.widget.last-edited.no-data",
        defaultMessage: "No edited entries"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, {
    documents: data
  });
};
var LastPublishedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentDocumentsQuery({
    action: "publish"
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "content-manager.widget.last-published.no-data",
        defaultMessage: "No published entries"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, {
    documents: data
  });
};
var RADIUS = 80;
var STROKE = 10;
var CIRCUMFERENCE = 2 * Math.PI * (RADIUS - STROKE / 2);
var ArcChart = dt.circle`
  stroke: ${({ theme, $arcColor }) => theme.colors[$arcColor]};
`;
var TextChart = dt.tspan`
  text-transform: lowercase;
  fill: ${({ theme, $textColor }) => theme.colors[$textColor]};
`;
var KeyChartItem = dt(Flex)`
  width: 100%;

  ${({ theme }) => theme.breakpoints.small} {
    width: auto;
  }
`;
var DonutChartSVG = ({ data }) => {
  const { locale } = useIntl();
  const { formatMessage } = useIntl();
  const total = data.reduce((acc, curr) => acc + curr.count, 0);
  const [tooltip, setTooltip] = React.useState({
    visible: false,
    x: 0,
    y: 0,
    value: null
  });
  let cumulativePercent = 0;
  const handleMouseOver = (e, value) => {
    setTooltip({
      visible: true,
      x: e.clientX,
      y: e.clientY,
      value
    });
  };
  const handleMouseOut = () => {
    setTooltip((t) => ({
      ...t,
      visible: false
    }));
  };
  const handleFocus = (e, value) => {
    setTooltip({
      visible: true,
      x: e.currentTarget.getBoundingClientRect().width / 2 + e.currentTarget.getBoundingClientRect().left,
      y: e.currentTarget.getBoundingClientRect().height + e.currentTarget.getBoundingClientRect().top,
      value
    });
  };
  return (0, import_jsx_runtime.jsxs)(Flex, {
    direction: "column",
    gap: 6,
    margin: "auto",
    children: [
      (0, import_jsx_runtime.jsxs)("svg", {
        width: RADIUS * 2,
        height: RADIUS * 2,
        viewBox: `0 0 ${RADIUS * 2} ${RADIUS * 2}`,
        style: {
          position: "relative",
          zIndex: 1
        },
        children: [
          (0, import_jsx_runtime.jsx)("g", {
            transform: `rotate(-90 ${RADIUS} ${RADIUS})`,
            children: data.map((value) => {
              const percent = value.count / total * 100;
              const arcLength = percent / 100 * CIRCUMFERENCE;
              const dashArray = `${arcLength} ${CIRCUMFERENCE - arcLength}`;
              const dashOffset = CIRCUMFERENCE * (1 - cumulativePercent / 100);
              const el = (0, import_jsx_runtime.jsx)(ArcChart, {
                cx: RADIUS,
                cy: RADIUS,
                r: RADIUS - STROKE / 2,
                fill: "none",
                strokeWidth: STROKE,
                strokeDasharray: dashArray,
                strokeDashoffset: dashOffset,
                style: {
                  transition: "stroke-dashoffset 0.3s",
                  cursor: "pointer"
                },
                tabIndex: 0,
                "aria-describedby": tooltip.visible ? "chart-tooltip" : void 0,
                onFocus: (e) => handleFocus(e, value),
                onBlur: handleMouseOut,
                onMouseMove: (e) => handleMouseOver(e, value),
                onMouseLeave: handleMouseOut,
                $arcColor: value.color
              }, value.label);
              cumulativePercent += percent;
              return el;
            })
          }),
          (0, import_jsx_runtime.jsxs)("text", {
            x: RADIUS,
            y: RADIUS,
            textAnchor: "middle",
            fontSize: "2.4rem",
            fontWeight: "bold",
            children: [
              (0, import_jsx_runtime.jsx)(TextChart, {
                x: RADIUS,
                dy: "0",
                $textColor: "neutral800",
                children: new Intl.NumberFormat(locale, {
                  notation: "compact",
                  maximumFractionDigits: 1
                }).format(total)
              }),
              (0, import_jsx_runtime.jsx)(TextChart, {
                x: RADIUS,
                dy: "1.4em",
                fontSize: "1.4rem",
                fontWeight: "normal",
                $textColor: "neutral600",
                children: formatMessage({
                  id: "content-manager.widget.chart-entries.title",
                  defaultMessage: "entries"
                })
              })
            ]
          })
        ]
      }),
      tooltip.visible && tooltip.value && (0, import_jsx_runtime.jsx)(Portal$1, {
        style: {
          position: "fixed",
          left: 16,
          top: 16,
          zIndex: 2,
          transform: `translate(${tooltip.x}px, ${tooltip.y}px)`
        },
        "data-testid": "entries-chart-tooltip",
        children: (0, import_jsx_runtime.jsx)(Box, {
          background: "neutral900",
          padding: 2,
          borderRadius: 1,
          textAlign: "center",
          role: "tooltip",
          "aria-live": "polite",
          children: (0, import_jsx_runtime.jsx)(Typography, {
            textColor: "neutral0",
            children: formatMessage({
              id: "content-manager.widget.chart-entries.tooltip",
              defaultMessage: "{count} items"
            }, {
              count: tooltip.value.count,
              label: tooltip.value.label
            })
          })
        })
      }),
      (0, import_jsx_runtime.jsx)(Flex, {
        gap: 4,
        wrap: "wrap",
        children: data.map((value) => value.count > 0 && (0, import_jsx_runtime.jsxs)(KeyChartItem, {
          gap: 1,
          children: [
            (0, import_jsx_runtime.jsx)(Box, {
              background: value.color,
              padding: 2,
              borderRadius: 1
            }),
            (0, import_jsx_runtime.jsx)(Typography, {
              variant: "pi",
              children: value.label
            })
          ]
        }, value.label))
      })
    ]
  });
};
var ChartEntriesWidget = () => {
  const { formatMessage } = useIntl();
  const { data: countDocuments, isLoading, error } = useGetCountDocumentsQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  const { draft, published, modified } = countDocuments ?? {
    draft: 0,
    published: 0,
    modified: 0
  };
  const total = draft + published + modified;
  if (!total) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "content-manager.widget.last-published.no-data",
        defaultMessage: "No published entries"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(Flex, {
    minHeight: "100%",
    children: (0, import_jsx_runtime.jsx)(DonutChartSVG, {
      data: [
        {
          label: formatMessage({
            id: "content-manager.containers.List.draft",
            defaultMessage: "Draft"
          }),
          count: draft,
          color: "secondary500"
        },
        {
          label: formatMessage({
            id: "content-manager.containers.List.modified",
            defaultMessage: "Modified"
          }),
          count: modified,
          color: "alternative500"
        },
        {
          label: formatMessage({
            id: "content-manager.containers.List.published",
            defaultMessage: "Published"
          }),
          count: published,
          color: "success500"
        }
      ]
    })
  });
};
export {
  ChartEntriesWidget,
  LastEditedWidget,
  LastPublishedWidget
};
//# sourceMappingURL=Widgets-QGUQEN3C.js.map
