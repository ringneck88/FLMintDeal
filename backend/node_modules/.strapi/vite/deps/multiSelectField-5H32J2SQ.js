import {
  useSystemTheme
} from "./chunk-QNS55ADW.js";
import {
  Combobox,
  DesignSystemProvider,
  Field,
  MultiSelect,
  MultiSelectNested,
  MultiSelectOption,
  Option,
  SingleSelect,
  SingleSelectOption,
  TooltipImpl,
  darkTheme,
  lightTheme
} from "./chunk-JTEVNRST.js";
import "./chunk-AWHRF5BE.js";
import {
  ForwardRef$2H
} from "./chunk-UECOSIBE.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import "./chunk-OSJEGB6V.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/strapi-plugin-superfields/admin/components/multiSelectField.jsx
var import_react = __toESM(require_react());

// node_modules/strapi-plugin-superfields/admin/helpers/index.jsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var renderSelect = (sharedProps, selectType, options, tooltipContent) => {
  const commonProps = { ...sharedProps };
  switch (selectType) {
    case "single":
      return (0, import_jsx_runtime.jsx)(SingleSelect, { ...commonProps, children: options.map((opt, i) => (0, import_jsx_runtime.jsx)(SingleSelectOption, { value: opt.value, children: opt.label }, i)) });
    case "multi":
      return (0, import_jsx_runtime.jsx)(MultiSelect, { ...commonProps, children: options.map((opt, i) => (0, import_jsx_runtime.jsx)(MultiSelectOption, { value: opt.value, children: opt.label }, i)) });
    case "combobox":
      return (0, import_jsx_runtime.jsx)(Combobox, { ...commonProps, children: options.map((opt, i) => (0, import_jsx_runtime.jsx)(Option, { value: opt.value, children: opt.label }, i)) });
    case "nested":
      return null;
    default:
      return null;
  }
};

// node_modules/strapi-plugin-superfields/admin/components/multiSelectField.jsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var MultiSelectField = ({
  name,
  value,
  onChange,
  attribute,
  error,
  required
}) => {
  const systemTheme = useSystemTheme();
  const theme = systemTheme === "dark" ? darkTheme : lightTheme;
  const {
    "tooltip-content": tooltipContent = "",
    description = "",
    default: defaultValue = [],
    nestedOptions = "[]",
    selectType = "multi",
    enumValues = ""
  } = attribute.options || {};
  const options = enumValues.map((item) => {
    const [label, val] = item == null ? void 0 : item.split(":").map((s) => s.trim());
    return { label: label || val, value: val || label };
  });
  let tree = [];
  if (selectType === "nested") {
    try {
      tree = JSON.parse(nestedOptions);
    } catch (e) {
      console.warn("Invalid nestedOptions JSON", e);
      tree = [];
    }
  }
  const [selected, setSelected] = (0, import_react.useState)(
    Array.isArray(value) && value.length ? value : defaultValue
  );
  const handleChange = (next) => {
    setSelected(next);
    onChange({ target: { name, value: next, type: "string" } });
  };
  const labelAction = tooltipContent && (0, import_jsx_runtime2.jsx)(DesignSystemProvider, { theme, children: (0, import_jsx_runtime2.jsx)(TooltipImpl, { label: tooltipContent ?? "", children: (0, import_jsx_runtime2.jsx)(
    ForwardRef$2H,
    {
      "aria-hidden": true,
      style: {
        cursor: "pointer",
        color: systemTheme === "dark" ? "#fff" : "#000"
      }
    }
  ) }) });
  return (0, import_jsx_runtime2.jsxs)(Field.Root, { id: name, hint: description, error, children: [
    (0, import_jsx_runtime2.jsx)(Field.Label, { style: { marginBottom: "5px" }, children: name }),
    selectType === "nested" ? (0, import_jsx_runtime2.jsx)(
      MultiSelectNested,
      {
        id: name,
        name,
        value: selected,
        options: tree,
        onChange: handleChange,
        hint: description,
        error,
        required,
        clearLabel: "Clear all selections",
        startIcon: labelAction,
        withTags: true
      }
    ) : (
      // fallback to flat selects (SingleSelect / MultiSelect / Combobox)
      renderSelect(
        { name, value: selected, onChange: handleChange, hint: description, required, error, id: name, withTags: true, startIcon: labelAction },
        selectType,
        options,
        tooltipContent
      )
    )
  ] });
};
var multiSelectField_default = MultiSelectField;
export {
  multiSelectField_default as default
};
//# sourceMappingURL=multiSelectField-5H32J2SQ.js.map
