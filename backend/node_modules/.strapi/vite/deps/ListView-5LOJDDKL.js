import {
  Table,
  useOnce
} from "./chunk-ZJIF3OPP.js";
import "./chunk-DPWQI6AY.js";
import {
  useDeleteTransferTokenMutation,
  useGetTransferTokensQuery
} from "./chunk-VVGJV4F6.js";
import {
  TRANSFER_TOKEN_TYPE
} from "./chunk-7GAX2FTH.js";
import "./chunk-OQZXCP36.js";
import "./chunk-KP2S67WQ.js";
import {
  useRBAC
} from "./chunk-GN632RO4.js";
import "./chunk-ZLVXZKQT.js";
import "./chunk-LNEL7HVH.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import {
  Layouts
} from "./chunk-KABRVNMG.js";
import {
  useTracking
} from "./chunk-ZVCBMQGR.js";
import "./chunk-7EF4ZGN2.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  ForwardRef$J,
  Page,
  useAPIErrorHandler
} from "./chunk-3ZR4HWWZ.js";
import "./chunk-APRBSAKY.js";
import {
  useTypedSelector
} from "./chunk-5UHWJQ4E.js";
import {
  useNotification
} from "./chunk-ITTLO5BD.js";
import {
  require_lib
} from "./chunk-K2WS5PFK.js";
import "./chunk-THQTG5GX.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  EmptyStateLayout,
  LinkButton,
  useIntl
} from "./chunk-VQZQIJHF.js";
import {
  Link,
  useNavigate
} from "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$1l
} from "./chunk-KWJWDXSR.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-2D5XVQ5Y.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/pages/TransferTokens/ListView.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var qs = __toESM(require_lib(), 1);
var tableHeaders = [
  {
    name: "name",
    label: {
      id: "Settings.tokens.ListView.headers.name",
      defaultMessage: "Name"
    },
    sortable: true
  },
  {
    name: "description",
    label: {
      id: "Settings.tokens.ListView.headers.description",
      defaultMessage: "Description"
    },
    sortable: false
  },
  {
    name: "createdAt",
    label: {
      id: "Settings.tokens.ListView.headers.createdAt",
      defaultMessage: "Created at"
    },
    sortable: false
  },
  {
    name: "lastUsedAt",
    label: {
      id: "Settings.tokens.ListView.headers.lastUsedAt",
      defaultMessage: "Last used"
    },
    sortable: false
  }
];
var ListView = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["transfer-tokens"];
  });
  const { isLoading: isLoadingRBAC, allowedActions: { canCreate, canDelete, canUpdate, canRead } } = useRBAC(permissions);
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  React.useEffect(() => {
    navigate({
      search: qs.stringify({
        sort: "name:ASC"
      }, {
        encode: false
      })
    });
  }, [
    navigate
  ]);
  useOnce(() => {
    trackUsage("willAccessTokenList", {
      tokenType: TRANSFER_TOKEN_TYPE
    });
  });
  const headers = tableHeaders.map((header) => ({
    ...header,
    label: formatMessage(header.label)
  }));
  const { data: transferTokens = [], isLoading: isLoadingTokens, error } = useGetTransferTokensQuery(void 0, {
    skip: !canRead
  });
  React.useEffect(() => {
    if (transferTokens) {
      trackUsage("didAccessTokenList", {
        number: transferTokens.length,
        tokenType: TRANSFER_TOKEN_TYPE
      });
    }
  }, [
    trackUsage,
    transferTokens
  ]);
  React.useEffect(() => {
    if (error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(error)
      });
    }
  }, [
    error,
    formatAPIError,
    toggleNotification
  ]);
  const [deleteToken] = useDeleteTransferTokenMutation();
  const handleDelete = async (id) => {
    try {
      const res = await deleteToken(id);
      if ("error" in res) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
      }
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occured"
        })
      });
    }
  };
  const isLoading = isLoadingTokens || isLoadingRBAC;
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: "Settings.PageTitle",
          defaultMessage: "Settings - {name}"
        }, {
          name: "Transfer Tokens"
        })
      }),
      (0, import_jsx_runtime.jsx)(Layouts.Header, {
        title: formatMessage({
          id: "Settings.transferTokens.title",
          defaultMessage: "Transfer Tokens"
        }),
        subtitle: formatMessage({
          id: "Settings.transferTokens.description",
          defaultMessage: '"List of generated transfer tokens"'
        }),
        primaryAction: canCreate ? (0, import_jsx_runtime.jsx)(LinkButton, {
          role: "button",
          tag: Link,
          "data-testid": "create-transfer-token-button",
          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}),
          size: "S",
          onClick: () => trackUsage("willAddTokenFromList", {
            tokenType: TRANSFER_TOKEN_TYPE
          }),
          to: "/settings/transfer-tokens/create",
          children: formatMessage({
            id: "Settings.transferTokens.create",
            defaultMessage: "Create new Transfer Token"
          })
        }) : void 0
      }),
      !canRead ? (0, import_jsx_runtime.jsx)(Page.NoPermissions, {}) : (0, import_jsx_runtime.jsx)(Page.Main, {
        "aria-busy": isLoading,
        children: (0, import_jsx_runtime.jsxs)(Layouts.Content, {
          children: [
            transferTokens.length > 0 && (0, import_jsx_runtime.jsx)(Table, {
              permissions: {
                canRead,
                canDelete,
                canUpdate
              },
              headers,
              isLoading,
              onConfirmDelete: handleDelete,
              tokens: transferTokens,
              tokenType: TRANSFER_TOKEN_TYPE
            }),
            canCreate && transferTokens.length === 0 ? (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
              action: (0, import_jsx_runtime.jsx)(LinkButton, {
                tag: Link,
                variant: "secondary",
                startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}),
                to: "/settings/transfer-tokens/create",
                children: formatMessage({
                  id: "Settings.transferTokens.addNewToken",
                  defaultMessage: "Add new Transfer Token"
                })
              }),
              icon: (0, import_jsx_runtime.jsx)(ForwardRef$J, {
                width: "16rem"
              }),
              content: formatMessage({
                id: "Settings.transferTokens.addFirstToken",
                defaultMessage: "Add your first Transfer Token"
              })
            }) : null,
            !canCreate && transferTokens.length === 0 ? (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
              icon: (0, import_jsx_runtime.jsx)(ForwardRef$J, {
                width: "16rem"
              }),
              content: formatMessage({
                id: "Settings.transferTokens.emptyStateLayout",
                defaultMessage: "You donâ€™t have any content yet..."
              })
            }) : null
          ]
        })
      })
    ]
  });
};
var ProtectedListView = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["transfer-tokens"].main;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(ListView, {})
  });
};
export {
  ListView,
  ProtectedListView
};
//# sourceMappingURL=ListView-5LOJDDKL.js.map
