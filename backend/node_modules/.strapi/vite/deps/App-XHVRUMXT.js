import {
  getTrad,
  useDeleteVersionMutation,
  useGetInfoQuery,
  useRegenerateDocMutation
} from "./chunk-UJXDGAWB.js";
import "./chunk-OBLG5CZR.js";
import "./chunk-PQYKAAKU.js";
import "./chunk-6ADPFCWV.js";
import "./chunk-XM4E5RAK.js";
import "./chunk-EBVWQ5LF.js";
import "./chunk-32NDLLN7.js";
import "./chunk-AK5CFNWL.js";
import "./chunk-CNSOVDEK.js";
import "./chunk-5C33L2XD.js";
import "./chunk-AEOOYY4M.js";
import "./chunk-HVYEPU7U.js";
import "./chunk-7JMZG23H.js";
import "./chunk-PUJRCIA5.js";
import "./chunk-MB2UXK5R.js";
import "./chunk-2DXC6VMW.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-ZDPQDZNN.js";
import "./chunk-DR2KJT7N.js";
import "./chunk-TZUVKJPR.js";
import "./chunk-H4GPAAVJ.js";
import "./chunk-D7VB2JH6.js";
import "./chunk-K4HOYFSG.js";
import "./chunk-FAGRM5RI.js";
import "./chunk-NZULJHI5.js";
import "./chunk-LU37QYRX.js";
import "./chunk-6UZ5XFND.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-6LY4MOO2.js";
import "./chunk-CMXBNECB.js";
import "./chunk-XNACAI67.js";
import "./chunk-SG5OIL7L.js";
import "./chunk-VB7L32VU.js";
import "./chunk-C7H2BX76.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-GE5IAH4J.js";
import "./chunk-OIRKIL4Q.js";
import "./chunk-PMX3ZZY6.js";
import "./chunk-OUNTTE7U.js";
import "./chunk-K6YEEALD.js";
import "./chunk-LZZSENXG.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-YJEURQPS.js";
import "./chunk-LLXW6ZGT.js";
import "./chunk-3OWI4LI4.js";
import "./chunk-K65KIEAL.js";
import "./chunk-GGK2TLCV.js";
import "./chunk-4LBDK6DY.js";
import "./chunk-4Q4TKY6Z.js";
import "./chunk-H5GOXVGJ.js";
import "./chunk-H7J7O6CS.js";
import "./chunk-VJTD7JQN.js";
import "./chunk-6IDSUB6I.js";
import "./chunk-DJ37KOGQ.js";
import "./chunk-QIJGNK42.js";
import "./chunk-V27ACWIU.js";
import "./chunk-VN6RN454.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-L64HSFJF.js";
import "./chunk-OLMOFMS6.js";
import "./chunk-QPHVQMRI.js";
import "./chunk-7SNDYXOX.js";
import "./chunk-D4FALYFG.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-RWSWUA3U.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-UQCUSDIL.js";
import "./chunk-KQ5DITPI.js";
import "./chunk-AWEAFHIY.js";
import "./chunk-JMYUDDH4.js";
import "./chunk-CRYLFCYT.js";
import "./chunk-D23E6WPG.js";
import {
  ConfirmDialog
} from "./chunk-YTMQ5AXX.js";
import "./chunk-56Y6OSNJ.js";
import {
  Layouts
} from "./chunk-XEWPXT4E.js";
import "./chunk-VX57DWAQ.js";
import "./chunk-IPDHX6XM.js";
import "./chunk-YXDCVYVT.js";
import {
  useRBAC
} from "./chunk-UIABWZKT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-3EOUGJQ7.js";
import "./chunk-AYTDDJYY.js";
import "./chunk-3UYOWTGU.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import {
  useNotification
} from "./chunk-X6NWD3PJ.js";
import "./chunk-YNBSOFDA.js";
import "./chunk-KQCZNHVJ.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Dialog,
  EmptyStateLayout,
  Flex,
  IconButton,
  LinkButton,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography,
  useIntl
} from "./chunk-ZQ4GH6IN.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  PERMISSIONS
} from "./chunk-HWUKOP6W.js";
import {
  ForwardRef$3L,
  ForwardRef$5v,
  ForwardRef$n
} from "./chunk-KWJWDXSR.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-2D5XVQ5Y.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-documentation/dist/admin/pages/App.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var App = () => {
  var _a;
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { data, isLoading: isLoadingInfo, isError } = useGetInfoQuery();
  const [regenerate] = useRegenerateDocMutation();
  const [deleteVersion] = useDeleteVersionMutation();
  const [showConfirmDelete, setShowConfirmDelete] = React.useState(false);
  const [versionToDelete, setVersionToDelete] = React.useState();
  const { allowedActions, isLoading: isLoadingRBAC } = useRBAC(PERMISSIONS);
  const isLoading = isLoadingInfo || isLoadingRBAC;
  const colCount = 4;
  const rowCount = (((_a = data == null ? void 0 : data.docVersions) == null ? void 0 : _a.length) || 0) + 1;
  const handleRegenerateDoc = (version) => {
    regenerate({
      version
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.generate.success"),
          defaultMessage: "Successfully generated documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
  };
  const handleConfirmDelete = async () => {
    if (!versionToDelete) {
      return;
    }
    await deleteVersion({
      version: versionToDelete
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.delete.success"),
          defaultMessage: "Successfully deleted documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
    setShowConfirmDelete(!showConfirmDelete);
  };
  const handleClickDelete = (version) => {
    setVersionToDelete(version);
    setShowConfirmDelete(!showConfirmDelete);
  };
  const title = formatMessage({
    id: getTrad("plugin.name"),
    defaultMessage: "Documentation"
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: title
      }),
      (0, import_jsx_runtime.jsxs)(Page.Main, {
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title,
            subtitle: formatMessage({
              id: getTrad("pages.PluginPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(OpenDocLink, {
              disabled: !allowedActions.canRead || !(data == null ? void 0 : data.currentVersion) || !(data == null ? void 0 : data.prefix),
              href: createDocumentationHref(`${data == null ? void 0 : data.prefix}/v${data == null ? void 0 : data.currentVersion}`),
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3L, {}),
              children: formatMessage({
                id: getTrad("pages.PluginPage.Button.open"),
                defaultMessage: "Open Documentation"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (data == null ? void 0 : data.docVersions.length) ? (0, import_jsx_runtime.jsxs)(Table, {
              colCount,
              rowCount,
              children: [
                (0, import_jsx_runtime.jsx)(Thead, {
                  children: (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.version"),
                            defaultMessage: "Version"
                          })
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.generated"),
                            defaultMessage: "Last Generated"
                          })
                        })
                      })
                    ]
                  })
                }),
                (0, import_jsx_runtime.jsx)(Tbody, {
                  children: data.docVersions.slice(0).sort((a, b) => a.generatedDate < b.generatedDate ? 1 : -1).map((doc) => (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.version
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.generatedDate
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        children: (0, import_jsx_runtime.jsxs)(Flex, {
                          justifyContent: "end",
                          onClick: (e) => e.stopPropagation(),
                          children: [
                            (0, import_jsx_runtime.jsx)(IconButton, {
                              tag: "a",
                              disabled: !allowedActions.canRead,
                              href: createDocumentationHref(`${data.prefix}/v${doc.version}`),
                              variant: "ghost",
                              target: "_blank",
                              rel: "noopener noreferrer",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.show"),
                                defaultMessage: "Open {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$3L, {})
                            }),
                            allowedActions.canRegenerate ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleRegenerateDoc(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.regenerate"),
                                defaultMessage: "Regenerate {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$5v, {})
                            }) : null,
                            allowedActions.canUpdate && doc.version !== data.currentVersion ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleClickDelete(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: "global.delete-target",
                                defaultMessage: "Delete {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$n, {})
                            }) : null
                          ]
                        })
                      })
                    ]
                  }, doc.version))
                })
              ]
            }) : (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
              content: "",
              icon: null
            })
          }),
          (0, import_jsx_runtime.jsx)(Dialog.Root, {
            open: showConfirmDelete,
            onOpenChange: setShowConfirmDelete,
            children: (0, import_jsx_runtime.jsx)(ConfirmDialog, {
              onConfirm: handleConfirmDelete
            })
          })
        ]
      })
    ]
  });
};
var OpenDocLink = dt(LinkButton)`
  text-decoration: none;
`;
var createDocumentationHref = (path) => {
  if (path.startsWith("http")) {
    return path;
  }
  if (path.startsWith("/")) {
    return `${window.strapi.backendURL}${path}`;
  }
  return `${window.strapi.backendURL}/${path}`;
};
export {
  App
};
//# sourceMappingURL=App-XHVRUMXT.js.map
