import "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-graphql/dist/admin/package.json.mjs
var name = "@strapi/plugin-graphql";
var version = "5.23.4";
var description = "Adds GraphQL endpoint with default API methods.";
var repository = {
  type: "git",
  url: "https://github.com/strapi/strapi.git",
  directory: "packages/plugins/graphql"
};
var license = "SEE LICENSE IN LICENSE";
var author = {
  name: "Strapi Solutions SAS",
  email: "hi@strapi.io",
  url: "https://strapi.io"
};
var maintainers = [
  {
    name: "Strapi Solutions SAS",
    email: "hi@strapi.io",
    url: "https://strapi.io"
  }
];
var exports = {
  "./strapi-admin": {
    types: "./dist/admin/src/index.d.ts",
    source: "./admin/src/index.ts",
    "import": "./dist/admin/index.mjs",
    require: "./dist/admin/index.js",
    "default": "./dist/admin/index.js"
  },
  "./strapi-server": {
    types: "./dist/server/src/index.d.ts",
    source: "./server/src/index.ts",
    "import": "./dist/server/index.mjs",
    require: "./dist/server/index.js",
    "default": "./dist/server/index.js"
  },
  "./package.json": "./package.json"
};
var files = [
  "dist/",
  "strapi-server.js"
];
var scripts = {
  build: "run -T npm-run-all clean --parallel build:code build:types",
  "build:code": "run -T rollup -c",
  "build:types": "run -T run-p build:types:server build:types:admin",
  "build:types:server": "run -T tsc -p server/tsconfig.build.json --emitDeclarationOnly",
  "build:types:admin": "run -T tsc -p admin/tsconfig.build.json --emitDeclarationOnly",
  clean: "run -T rimraf ./dist",
  lint: "run -T eslint .",
  "test:unit": "run -T jest --passWithNoTests",
  "test:unit:watch": "run -T jest --watch",
  watch: "run -T rollup -c -w"
};
var dependencies = {
  "@apollo/server": "4.11.0",
  "@as-integrations/koa": "1.1.1",
  "@graphql-tools/schema": "10.0.3",
  "@graphql-tools/utils": "^10.1.3",
  "@koa/cors": "5.0.0",
  "@strapi/design-system": "2.0.0-rc.29",
  "@strapi/icons": "2.0.0-rc.29",
  "@strapi/utils": "5.23.4",
  graphql: "^16.8.1",
  "graphql-depth-limit": "^1.1.0",
  "graphql-playground-middleware-koa": "^1.6.21",
  "graphql-scalars": "1.22.2",
  "koa-bodyparser": "4.4.1",
  "koa-compose": "^4.1.0",
  lodash: "4.17.21",
  nexus: "1.3.0",
  pluralize: "8.0.0"
};
var devDependencies = {
  "@strapi/strapi": "5.23.4",
  "@strapi/types": "5.23.4",
  "@types/graphql-depth-limit": "1.1.5",
  "@types/koa-bodyparser": "4.3.12",
  "@types/koa__cors": "5.0.0",
  "cross-env": "^7.0.3",
  "eslint-config-custom": "5.23.4",
  koa: "2.16.1",
  react: "18.3.1",
  "react-dom": "18.3.1",
  "react-router-dom": "6.22.3",
  "styled-components": "6.1.8",
  tsconfig: "5.23.4",
  typescript: "5.4.4"
};
var peerDependencies = {
  "@strapi/strapi": "^5.0.0",
  react: "^17.0.0 || ^18.0.0",
  "react-dom": "^17.0.0 || ^18.0.0",
  "react-router-dom": "^6.0.0",
  "styled-components": "^6.0.0"
};
var engines = {
  node: ">=18.0.0 <=22.x.x",
  npm: ">=6.0.0"
};
var strapi = {
  displayName: "GraphQL",
  name: "graphql",
  description: "Adds GraphQL endpoint with default API methods.",
  kind: "plugin"
};
var pluginPkg = {
  name,
  version,
  description,
  repository,
  license,
  author,
  maintainers,
  exports,
  files,
  scripts,
  dependencies,
  devDependencies,
  peerDependencies,
  engines,
  strapi
};

// node_modules/@strapi/plugin-graphql/dist/admin/pluginId.mjs
var pluginId = "graphql";

// node_modules/@strapi/plugin-graphql/dist/admin/utils/prefixPluginTranslations.mjs
var prefixPluginTranslations = (trad, pluginId2) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId2}.${current}`] = trad[current];
    return acc;
  }, {});
};

// node_modules/@strapi/plugin-graphql/dist/admin/index.mjs
function __variableDynamicImportRuntime0__(path) {
  switch (path) {
    case "./translations/dk.json":
      return import("./dk.json-PDWG4YQY.js");
    case "./translations/en.json":
      return import("./en.json-6S55IESW.js");
    case "./translations/es.json":
      return import("./es.json-HOBM3SBY.js");
    case "./translations/fr.json":
      return import("./fr.json-R5HRWMMF.js");
    case "./translations/pl.json":
      return import("./pl.json-T5SG2GQO.js");
    case "./translations/ru.json":
      return import("./ru.json-TCM3G37R.js");
    case "./translations/sv.json":
      return import("./sv.json-7RW47NGX.js");
    case "./translations/tr.json":
      return import("./tr.json-J7YG6C7L.js");
    case "./translations/uk.json":
      return import("./uk.json-ECPQGVAJ.js");
    case "./translations/zh-Hans.json":
      return import("./zh-Hans.json-6FTAWCTO.js");
    case "./translations/zh.json":
      return import("./zh.json-XBMXVZCB.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var name2 = pluginPkg.strapi.name;
var index = {
  // TODO: we need to have the type for StrapiApp done from `@strapi/admin` package.
  register(app) {
    app.registerPlugin({
      id: pluginId,
      name: name2
    });
  },
  bootstrap() {
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime0__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, pluginId),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};
export {
  index as default
};
//# sourceMappingURL=@strapi_plugin-graphql_strapi-admin.js.map
