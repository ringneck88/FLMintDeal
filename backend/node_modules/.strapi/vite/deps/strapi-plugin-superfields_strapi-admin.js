import {
  calendarIcon_default
} from "./chunk-KZS6Y5BG.js";
import "./chunk-QNS55ADW.js";
import {
  create3 as create,
  create4 as create2,
  create7 as create3
} from "./chunk-QFOTNZ3I.js";
import "./chunk-T2WEL2Q6.js";
import "./chunk-3GJUYW3U.js";
import "./chunk-VK2TTQSV.js";
import "./chunk-KGWSGIMU.js";
import {
  ForwardRef$2t,
  ForwardRef$43
} from "./chunk-UECOSIBE.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import "./chunk-OSJEGB6V.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/strapi-plugin-superfields/package.json
var package_default = {
  name: "strapi-plugin-superfields",
  version: "5.8.2",
  description: "Enhance your components with super fields",
  strapi: {
    name: "superfields",
    displayName: "Super Fields",
    description: "Enhance your components with super fields",
    kind: "plugin"
  },
  author: {
    name: "NewProWeb <Abror Abdullaev>",
    email: "abror.abdullaev@newproweb.com"
  },
  repository: {
    type: "git",
    url: "https://github.com/newproweb/strapi-plugin-superfields.git"
  },
  peerDependencies: {
    "@strapi/strapi": "^5.0"
  },
  maintainers: [
    {
      name: "NewProWeb Community",
      email: "abror.abdullaev@newproweb.com"
    }
  ],
  engines: {
    node: ">=16.0.0",
    npm: ">=6.0.0"
  },
  license: "MIT",
  dependencies: {
    "react-colorful": "^5.6.1",
    "react-datepicker": "^8.3.0",
    "react-intl": "^7.1.10"
  }
};

// node_modules/strapi-plugin-superfields/admin/fields/comment/index.js
var comment_default = {
  name: package_default.name,
  pluginId: package_default.strapi.name,
  type: "string",
  icon: ForwardRef$43,
  intlLabel: {
    id: `${package_default.strapi.name}.${package_default.name}.field.label`,
    defaultMessage: "Comment"
  },
  intlDescription: {
    id: `${package_default.strapi.name}.${package_default.name}.field.description`,
    defaultMessage: "Simple comment without any input. User as private field, and only in admin itself"
  },
  options: {
    base: [
      {
        name: "options.comment",
        description: "The comment",
        defaultValue: "",
        type: "textarea",
        intlLabel: {
          id: `${package_default.strapi.name}.${package_default.name}.field.label`,
          defaultMessage: "Comment"
        }
      },
      {
        name: "options.variant",
        intlLabel: {
          id: `${package_default.strapi.name}.${package_default.name}.field.variant.label`,
          defaultMessage: "Color variant"
        },
        type: "select",
        value: "success",
        defaultValue: "success",
        options: [
          {
            key: "success",
            value: "success",
            metadatas: {
              intlLabel: {
                id: `${package_default.strapi.name}.${package_default.name}.field.variant.option.success.label`,
                defaultMessage: "Success"
              }
            }
          },
          {
            key: "warning",
            value: "warning",
            metadatas: {
              intlLabel: {
                id: `${package_default.strapi.name}.${package_default.name}.field.variant.option.warning.label`,
                defaultMessage: "Warning"
              }
            }
          },
          {
            key: "error",
            defaultValue: "error",
            value: "error",
            metadatas: {
              intlLabel: {
                id: `${package_default.strapi.name}.${package_default.name}.field.variant.option.error.label`,
                defaultMessage: "Error"
              }
            }
          }
        ]
      }
    ],
    advanced: [
      {
        sectionTitle: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        items: [
          {
            name: "private",
            type: "checkbox",
            defaultValue: true,
            disabled: true,
            intlLabel: {
              id: `${package_default.strapi.name}.${package_default.name}.field.private.label`,
              defaultMessage: "Private Field"
            },
            intlDescription: {
              id: `${package_default.strapi.name}.${package_default.name}.field.private.description`,
              defaultMessage: "This field is shown up in API response"
            }
          }
        ]
      }
    ]
  },
  components: { Input: async () => import("./comment-E3MEH4HZ.js") }
};

// node_modules/strapi-plugin-superfields/admin/components/icons/RichText.jsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var RichText = (props) => (0, import_jsx_runtime.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1rem",
    height: "1rem",
    fill: "none",
    viewBox: "0 0 32 24",
    ...props,
    children: [
      (0, import_jsx_runtime.jsx)(
        "rect",
        {
          width: "31",
          height: "23",
          x: "0.5",
          y: "0.5",
          fill: "#EAF5FF",
          stroke: "#B8E1FF",
          rx: "2.5"
        }
      ),
      (0, import_jsx_runtime.jsx)(
        "path",
        {
          fill: "#0C75AF",
          fillRule: "evenodd",
          d: "M19.286 9.286v-.857a.397.397 0 0 0-.138-.302A.465.465 0 0 0 18.82 8h-8.357a.465.465 0 0 0-.326.127.397.397 0 0 0-.138.302v.857c0 .116.046.216.138.301.092.085.2.127.326.127h8.357a.465.465 0 0 0 .327-.127.397.397 0 0 0 .138-.301Zm2.785 2.713v.857a.397.397 0 0 1-.137.301.465.465 0 0 1-.327.128H10.464a.465.465 0 0 1-.326-.128.397.397 0 0 1-.138-.301v-.857c0-.116.046-.217.138-.302a.465.465 0 0 1 .326-.127h11.143c.126 0 .235.043.327.127a.397.397 0 0 1 .137.302Zm-1.857 3.574v.857a.397.397 0 0 1-.137.302.465.465 0 0 1-.327.127h-9.286a.465.465 0 0 1-.326-.127.397.397 0 0 1-.138-.302v-.857c0-.116.046-.216.138-.301a.465.465 0 0 1 .326-.127h9.286c.126 0 .235.042.326.127a.397.397 0 0 1 .138.301Z",
          clipRule: "evenodd"
        }
      )
    ]
  }
);
var RichText_default = RichText;

// node_modules/strapi-plugin-superfields/admin/fields/tooltip-text-input/index.js
var tooltip_text_input_default = {
  name: "tooltip-field",
  pluginId: "superfields",
  type: "string",
  icon: RichText_default,
  components: { Input: async () => import("./tooltipTextInput-BT35IZZU.js") },
  intlLabel: {
    id: "superfields.text-input.label",
    defaultMessage: "Tooltip text input"
  },
  intlDescription: {
    id: "superfields.text-input.description",
    defaultMessage: "Text input with tooltip information"
  },
  options: {
    base: [
      {
        sectionTitle: {
          id: "superfields.text-input.section.tooltip",
          defaultMessage: "Tooltip Settings"
        },
        items: [
          {
            name: "options.tooltip-content",
            type: "textarea",
            intlLabel: {
              id: "superfields.text-input.options.tooltip-content.label",
              defaultMessage: "Tooltip message content"
            }
          },
          {
            name: "options.description",
            type: "textarea",
            intlLabel: {
              id: "superfields.text-input.options.description.label",
              defaultMessage: "Field Description"
            }
          }
        ]
      }
    ],
    advanced: [
      {
        sectionTitle: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        items: [
          {
            name: "options.default",
            type: "string",
            intlLabel: {
              id: "superfields.text-input.options.default.label",
              defaultMessage: "Default Value"
            }
          },
          {
            name: "options.regex",
            type: "string",
            intlLabel: {
              id: "superfields.text-input.options.regex.label",
              defaultMessage: "Validation Regex"
            }
          },
          {
            name: "options.maxLength",
            type: "number",
            intlLabel: {
              id: "superfields.text-input.options.maxLength.label",
              defaultMessage: "Maximum Length"
            }
          },
          {
            name: "options.minLength",
            type: "number",
            intlLabel: {
              id: "superfields.text-input.options.minLength.label",
              defaultMessage: "Minimum Length"
            }
          },
          {
            name: "options.private",
            type: "checkbox",
            intlLabel: {
              id: "superfields.text-input.options.private.label",
              defaultMessage: "Private field"
            }
          },
          {
            name: "options.required",
            type: "checkbox",
            intlLabel: {
              id: "superfields.text-input.options.required.label",
              defaultMessage: "Required Field"
            }
          },
          {
            name: "options.unique",
            type: "checkbox",
            intlLabel: {
              id: "superfields.text-input.options.unique.label",
              defaultMessage: "Unique Field"
            }
          }
        ]
      }
    ]
  }
};

// node_modules/strapi-plugin-superfields/admin/components/icons/Number.jsx
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var NumberIcon = (props) => (0, import_jsx_runtime2.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1rem",
    height: "1rem",
    fill: "none",
    viewBox: "0 0 32 24",
    ...props,
    children: [
      (0, import_jsx_runtime2.jsx)(
        "rect",
        {
          width: "31",
          height: "23",
          x: "0.5",
          y: "0.5",
          fill: "#FCECEA",
          stroke: "#F5C0B8",
          rx: "2.5"
        }
      ),
      (0, import_jsx_runtime2.jsx)(
        "path",
        {
          fill: "#D02B20",
          d: "M9.815 16h1.475V8.954H9.82L8 10.22v1.328l1.729-1.201h.087V16Zm3.394 0h5.083v-1.187h-3.106v-.112l1.304-1.216c1.284-1.186 1.7-1.85 1.7-2.651v-.015c0-1.215-1.016-2.046-2.466-2.046-1.543 0-2.598.928-2.598 2.28l.005.02h1.362v-.024c0-.67.474-1.128 1.162-1.128.674 0 1.084.42 1.084 1.02v.015c0 .493-.268.85-1.26 1.812l-2.27 2.24V16Zm9.067.156c1.646 0 2.744-.864 2.744-2.143v-.01c0-.957-.683-1.563-1.733-1.66v-.03c.825-.17 1.47-.742 1.47-1.62v-.01c0-1.123-.977-1.885-2.49-1.885-1.48 0-2.471.82-2.574 2.08l-.005.059h1.358l.005-.044c.058-.586.522-.962 1.216-.962.693 0 1.098.361 1.098.947v.01c0 .571-.478.962-1.22.962h-.787v1.05h.806c.855 0 1.357.37 1.357 1.044v.01c0 .596-.493 1.016-1.245 1.016-.761 0-1.264-.39-1.328-.938l-.005-.053h-1.41l.004.063c.098 1.26 1.148 2.114 2.74 2.114Z"
        }
      )
    ]
  }
);
var Number_default = NumberIcon;

// node_modules/strapi-plugin-superfields/admin/fields/tooltip-number-input/index.js
var tooltip_number_input_default = {
  name: "tooltip-number-field",
  pluginId: "superfields",
  type: "integer",
  icon: Number_default,
  components: { Input: async () => import("./toltipNumberInput-P7BJC4GQ.js") },
  intlLabel: {
    id: "superfields.number-input.label",
    defaultMessage: "Tooltip number input"
  },
  intlDescription: {
    id: "superfields.number-input.description",
    defaultMessage: "Text input with tooltip information"
  },
  options: {
    base: [
      {
        name: "options.tooltip-content",
        description: "The content to show in the tooltip",
        type: "textarea",
        intlLabel: {
          id: "superfields.number-input.options.tooltip-content.label",
          defaultMessage: "Tooltip message content"
        }
      },
      {
        name: "options.description",
        description: "The content to show under the field",
        type: "textarea",
        intlLabel: {
          id: "superfields.number-input.options.description.label",
          defaultMessage: "Field Description"
        }
      },
      {
        name: "options.numberType",
        type: "select",
        value: "integer",
        defaultValue: "integer",
        intlLabel: {
          id: "superfields.number-input.options.numberType.label",
          defaultMessage: "Number format"
        },
        options: [
          {
            key: "integer",
            value: "Integer",
            metadatas: {
              intlLabel: {
                id: `superfields.number-input.options.numberType.option.integer.label`,
                defaultMessage: "Integer"
              }
            }
          },
          {
            key: "biginteger",
            value: "Big Integer",
            metadatas: {
              intlLabel: {
                id: `superfields.number-input.options.numberType.option.biginteger.label`,
                defaultMessage: "Big Integer"
              }
            }
          },
          {
            key: "float",
            value: "Float",
            metadatas: {
              intlLabel: {
                id: `superfields.number-input.options.numberType.option.float.label`,
                defaultMessage: "Float"
              }
            }
          },
          {
            key: "decimal",
            value: "Decimal",
            metadatas: {
              intlLabel: {
                id: `superfields.number-input.options.numberType.option.decimal.label`,
                defaultMessage: "Decimal"
              }
            }
          }
        ],
        description: "Choose the number format for the field"
      }
    ],
    advanced: [
      {
        sectionTitle: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        items: [
          {
            name: "default",
            type: "number",
            intlLabel: {
              id: "superfields.number-input.options.default.label",
              defaultMessage: "Default Value"
            }
          },
          {
            name: "regex",
            type: "text",
            intlLabel: {
              id: "superfields.number-input.options.regex.label",
              defaultMessage: "Validation Regex"
            }
          },
          {
            name: "maxLength",
            type: "number",
            intlLabel: {
              id: "superfields.number-input.options.maxLength.label",
              defaultMessage: "Maximum Length"
            }
          },
          {
            name: "minLength",
            type: "number",
            intlLabel: {
              id: "superfields.number-input.options.minLength.label",
              defaultMessage: "Minimum Length"
            }
          },
          {
            name: "private",
            type: "checkbox",
            intlLabel: {
              id: "superfields.number-input.options.private.label",
              defaultMessage: "Private field"
            }
          },
          {
            name: "required",
            type: "checkbox",
            intlLabel: {
              id: "superfields.number-input.options.required.label",
              defaultMessage: "Required Field"
            }
          },
          {
            name: "unique",
            type: "checkbox",
            intlLabel: {
              id: "superfields.number-input.options.unique.label",
              defaultMessage: "Unique Field"
            }
          }
        ]
      }
    ]
  }
};

// node_modules/strapi-plugin-superfields/admin/components/icons/Boolean.jsx
var import_react3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var BooleanIcon = (props) => (0, import_jsx_runtime3.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1rem",
    height: "1rem",
    fill: "none",
    viewBox: "0 0 32 24",
    ...props,
    children: [
      (0, import_jsx_runtime3.jsx)(
        "rect",
        {
          width: 31,
          height: 23,
          x: 0.5,
          y: 0.5,
          fill: "#EAFBE7",
          stroke: "#C6F0C2",
          rx: 2.5
        }
      ),
      (0, import_jsx_runtime3.jsx)(
        "path",
        {
          fill: "#328048",
          d: "M19.5 7h-7A4.505 4.505 0 0 0 8 11.5c0 2.481 2.019 4.5 4.5 4.5h7c2.481 0 4.5-2.019 4.5-4.5S21.981 7 19.5 7Zm0 8a3.5 3.5 0 1 1 0-7 3.5 3.5 0 0 1 0 7Z"
        }
      )
    ]
  }
);
var Boolean_default = BooleanIcon;

// node_modules/strapi-plugin-superfields/admin/fields/tooltip-boolean-toggle/index.js
var tooltip_boolean_toggle_default = {
  name: "tooltip-boolean-field",
  pluginId: "superfields",
  type: "boolean",
  icon: Boolean_default,
  components: { Input: async () => import("./tooltipBooleanToggle-UN6ABUKF.js") },
  intlLabel: {
    id: "superfields.boolean-input.label",
    defaultMessage: "Tooltip boolean input"
  },
  intlDescription: {
    id: "superfields.boolean-input.description",
    defaultMessage: "Boolean input with tooltip information"
  },
  options: {
    base: [
      {
        name: "options.tooltip-content",
        type: "textarea",
        intlLabel: {
          id: "superfields.boolean-input.options.tooltip-content.label",
          defaultMessage: "Tooltip message content"
        }
      },
      {
        name: "options.description",
        type: "textarea",
        intlLabel: {
          id: "superfields.boolean-input.options.description.label",
          defaultMessage: "Field Description"
        }
      }
    ],
    advanced: [
      {
        sectionTitle: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        items: [
          {
            name: "options.default",
            type: "select",
            value: false,
            defaultValue: false,
            options: [
              {
                key: true,
                value: true,
                metadatas: {
                  intlLabel: {
                    id: `superfields.boolean-input.options.default.option.true.label`,
                    defaultMessage: "true"
                  }
                }
              },
              {
                key: false,
                value: false,
                metadatas: {
                  intlLabel: {
                    id: `superfields.boolean-input.options.default.option.false.label`,
                    defaultMessage: "false"
                  }
                }
              },
              {
                key: "null",
                value: "null",
                metadatas: {
                  intlLabel: {
                    id: `superfields.boolean-input.options.default.option.null.label`,
                    defaultMessage: "null"
                  }
                }
              }
            ],
            intlLabel: {
              id: "superfields.boolean-input.options.default.label",
              defaultMessage: "Default Value"
            }
          },
          {
            name: "options.private",
            type: "checkbox",
            intlLabel: {
              id: "superfields.boolean-input.options.private.label",
              defaultMessage: "Private field"
            }
          },
          {
            name: "options.required",
            type: "checkbox",
            intlLabel: {
              id: "superfields.boolean-input.options.required.label",
              defaultMessage: "Required Field"
            }
          },
          {
            name: "options.unique",
            type: "checkbox",
            intlLabel: {
              id: "superfields.boolean-input.options.unique.label",
              defaultMessage: "Unique Field"
            }
          }
        ]
      }
    ]
  }
};

// node_modules/strapi-plugin-superfields/admin/components/icons/EnumurationIcon.jsx
var import_react4 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var EnumurationIcon = (props) => (0, import_jsx_runtime4.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1rem",
    height: "1rem",
    fill: "none",
    viewBox: "0 0 32 24",
    ...props,
    children: [
      (0, import_jsx_runtime4.jsx)(
        "rect",
        {
          width: 31,
          height: 23,
          x: 0.5,
          y: 0.5,
          fill: "#F6ECFC",
          stroke: "#E0C1F4",
          rx: 2.5
        }
      ),
      (0, import_jsx_runtime4.jsx)(
        "path",
        {
          fill: "#9736E8",
          fillRule: "evenodd",
          d: "M10.167 7a1.167 1.167 0 1 0 0 2.333 1.167 1.167 0 0 0 0-2.333Zm0 4.03a1.167 1.167 0 1 0 0 2.334 1.167 1.167 0 0 0 0-2.334ZM9 16.23a1.167 1.167 0 1 1 2.333 0 1.167 1.167 0 0 1-2.333 0Zm4.005-9.02a.4.4 0 0 0-.4.4v1.11c0 .22.18.4.4.4H22.6a.4.4 0 0 0 .4-.4V7.61a.4.4 0 0 0-.4-.4h-9.594Zm-.399 4.432a.4.4 0 0 1 .4-.4H22.6c.22 0 .4.18.4.4v1.11a.4.4 0 0 1-.4.4h-9.594a.4.4 0 0 1-.4-.4v-1.11Zm.4 3.63a.4.4 0 0 0-.4.4v1.11c0 .22.18.4.4.4H22.6a.4.4 0 0 0 .4-.4v-1.11a.4.4 0 0 0-.4-.4h-9.594Z",
          clipRule: "evenodd"
        }
      )
    ]
  }
);
var EnumurationIcon_default = EnumurationIcon;

// node_modules/strapi-plugin-superfields/admin/fields/tooltip-enum-select/index.js
var tooltip_enum_select_default = {
  name: "tooltip-enum-field",
  pluginId: "superfields",
  type: "string",
  icon: EnumurationIcon_default,
  intlLabel: {
    id: "superfields.tooltip-enum-field.label",
    defaultMessage: "Tooltip Enum field"
  },
  intlDescription: {
    id: "superfields.tooltip-enum-field.description",
    defaultMessage: "Enum field with tooltip support"
  },
  components: {
    Input: async () => import("./enumerationSelect-VFLQ5TPP.js")
  },
  options: {
    base: [
      {
        name: "options.tooltip-content",
        description: "The content to show in the tooltip",
        type: "textarea",
        intlLabel: {
          id: "superfields.tooltip-enum-field.options.tooltip-content.label",
          defaultMessage: "Tooltip message content"
        }
      },
      {
        name: "options.enumValues",
        type: "textarea",
        intlLabel: {
          id: "superfields.tooltip-enum-field.enumValues.label",
          defaultMessage: "Enum Values (one per line)"
        },
        description: "Enter each enum value on a separate line. For example: Draft [line break] Published [line break] Archived"
      },
      {
        name: "options.description",
        type: "textarea",
        intlLabel: {
          id: "superfields.tooltip-enum-field.description.label",
          defaultMessage: "Field Description"
        }
      }
    ],
    advanced: [
      {
        sectionTitle: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        items: [
          {
            name: "options.default",
            type: "string",
            intlLabel: {
              id: "superfields.tooltip-enum-field.default.label",
              defaultMessage: "Default Value"
            }
          },
          {
            name: "options.private",
            type: "checkbox",
            intlLabel: {
              id: "superfields.tooltip-enum-field.private.label",
              defaultMessage: "Private Field"
            }
          },
          {
            name: "options.required",
            type: "checkbox",
            intlLabel: {
              id: "superfields.tooltip-enum-field.required.label",
              defaultMessage: "Required Field"
            }
          },
          {
            name: "options.unique",
            type: "checkbox",
            intlLabel: {
              id: "superfields.tooltip-enum-field.unique.label",
              defaultMessage: "Unique Field"
            }
          }
        ]
      }
    ],
    validator: (args) => {
      return {
        enumValues: create2().required({
          id: "superfields.tooltip-enum-field.enumValues.error",
          defaultMessage: "Enum values are required"
        }).test({
          name: "unique",
          message: {
            id: "superfields.tooltip-enum-field.enumValues.unique",
            defaultMessage: "Enum values must be unique"
          },
          test: (v) => {
            if (!v) return true;
            const items = v.split(/\r?\n/).map((l) => l.trim()).filter(Boolean);
            return new Set(items).size === items.length;
          }
        }),
        default: create2().test({
          name: "isValidEnum",
          message: {
            id: "superfields.tooltip-enum-field.default.invalid",
            defaultMessage: "Default value must be one of the enum values"
          },
          test: function(defaultValue) {
            if (!defaultValue) return true;
            const enumValues = this.parent.enumValues;
            if (!enumValues) return true;
            const items = enumValues.split(/\r?\n/).map((l) => l.trim()).filter(Boolean);
            return items.includes(defaultValue);
          }
        })
      };
    }
  }
};

// node_modules/strapi-plugin-superfields/admin/fields/multi-select/index.js
var multi_select_default = {
  name: "multi-select",
  pluginId: "superfields",
  type: "string",
  intlLabel: {
    id: "superfields.multi-select.label",
    defaultMessage: "Multiple Select"
  },
  intlDescription: {
    id: "superfields.multi-select.description",
    defaultMessage: "Select multiple options"
  },
  icon: ForwardRef$2t,
  components: {
    Input: async () => import("./multiSelectField-5H32J2SQ.js")
  },
  options: {
    base: [
      // 1) Standard enum textarea, shown when selectType ≠ 'nested'
      {
        name: "options.enumValues",
        type: "textarea-enum",
        intlLabel: {
          id: "superfields.multi-select.options.enumValues.label",
          defaultMessage: "Options (one per line)"
        },
        placeholder: {
          id: "superfields.multi-select.options.enumValues.placeholder",
          defaultMessage: "Ex:\nOption 1\nOption 2\nOption 3:option-3"
        },
        condition: {
          // Only show when selectType is not nested
          field: "options.selectType",
          operator: "!=",
          value: "nested"
        }
      },
      // 2) Select type dropdown
      {
        name: "options.selectType",
        type: "select",
        defaultValue: "multi",
        intlLabel: {
          id: "superfields.multi-select.selectType.label",
          defaultMessage: "Select Type"
        },
        options: [
          { value: "single", metadatas: { intlLabel: { id: "...option.single.label", defaultMessage: "Single Select" } } },
          { value: "multi", metadatas: { intlLabel: { id: "...option.multi.label", defaultMessage: "Multi Select" } } },
          { value: "combobox", metadatas: { intlLabel: { id: "...option.combobox.label", defaultMessage: "Combobox" } } },
          { value: "nested", metadatas: { intlLabel: { id: "...option.nested.label", defaultMessage: "Nested Multi Select" } } }
        ]
      },
      // 3) Nested JSON editor, shown only when selectType === 'nested'
      {
        name: "options.nestedOptions",
        type: "json",
        defaultValue: JSON.stringify([
          {
            label: "Group 1",
            value: "group1",
            children: [
              { label: "Option A", value: "optA" },
              { label: "Option B", value: "optB" }
            ]
          },
          { label: "Group 2", value: "group2" }
        ], null, 2),
        intlLabel: {
          id: "superfields.multi-select.options.nestedOptions.label",
          defaultMessage: "Nested Options (JSON)"
        },
        description: {
          id: "superfields.multi-select.options.nestedOptions.description",
          defaultMessage: "Enter JSON array of nodes with optional `children` arrays.\nE.g.: [{label:'Group',value:'grp',children:[…]}]"
        },
        condition: {
          // Only show when selectType is nested
          field: "options.selectType",
          operator: "==",
          value: "nested"
        }
      },
      // 4) Tooltip and description always available
      {
        name: "options.tooltip-content",
        type: "string",
        intlLabel: {
          id: "superfields.multi-select.tooltipContent.label",
          defaultMessage: "Tooltip Content"
        }
      },
      {
        name: "options.description",
        type: "textarea",
        intlLabel: {
          id: "superfields.multi-select.description.label",
          defaultMessage: "Description"
        }
      }
    ],
    advanced: [
      {
        sectionTitle: { id: "global.settings", defaultMessage: "Settings" },
        items: [
          { name: "required", type: "checkbox", intlLabel: { id: "...settings.required", defaultMessage: "Required field" } },
          { name: "private", type: "checkbox", intlLabel: { id: "...settings.private", defaultMessage: "Private field" } },
          { name: "min", type: "number", intlLabel: { id: "...settings.min", defaultMessage: "Minimum items" } },
          { name: "max", type: "number", intlLabel: { id: "...settings.max", defaultMessage: "Maximum items" } }
        ]
      }
    ]
  }
};

// node_modules/strapi-plugin-superfields/admin/fields/date-time-picker/index.js
var date_time_picker_default = {
  name: "tooltip-datetime-field",
  pluginId: "superfields",
  type: "date",
  icon: calendarIcon_default,
  components: { Input: async () => import("./dateTimePicker-PRNJGWPP.js") },
  intlLabel: {
    id: "superfields.datetime-input.label",
    defaultMessage: "Tooltip Date Time"
  },
  intlDescription: {
    id: "superfields.datetime-input.description",
    defaultMessage: "Text input with tooltip information"
  },
  options: {
    base: [
      {
        name: "options.tooltip-content",
        description: "The content to show in the tooltip",
        type: "textarea",
        intlLabel: {
          id: "superfields.datetime-input.options.tooltip-content.label",
          defaultMessage: "Tooltip message content"
        }
      },
      {
        name: "options.description",
        description: "The content to show under the field",
        type: "textarea",
        intlLabel: {
          id: "superfields.datetime-input.options.description.label",
          defaultMessage: "Field Description"
        }
      }
    ],
    advanced: [
      {
        sectionTitle: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        items: [
          {
            name: "default",
            type: "datetime",
            intlLabel: {
              id: "superfields.datetime-input.options.default.label",
              defaultMessage: "Default Value"
            }
          },
          {
            name: "private",
            type: "checkbox",
            intlLabel: {
              id: "superfields.datetime-input.options.private.label",
              defaultMessage: "Private field"
            }
          },
          {
            name: "required",
            type: "checkbox",
            intlLabel: {
              id: "superfields.datetime-input.options.required.label",
              defaultMessage: "Required Field"
            }
          },
          {
            name: "unique",
            type: "checkbox",
            intlLabel: {
              id: "superfields.datetime-input.options.unique.label",
              defaultMessage: "Unique Field"
            }
          }
        ]
      }
    ]
  }
};

// node_modules/strapi-plugin-superfields/admin/fields/color-picker/index.js
import DiscourseIcon from "C:/Users/kshar/flmintdealsexpress/FLMintDeal/backend/node_modules/strapi-plugin-superfields/admin/components/icons/Discourse.jsx";
var color_picker_default = {
  name: "tooltip-color-picker",
  pluginId: "superfields",
  type: "string",
  icon: DiscourseIcon,
  intlLabel: {
    id: "superfields.tooltip-color-picker.label",
    defaultMessage: "Tooltip Color Picker"
  },
  intlDescription: {
    id: "superfields.tooltip-color-picker.description",
    defaultMessage: "Color picker with tooltip"
  },
  components: {
    Input: async () => import("C:/Users/kshar/flmintdealsexpress/FLMintDeal/backend/node_modules/strapi-plugin-superfields/admin/components/colorPicker.jsx")
  },
  options: {
    base: [
      {
        name: "options.tooltip-content",
        description: "The content to show in the tooltip",
        type: "textarea",
        intlLabel: {
          id: "superfields.tooltip-color-picker.options.tooltip-content.label",
          defaultMessage: "Tooltip message content"
        }
      },
      {
        name: "options.colors",
        type: "json",
        intlLabel: {
          id: "superfields.tooltip-color-picker.colors.label",
          defaultMessage: "Add Colors like ['color1', 'color2', 'color3', ...]"
        },
        description: "Add colors like ['color1', 'color2', 'color3', ...]",
        placehoolder: 'example:  ["#a9cce3", "#52be80", "#52be80", "#34495e","#0e6655" ,"#cb4335", "#138d75", "#f0f3f4", "#922b21", "#6c3483"]'
      },
      {
        name: "options.color-palette",
        type: "checkbox",
        intlLabel: {
          id: "superfields.tooltip-color-picker.color-palette.label",
          defaultMessage: "Use color palette"
        }
      }
    ],
    advanced: [
      {
        sectionTitle: {
          id: "global.settings",
          defaultMessage: "Settings"
        },
        items: [
          {
            name: "options.default",
            type: "string",
            intlLabel: {
              id: "superfields.tooltip-color-picker.default.label",
              defaultMessage: "Default Value"
            }
          },
          {
            name: "options.private",
            type: "checkbox",
            intlLabel: {
              id: "superfields.tooltip-color-picker.private.label",
              defaultMessage: "Private Field"
            }
          },
          {
            name: "options.required",
            type: "checkbox",
            intlLabel: {
              id: "superfields.tooltip-color-picker.required.label",
              defaultMessage: "Required Field"
            }
          },
          {
            name: "options.unique",
            type: "checkbox",
            intlLabel: {
              id: "superfields.tooltip-color-picker.unique.label",
              defaultMessage: "Unique Field"
            }
          }
        ]
      }
    ],
    validator: (args) => {
      return {
        colors: create3().of(create2().matches(/^#([0-9A-F]{3}){1,2}$/i, "Must be a valid hex color")).min(1, {
          id: "superfields.tooltip-color-picker.colors.required",
          defaultMessage: "At least one color must be provided"
        }).required({
          id: "superfields.tooltip-color-picker.colors.required",
          defaultMessage: "Colors are required"
        }),
        "color-palette": create(),
        "tooltip-content": create2().nullable(),
        default: create2().test({
          name: "isValidDefaultColor",
          message: {
            id: "superfields.tooltip-color-picker.default.invalid",
            defaultMessage: "Default color must be one of the provided colors"
          },
          test: function(defaultColor) {
            if (!defaultColor) return true;
            const colors = this.parent.colors;
            return Array.isArray(colors) && colors.includes(defaultColor);
          }
        })
      };
    }
  }
};

// node_modules/strapi-plugin-superfields/admin/fields/index.js
var fields_default = [comment_default, tooltip_text_input_default, tooltip_number_input_default, tooltip_boolean_toggle_default, tooltip_enum_select_default, multi_select_default, date_time_picker_default, color_picker_default];

// node_modules/strapi-plugin-superfields/admin/helpers/extend/btn-style.js
var strapiPrimaryButtonStyle = `
  background-color: #4945ff; /* buttonPrimary600 */
  color: white;
  font-weight: 600;
  border: none;
  border-radius: 4px;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.33;
  cursor: pointer;
  transition: background-color 0.2s, box-shadow 0.2s;
  box-shadow: 0px 1px 4px rgba(33, 33, 52, 0.1);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  margibn:5.5px 0px 
`;

// node_modules/strapi-plugin-superfields/admin/helpers/extend/inject-color-autofill.js
var injectColorPickerButton = () => {
  const interval = setInterval(() => {
    const modal = document.querySelector('[role="dialog"]');
    if (!modal) return;
    const isColorPickerField = modal.querySelector("h2").innerText.includes("Add new Tooltip Color Picker field");
    if (!isColorPickerField) return;
    const firstInnerDiv = modal.querySelector("header > div");
    if (!firstInnerDiv) return;
    if (firstInnerDiv.querySelector(".color-autofill-btn")) return;
    const btn = document.createElement("button");
    btn.innerText = "Fill saved colors";
    btn.className = "color-autofill-btn";
    btn.style.cssText = strapiPrimaryButtonStyle;
    btn.addEventListener("mouseenter", () => {
      btn.style.backgroundColor = "#7b79ff";
    });
    btn.addEventListener("mouseleave", () => {
      btn.style.backgroundColor = "#4945ff";
    });
    btn.addEventListener("focus", () => {
      btn.style.boxShadow = "0px 0px 0px 2px #4945ff";
    });
    btn.addEventListener("blur", () => {
      btn.style.boxShadow = "0px 1px 4px rgba(33, 33, 52, 0.1)";
    });
    btn.onclick = async () => {
      try {
        const res = await fetch("/superfields/colors");
        const data = await res.json();
        if (data == null ? void 0 : data.length) {
          const coreectedData = data.map((color) => color.hex);
          console.log("coreectedData", coreectedData);
          const jsonStr = JSON.stringify(coreectedData, null, 2);
          const textarea = modal.querySelector(".cm-editor textarea");
          if (textarea) {
            textarea.value = jsonStr;
            textarea.dispatchEvent(new Event("input", { bubbles: true }));
          }
          const codeMirrorDiv = modal.querySelector(".cm-content");
          if (codeMirrorDiv) {
            const lines = jsonStr.split("\n").map((line) => `<div class="cm-line">${line}</div>`).join("");
            codeMirrorDiv.innerHTML = lines;
          }
        }
      } catch (err) {
        console.error("Error fetching colors:", err);
      }
    };
    firstInnerDiv.insertBefore(btn, firstInnerDiv.firstChild.nextSibling.nextSibling);
    clearInterval(interval);
  }, 1e3);
};

// node_modules/strapi-plugin-superfields/admin/index.js
var admin_default = {
  register(app) {
    for (const field of fields_default) {
      app.customFields.register(field);
    }
  },
  bootstrap(app) {
    injectColorPickerButton();
  }
};

// node_modules/strapi-plugin-superfields/strapi-admin.js
var strapi_admin_default = admin_default;
export {
  strapi_admin_default as default
};
//# sourceMappingURL=strapi-plugin-superfields_strapi-admin.js.map
