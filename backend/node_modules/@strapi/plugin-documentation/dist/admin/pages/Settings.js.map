{"version":3,"file":"Settings.js","sources":["../../../admin/src/pages/Settings.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport { useAPIErrorHandler, Page, useNotification } from '@strapi/strapi/admin';\nimport { FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport { SettingsForm } from '../components/SettingsForm';\nimport { useGetInfoQuery, useUpdateSettingsMutation } from '../services/api';\nimport { getTrad, isBaseQueryError } from '../utils';\n\nimport type { SettingsInput } from '../types';\n\nconst SettingsPage = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const { data, isError, isLoading, isFetching } = useGetInfoQuery();\n  const [updateSettings] = useUpdateSettingsMutation();\n\n  const onUpdateSettings = async (body: SettingsInput, formik: FormikHelpers<SettingsInput>) => {\n    return updateSettings({ body })\n      .unwrap()\n      .then(() => {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTrad('notification.update.success'),\n            defaultMessage: 'Successfully updated settings',\n          }),\n        });\n      })\n      .catch((err) => {\n        if (isBaseQueryError(err) && err.name === 'ValidationError') {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(err),\n          });\n        }\n      });\n  };\n\n  if (isLoading || isFetching) {\n    return <Page.Loading />;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Main>\n      <SettingsForm data={data} onSubmit={onUpdateSettings} />\n    </Main>\n  );\n};\n\nexport { SettingsPage };\n"],"names":["SettingsPage","toggleNotification","useNotification","formatMessage","useIntl","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","data","isError","isLoading","isFetching","useGetInfoQuery","updateSettings","useUpdateSettingsMutation","onUpdateSettings","body","formik","unwrap","then","type","message","id","getTrad","defaultMessage","catch","err","isBaseQueryError","name","_jsx","Page","Loading","Error","Main","SettingsForm","onSubmit"],"mappings":";;;;;;;;;;;;AAaA,MAAMA,YAAe,GAAA,IAAA;IACnB,MAAM,EAAEC,kBAAkB,EAAE,GAAGC,qBAAAA,EAAAA;IAC/B,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;AAC1B,IAAA,MAAM,EACJC,uBAAyBC,EAAAA,cAAc,EACvCC,+BAAiCC,EAAAA,sBAAsB,EACxD,GAAGC,wBAAAA,EAAAA;IACJ,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,UAAU,EAAE,GAAGC,mBAAAA,EAAAA;IACjD,MAAM,CAACC,eAAe,GAAGC,6BAAAA,EAAAA;IAEzB,MAAMC,gBAAAA,GAAmB,OAAOC,IAAqBC,EAAAA,MAAAA,GAAAA;AACnD,QAAA,OAAOJ,cAAe,CAAA;AAAEG,YAAAA;SACrBE,CAAAA,CAAAA,MAAM,EACNC,CAAAA,IAAI,CAAC,IAAA;YACJpB,kBAAmB,CAAA;gBACjBqB,IAAM,EAAA,SAAA;AACNC,gBAAAA,OAAAA,EAASpB,aAAc,CAAA;AACrBqB,oBAAAA,EAAAA,EAAIC,eAAQ,CAAA,6BAAA,CAAA;oBACZC,cAAgB,EAAA;AAClB,iBAAA;AACF,aAAA,CAAA;SAEDC,CAAAA,CAAAA,KAAK,CAAC,CAACC,GAAAA,GAAAA;AACN,YAAA,IAAIC,0BAAiBD,CAAAA,GAAAA,CAAAA,IAAQA,GAAIE,CAAAA,IAAI,KAAK,iBAAmB,EAAA;gBAC3D7B,kBAAmB,CAAA;oBACjBqB,IAAM,EAAA,QAAA;AACNC,oBAAAA,OAAAA,EAASjB,cAAesB,CAAAA,GAAAA;AAC1B,iBAAA,CAAA;AACF;AACF,SAAA,CAAA;AACJ,KAAA;AAEA,IAAA,IAAIhB,aAAaC,UAAY,EAAA;QAC3B,qBAAOkB,cAAA,CAACC,WAAKC,OAAO,EAAA,EAAA,CAAA;AACtB;AAEA,IAAA,IAAItB,OAAS,EAAA;QACX,qBAAOoB,cAAA,CAACC,WAAKE,KAAK,EAAA,EAAA,CAAA;AACpB;AAEA,IAAA,qBACEH,cAACI,CAAAA,iBAAAA,EAAAA;AACC,QAAA,QAAA,gBAAAJ,cAACK,CAAAA,yBAAAA,EAAAA;YAAa1B,IAAMA,EAAAA,IAAAA;YAAM2B,QAAUpB,EAAAA;;;AAG1C;;;;"}