{"version":3,"file":"documentation.js","sources":["../../../server/src/controllers/documentation.ts"],"sourcesContent":["import path from 'path';\nimport bcrypt from 'bcryptjs';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport koaStatic from 'koa-static';\nimport { yup, validateYupSchema } from '@strapi/utils';\n\nimport type Koa from 'koa';\nimport type {} from 'koa-body';\n\nimport { getService } from '../utils';\nimport type { Config } from '../types';\n\nconst validation = {\n  validateSettings: validateYupSchema(\n    yup.object().shape({\n      restrictedAccess: yup.boolean(),\n      password: yup\n        .string()\n        .min(8)\n        .matches(/[a-z]/, '${path} must contain at least one lowercase character')\n        .matches(/[A-Z]/, '${path} must contain at least one uppercase character')\n        .matches(/\\d/, '${path} must contain at least one number')\n        .when('restrictedAccess', (value, initSchema) => {\n          return value ? initSchema.required('password is required') : initSchema;\n        }),\n    })\n  ),\n};\n\nexport default {\n  async getInfos(ctx: Koa.Context) {\n    try {\n      const docService = getService('documentation');\n      const docVersions = docService.getDocumentationVersions();\n      const documentationAccess = await docService.getDocumentationAccess();\n\n      ctx.send({\n        docVersions,\n        currentVersion: docService.getDocumentationVersion(),\n        prefix: '/documentation',\n        documentationAccess,\n      });\n    } catch (err) {\n      strapi.log.error(err);\n      ctx.badRequest();\n    }\n  },\n\n  async index(ctx: Koa.Context, next: Koa.Next) {\n    try {\n      /**\n       * We don't expose the specs using koa-static or something else due to security reasons.\n       * That's why, we need to read the file localy and send the specs through it when we serve the Swagger UI.\n       */\n      const { major, minor, patch } = ctx.params;\n      const version =\n        major && minor && patch\n          ? `${major}.${minor}.${patch}`\n          : getService('documentation').getDocumentationVersion();\n\n      const openAPISpecsPath = path.join(\n        strapi.dirs.app.extensions,\n        'documentation',\n        'documentation',\n        version,\n        'full_documentation.json'\n      );\n\n      try {\n        const documentation = fs.readFileSync(openAPISpecsPath, 'utf8');\n\n        const layout = (await import('../public/index.html')).default;\n\n        const filledLayout = _.template(layout)({\n          backendUrl: strapi.config.server.url,\n          spec: JSON.stringify(JSON.parse(documentation)),\n        });\n\n        try {\n          const layoutPath = path.resolve(\n            strapi.dirs.app.extensions,\n            'documentation',\n            'public',\n            'index.html'\n          );\n          await fs.ensureFile(layoutPath);\n          await fs.writeFile(layoutPath, filledLayout);\n\n          // Serve the file.\n          ctx.url = path.basename(`${ctx.url}/index.html`);\n\n          try {\n            const staticFolder = path.resolve(\n              strapi.dirs.app.extensions,\n              'documentation',\n              'public'\n            );\n            return koaStatic(staticFolder)(ctx, next);\n          } catch (e) {\n            strapi.log.error(e);\n          }\n        } catch (e) {\n          strapi.log.error(e);\n        }\n      } catch (e) {\n        strapi.log.error(e);\n      }\n    } catch (e) {\n      strapi.log.error(e);\n    }\n  },\n\n  async loginView(ctx: Koa.Context, next: Koa.Next) {\n    // lazy require cheerio\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const cheerio = require('cheerio');\n\n    const { error } = ctx.query;\n\n    try {\n      const layout = (await import('../public/login.html')).default;\n\n      const filledLayout = _.template(layout.toString())({\n        actionUrl: `${strapi.config.server.url}/documentation/login`,\n      });\n\n      const $ = cheerio.load(filledLayout);\n\n      $('.error').text(_.isEmpty(error) ? '' : 'Wrong password...');\n\n      try {\n        const layoutPath = path.resolve(\n          strapi.dirs.app.extensions,\n          'documentation',\n          'public',\n          'login.html'\n        );\n        await fs.ensureFile(layoutPath);\n        await fs.writeFile(layoutPath, $.html());\n\n        ctx.url = path.basename(`${ctx.url}/login.html`);\n\n        try {\n          const staticFolder = path.resolve(strapi.dirs.app.extensions, 'documentation', 'public');\n          return koaStatic(staticFolder)(ctx, next);\n        } catch (e) {\n          strapi.log.error(e);\n        }\n      } catch (e) {\n        strapi.log.error(e);\n      }\n    } catch (e) {\n      strapi.log.error(e);\n    }\n  },\n\n  async login(ctx: Koa.Context) {\n    const {\n      body: { password },\n    } = ctx.request;\n\n    const { password: hash } = (await strapi\n      .store({ type: 'plugin', name: 'documentation', key: 'config' })\n      .get()) as { password: string };\n\n    const isValid = await bcrypt.compare(password, hash);\n\n    let querystring = '?error=password';\n\n    if (isValid && ctx.session) {\n      ctx.session.documentation = {\n        logged: true,\n      };\n\n      querystring = '';\n    }\n\n    ctx.redirect(`${strapi.config.server.url}/documentation${querystring}`);\n  },\n\n  async regenerateDoc(ctx: Koa.Context) {\n    const { version } = ctx.request.body;\n\n    const service = getService('documentation');\n\n    const documentationVersions = service.getDocumentationVersions().map((el) => el.version);\n\n    if (_.isEmpty(version)) {\n      return ctx.badRequest('Please provide a version.');\n    }\n\n    if (!documentationVersions.includes(version)) {\n      return ctx.badRequest('The version you are trying to generate does not exist.');\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n      await service.generateFullDoc(version);\n      ctx.send({ ok: true });\n    } finally {\n      strapi.reload.isWatching = true;\n    }\n  },\n\n  async deleteDoc(ctx: Koa.Context) {\n    const { version } = ctx.params;\n\n    const service = getService('documentation');\n\n    const documentationVersions = service.getDocumentationVersions().map((el) => el.version);\n\n    if (_.isEmpty(version)) {\n      return ctx.badRequest('Please provide a version.');\n    }\n\n    if (!documentationVersions.includes(version)) {\n      return ctx.badRequest('The version you are trying to delete does not exist.');\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n      await service.deleteDocumentation(version);\n      ctx.send({ ok: true });\n    } finally {\n      strapi.reload.isWatching = true;\n    }\n  },\n\n  async updateSettings(ctx: Koa.Context) {\n    const pluginStore = strapi.store({ type: 'plugin', name: 'documentation' });\n\n    const data = await validation.validateSettings(ctx.request.body);\n\n    const config: Config = {\n      restrictedAccess: Boolean(data.restrictedAccess),\n    };\n\n    if (data.password) {\n      config.password = await bcrypt.hash(data.password, 10);\n    }\n\n    await pluginStore.set({ key: 'config', value: config });\n\n    return ctx.send({ ok: true });\n  },\n};\n"],"names":["validation","validateSettings","validateYupSchema","yup","object","shape","restrictedAccess","boolean","password","string","min","matches","when","value","initSchema","required","getInfos","ctx","docService","getService","docVersions","getDocumentationVersions","documentationAccess","getDocumentationAccess","send","currentVersion","getDocumentationVersion","prefix","err","strapi","log","error","badRequest","index","next","major","minor","patch","params","version","openAPISpecsPath","path","join","dirs","app","extensions","documentation","fs","readFileSync","layout","default","filledLayout","_","template","backendUrl","config","server","url","spec","JSON","stringify","parse","layoutPath","resolve","ensureFile","writeFile","basename","staticFolder","koaStatic","e","loginView","cheerio","require","query","toString","actionUrl","$","load","text","isEmpty","html","login","body","request","hash","store","type","name","key","get","isValid","bcrypt","compare","querystring","session","logged","redirect","regenerateDoc","service","documentationVersions","map","el","includes","reload","isWatching","generateFullDoc","ok","deleteDoc","deleteDocumentation","updateSettings","pluginStore","data","Boolean","set"],"mappings":"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"}