{"version":3,"file":"build-api-endpoint-path.mjs","sources":["../../../../server/src/services/helpers/build-api-endpoint-path.ts"],"sourcesContent":["import _ from 'lodash';\nimport * as pathToRegexp from 'path-to-regexp';\n\nimport type { Core } from '@strapi/types';\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport pascalCase from './utils/pascal-case';\nimport queryParams from './utils/query-params';\nimport loopContentTypeNames from './utils/loop-content-type-names';\nimport getApiResponses from './utils/get-api-responses';\nimport { hasFindMethod } from './utils/routes';\n\nimport type { Api, ApiInfo } from '../../types';\n\n/**\n * @description Parses a route with ':variable'\n *\n * @param {string} routePath - The route's path property\n * @returns {string}\n */\nconst parsePathWithVariables = (routePath: string): string => {\n  const { tokens } = pathToRegexp.parse(routePath);\n\n  return tokens\n    .map((token) => {\n      switch (token.type) {\n        case 'text':\n          return token.value;\n        case 'param':\n          return `{${token.name}}`;\n        case 'wildcard':\n          return `{${token.name}}`;\n        case 'group':\n          // Handle group tokens by mapping them within the same function context\n          return `(${parsePathWithVariables(token.tokens.map((t) => t satisfies pathToRegexp.Token).join(''))})`;\n        default:\n          throw new Error(`Unknown token type: ${(token as any).type}`);\n      }\n    })\n    .join('');\n};\n\n/**\n * @description Builds the required object for a path parameter\n *\n * @param {string} routePath - The route's path property\n *\n * @returns {object } Swagger path params object\n */\nconst getPathParams = (routePath: string): OpenAPIV3.ParameterObject[] => {\n  const { tokens } = pathToRegexp.parse(routePath);\n\n  return tokens.reduce((acc, param) => {\n    // Skip non-parameter tokens\n    if (param.type !== 'param') {\n      return acc;\n    }\n\n    acc.push({\n      name: `${param.name}`,\n      in: 'path',\n      description: '',\n      deprecated: false,\n      required: true,\n      schema: { type: 'number' },\n    });\n\n    return acc;\n  }, [] as OpenAPIV3.ParameterObject[]);\n};\n\nconst getPathWithPrefix = (prefix: string | undefined, route: Core.Route) => {\n  // When the prefix is set on the routes and\n  // the current route is not trying to remove it\n  if (prefix && !_.has(route.config, 'prefix')) {\n    // Add the prefix to the path\n    return prefix.concat(route.path);\n  }\n\n  // Otherwise just return path\n  return route.path;\n};\n\n/**\n * @description Gets all paths based on routes\n *\n * @param {object} apiInfo\n * @property {object} apiInfo.routeInfo - The api routes object\n * @property {string} apiInfo.uniqueName - Content type name | Api name + Content type name\n * @property {object} apiInfo.contentTypeInfo - The info object found on content type schemas\n *\n * @returns {object}\n */\nconst getPaths = ({ routeInfo, uniqueName, contentTypeInfo, kind }: ApiInfo) => {\n  // Get the routes for the current content type\n  const contentTypeRoutes = routeInfo.routes.filter((route) => {\n    return (\n      route.path.includes(contentTypeInfo.pluralName) ||\n      route.path.includes(contentTypeInfo.singularName)\n    );\n  });\n\n  const paths = contentTypeRoutes.reduce((acc: any, route: Core.Route) => {\n    // TODO: Find a more reliable way to determine list of entities vs a single entity\n    const isListOfEntities = hasFindMethod(route.handler);\n    const methodVerb = route.method.toLowerCase();\n    const hasPathParams = route.path.includes('/:');\n    const pathWithPrefix = getPathWithPrefix(routeInfo.prefix, route);\n    const routePath = hasPathParams ? parsePathWithVariables(pathWithPrefix) : pathWithPrefix;\n\n    const responses = getApiResponses({\n      uniqueName,\n      route,\n      isListOfEntities: kind !== 'singleType' && isListOfEntities,\n    });\n\n    const swaggerConfig: OpenAPIV3.OperationObject = {\n      responses,\n      tags: [_.upperFirst(uniqueName)],\n      parameters: [],\n      operationId: `${methodVerb}${routePath}`,\n    };\n\n    if (isListOfEntities) {\n      swaggerConfig.parameters?.push(...queryParams);\n    }\n\n    if (hasPathParams) {\n      const pathParams = getPathParams(route.path);\n      swaggerConfig.parameters?.push(...pathParams);\n    }\n\n    if (['post', 'put'].includes(methodVerb)) {\n      const refName = 'Request';\n      const requestBody = {\n        required: true,\n        content: {\n          'application/json': {\n            schema: {\n              $ref: `#/components/schemas/${pascalCase(uniqueName)}${refName}`,\n            },\n          },\n        },\n      };\n\n      swaggerConfig.requestBody = requestBody;\n    }\n\n    _.set(acc, `${routePath}.${methodVerb}`, swaggerConfig);\n\n    return acc;\n  }, {});\n\n  return paths;\n};\n\n/**\n * @description - Builds the Swagger paths object for each api\n */\nconst buildApiEndpointPath = (api: Api) => {\n  // A reusable loop for building paths and component schemas\n  // Uses the api param to build a new set of params for each content type\n  // Passes these new params to the function provided\n  return loopContentTypeNames(api, getPaths);\n};\n\nexport default buildApiEndpointPath;\n"],"names":["parsePathWithVariables","routePath","tokens","pathToRegexp","parse","map","token","type","value","name","t","join","Error","getPathParams","reduce","acc","param","push","in","description","deprecated","required","schema","getPathWithPrefix","prefix","route","_","has","config","concat","path","getPaths","routeInfo","uniqueName","contentTypeInfo","kind","contentTypeRoutes","routes","filter","includes","pluralName","singularName","paths","isListOfEntities","hasFindMethod","handler","methodVerb","method","toLowerCase","hasPathParams","pathWithPrefix","responses","getApiResponses","swaggerConfig","tags","upperFirst","parameters","operationId","queryParams","pathParams","refName","requestBody","content","$ref","pascalCase","set","buildApiEndpointPath","api","loopContentTypeNames"],"mappings":"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"}