{"version":3,"file":"build-component-schema.js","sources":["../../../../server/src/services/helpers/build-component-schema.ts"],"sourcesContent":["import _ from 'lodash';\n\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { Core, Struct } from '@strapi/types';\n\nimport cleanSchemaAttributes from './utils/clean-schema-attributes';\nimport loopContentTypeNames from './utils/loop-content-type-names';\nimport pascalCase from './utils/pascal-case';\nimport { hasFindMethod } from './utils/routes';\n\nimport type { Api, ApiInfo } from '../../types';\n\nconst getRequiredAttributes = (allAttributes: Struct.SchemaAttributes) => {\n  const requiredAttributes: string[] = [];\n\n  for (const key in allAttributes) {\n    if (allAttributes[key].required) {\n      requiredAttributes.push(key);\n    }\n  }\n\n  return requiredAttributes;\n};\n\n/**\n * @description Get all open api schema objects for a given content type\n *\n * @param {object} apiInfo\n * @property {string} apiInfo.uniqueName - Api name | Api name + Content type name\n * @property {object} apiInfo.attributes - Attributes on content type\n * @property {object} apiInfo.routeInfo - The routes for the api\n *\n * @returns {object} Open API schemas\n */\nconst getAllSchemasForContentType = ({ routeInfo, attributes, uniqueName }: ApiInfo) => {\n  // Store response and request schemas in an object\n  let strapiComponentSchemas = {};\n  const schemas: OpenAPIV3.ComponentsObject = {};\n  const typeName = pascalCase(uniqueName);\n\n  // adds a ComponentSchema to the Schemas so it can be used as Ref\n  const didAddStrapiComponentsToSchemas = (schemaName: string, schema: OpenAPIV3.SchemaObject) => {\n    if (!Object.keys(schema) || !Object.keys(schema.properties!)) return false;\n\n    // Add the Strapi components to the schema\n    strapiComponentSchemas = {\n      ...strapiComponentSchemas,\n      [schemaName]: schema,\n    };\n\n    return true;\n  };\n\n  // Get all the route methods\n  const routeMethods = routeInfo.routes.map((route: Core.Route) => route.method);\n\n  const attributesToOmit = [\n    'createdAt',\n    'updatedAt',\n    'publishedAt',\n    'publishedBy',\n    'updatedBy',\n    'createdBy',\n  ];\n\n  const attributesForRequest = _.omit(attributes, attributesToOmit);\n  // Get a list of required attribute names\n  const requiredRequestAttributes = getRequiredAttributes(attributesForRequest);\n  // Build the request schemas when the route has POST or PUT methods\n  if (routeMethods.includes('POST') || routeMethods.includes('PUT')) {\n    // Build localization requests schemas\n\n    // Build the request schema\n    Object.assign(schemas, {\n      [`${typeName}Request`]: {\n        type: 'object',\n        required: ['data'],\n        properties: {\n          data: {\n            ...(requiredRequestAttributes.length && { required: requiredRequestAttributes }),\n            type: 'object',\n            properties: cleanSchemaAttributes(attributesForRequest, {\n              isRequest: true,\n              didAddStrapiComponentsToSchemas,\n            }),\n          },\n        },\n      },\n    });\n  }\n\n  // Check for routes that need to return a list\n  const hasListOfEntities = routeInfo.routes.filter((route: Core.Route) =>\n    hasFindMethod(route.handler)\n  ).length;\n\n  if (hasListOfEntities) {\n    // Build the list response schema\n    Object.assign(schemas, {\n      [`${typeName}ListResponse`]: {\n        type: 'object',\n        properties: {\n          data: {\n            type: 'array',\n            items: {\n              $ref: `#/components/schemas/${typeName}`,\n            },\n          },\n          meta: {\n            type: 'object',\n            properties: {\n              pagination: {\n                type: 'object',\n                properties: {\n                  page: { type: 'integer' },\n                  pageSize: { type: 'integer', minimum: 25 },\n                  pageCount: { type: 'integer', maximum: 1 },\n                  total: { type: 'integer' },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  const requiredAttributes = getRequiredAttributes(attributes);\n  // Build the response schema\n  Object.assign(schemas, {\n    [`${typeName}`]: {\n      type: 'object',\n      ...(requiredAttributes.length && { required: requiredAttributes }),\n      properties: {\n        id: { type: 'number' },\n        documentId: { type: 'string' },\n        ...cleanSchemaAttributes(attributes, { didAddStrapiComponentsToSchemas }),\n      },\n    },\n\n    [`${typeName}Response`]: {\n      type: 'object',\n      properties: {\n        data: {\n          $ref: `#/components/schemas/${typeName}`,\n        },\n        meta: { type: 'object' },\n      },\n    },\n  });\n\n  return { ...schemas, ...strapiComponentSchemas };\n};\n\nconst buildComponentSchema = (api: Api) => {\n  // A reusable loop for building paths and component schemas\n  // Uses the api param to build a new set of params for each content type\n  // Passes these new params to the function provided\n  return loopContentTypeNames(api, getAllSchemasForContentType);\n};\n\nexport default buildComponentSchema;\n"],"names":["getRequiredAttributes","allAttributes","requiredAttributes","key","required","push","getAllSchemasForContentType","routeInfo","attributes","uniqueName","strapiComponentSchemas","schemas","typeName","pascalCase","didAddStrapiComponentsToSchemas","schemaName","schema","Object","keys","properties","routeMethods","routes","map","route","method","attributesToOmit","attributesForRequest","_","omit","requiredRequestAttributes","includes","assign","type","data","length","cleanSchemaAttributes","isRequest","hasListOfEntities","filter","hasFindMethod","handler","items","$ref","meta","pagination","page","pageSize","minimum","pageCount","maximum","total","id","documentId","buildComponentSchema","api","loopContentTypeNames"],"mappings":";;;;;;;;AAYA,MAAMA,wBAAwB,CAACC,aAAAA,GAAAA;AAC7B,IAAA,MAAMC,qBAA+B,EAAE;IAEvC,IAAK,MAAMC,OAAOF,aAAe,CAAA;AAC/B,QAAA,IAAIA,aAAa,CAACE,GAAI,CAAA,CAACC,QAAQ,EAAE;AAC/BF,YAAAA,kBAAAA,CAAmBG,IAAI,CAACF,GAAAA,CAAAA;AAC1B;AACF;IAEA,OAAOD,kBAAAA;AACT,CAAA;AAEA;;;;;;;;;IAUA,MAAMI,8BAA8B,CAAC,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAW,GAAA;;AAEjF,IAAA,IAAIC,yBAAyB,EAAC;AAC9B,IAAA,MAAMC,UAAsC,EAAC;AAC7C,IAAA,MAAMC,WAAWC,UAAWJ,CAAAA,UAAAA,CAAAA;;IAG5B,MAAMK,+BAAAA,GAAkC,CAACC,UAAoBC,EAAAA,MAAAA,GAAAA;AAC3D,QAAA,IAAI,CAACC,MAAAA,CAAOC,IAAI,CAACF,MAAW,CAAA,IAAA,CAACC,MAAOC,CAAAA,IAAI,CAACF,MAAAA,CAAOG,UAAU,CAAA,EAAI,OAAO,KAAA;;QAGrET,sBAAyB,GAAA;AACvB,YAAA,GAAGA,sBAAsB;AACzB,YAAA,CAACK,aAAaC;AAChB,SAAA;QAEA,OAAO,IAAA;AACT,KAAA;;IAGA,MAAMI,YAAAA,GAAeb,UAAUc,MAAM,CAACC,GAAG,CAAC,CAACC,KAAsBA,GAAAA,KAAAA,CAAMC,MAAM,CAAA;AAE7E,IAAA,MAAMC,gBAAmB,GAAA;AACvB,QAAA,WAAA;AACA,QAAA,WAAA;AACA,QAAA,aAAA;AACA,QAAA,aAAA;AACA,QAAA,WAAA;AACA,QAAA;AACD,KAAA;AAED,IAAA,MAAMC,oBAAuBC,GAAAA,CAAAA,CAAEC,IAAI,CAACpB,UAAYiB,EAAAA,gBAAAA,CAAAA;;AAEhD,IAAA,MAAMI,4BAA4B7B,qBAAsB0B,CAAAA,oBAAAA,CAAAA;;AAExD,IAAA,IAAIN,aAAaU,QAAQ,CAAC,WAAWV,YAAaU,CAAAA,QAAQ,CAAC,KAAQ,CAAA,EAAA;;;QAIjEb,MAAOc,CAAAA,MAAM,CAACpB,OAAS,EAAA;AACrB,YAAA,CAAC,CAAC,EAAEC,QAAAA,CAAS,OAAO,CAAC,GAAG;gBACtBoB,IAAM,EAAA,QAAA;gBACN5B,QAAU,EAAA;AAAC,oBAAA;AAAO,iBAAA;gBAClBe,UAAY,EAAA;oBACVc,IAAM,EAAA;wBACJ,GAAIJ,yBAAAA,CAA0BK,MAAM,IAAI;4BAAE9B,QAAUyB,EAAAA;yBAA2B;wBAC/EG,IAAM,EAAA,QAAA;AACNb,wBAAAA,UAAAA,EAAYgB,sBAAsBT,oBAAsB,EAAA;4BACtDU,SAAW,EAAA,IAAA;AACXtB,4BAAAA;AACF,yBAAA;AACF;AACF;AACF;AACF,SAAA,CAAA;AACF;;AAGA,IAAA,MAAMuB,iBAAoB9B,GAAAA,SAAAA,CAAUc,MAAM,CAACiB,MAAM,CAAC,CAACf,KAAAA,GACjDgB,oBAAchB,CAAAA,KAAAA,CAAMiB,OAAO,CAAA,CAAA,CAC3BN,MAAM;AAER,IAAA,IAAIG,iBAAmB,EAAA;;QAErBpB,MAAOc,CAAAA,MAAM,CAACpB,OAAS,EAAA;AACrB,YAAA,CAAC,CAAC,EAAEC,QAAAA,CAAS,YAAY,CAAC,GAAG;gBAC3BoB,IAAM,EAAA,QAAA;gBACNb,UAAY,EAAA;oBACVc,IAAM,EAAA;wBACJD,IAAM,EAAA,OAAA;wBACNS,KAAO,EAAA;AACLC,4BAAAA,IAAAA,EAAM,CAAC,qBAAqB,EAAE9B,QAAAA,CAAS;AACzC;AACF,qBAAA;oBACA+B,IAAM,EAAA;wBACJX,IAAM,EAAA,QAAA;wBACNb,UAAY,EAAA;4BACVyB,UAAY,EAAA;gCACVZ,IAAM,EAAA,QAAA;gCACNb,UAAY,EAAA;oCACV0B,IAAM,EAAA;wCAAEb,IAAM,EAAA;AAAU,qCAAA;oCACxBc,QAAU,EAAA;wCAAEd,IAAM,EAAA,SAAA;wCAAWe,OAAS,EAAA;AAAG,qCAAA;oCACzCC,SAAW,EAAA;wCAAEhB,IAAM,EAAA,SAAA;wCAAWiB,OAAS,EAAA;AAAE,qCAAA;oCACzCC,KAAO,EAAA;wCAAElB,IAAM,EAAA;AAAU;AAC3B;AACF;AACF;AACF;AACF;AACF;AACF,SAAA,CAAA;AACF;AAEA,IAAA,MAAM9B,qBAAqBF,qBAAsBQ,CAAAA,UAAAA,CAAAA;;IAEjDS,MAAOc,CAAAA,MAAM,CAACpB,OAAS,EAAA;AACrB,QAAA,CAAC,CAAC,EAAEC,QAAS,CAAA,CAAC,GAAG;YACfoB,IAAM,EAAA,QAAA;YACN,GAAI9B,kBAAAA,CAAmBgC,MAAM,IAAI;gBAAE9B,QAAUF,EAAAA;aAAoB;YACjEiB,UAAY,EAAA;gBACVgC,EAAI,EAAA;oBAAEnB,IAAM,EAAA;AAAS,iBAAA;gBACrBoB,UAAY,EAAA;oBAAEpB,IAAM,EAAA;AAAS,iBAAA;AAC7B,gBAAA,GAAGG,sBAAsB3B,UAAY,EAAA;AAAEM,oBAAAA;iBAAkC;AAC3E;AACF,SAAA;AAEA,QAAA,CAAC,CAAC,EAAEF,QAAAA,CAAS,QAAQ,CAAC,GAAG;YACvBoB,IAAM,EAAA,QAAA;YACNb,UAAY,EAAA;gBACVc,IAAM,EAAA;AACJS,oBAAAA,IAAAA,EAAM,CAAC,qBAAqB,EAAE9B,QAAAA,CAAS;AACzC,iBAAA;gBACA+B,IAAM,EAAA;oBAAEX,IAAM,EAAA;AAAS;AACzB;AACF;AACF,KAAA,CAAA;IAEA,OAAO;AAAE,QAAA,GAAGrB,OAAO;AAAE,QAAA,GAAGD;AAAuB,KAAA;AACjD,CAAA;AAEA,MAAM2C,uBAAuB,CAACC,GAAAA,GAAAA;;;;AAI5B,IAAA,OAAOC,qBAAqBD,GAAKhD,EAAAA,2BAAAA,CAAAA;AACnC;;;;"}