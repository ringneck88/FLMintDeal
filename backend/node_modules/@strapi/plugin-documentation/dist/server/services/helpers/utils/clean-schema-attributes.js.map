{"version":3,"file":"clean-schema-attributes.js","sources":["../../../../../server/src/services/helpers/utils/clean-schema-attributes.ts"],"sourcesContent":["import type { Struct } from '@strapi/types';\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport getSchemaData from './get-schema-data';\nimport pascalCase from './pascal-case';\n\ninterface Options {\n  typeMap?: Map<string, boolean>;\n  isRequest?: boolean;\n  didAddStrapiComponentsToSchemas: (name: string, schema: object) => boolean;\n}\n\n/**\n * @description - Convert attribute component names to OpenAPI component names\n *\n * @returns OpenAPI component name\n */\nconst convertComponentName = (component: string, isRef = false): string => {\n  const cleanComponentName = `${pascalCase(component)}Component`;\n\n  if (isRef) {\n    return `#/components/schemas/${cleanComponentName}`;\n  }\n  return cleanComponentName;\n};\n\n/**\n * @description - Converts types found on attributes to OpenAPI acceptable data types\n *\n * @returns Attributes using OpenAPI acceptable data types\n */\nconst cleanSchemaAttributes = (\n  attributes: Struct.SchemaAttributes,\n  { typeMap = new Map(), isRequest = false, didAddStrapiComponentsToSchemas }: Options\n) => {\n  const schemaAttributes: Record<string, OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject> = {};\n\n  for (const prop of Object.keys(attributes)) {\n    const attribute = attributes[prop];\n\n    switch (attribute.type) {\n      case 'password': {\n        if (!isRequest) {\n          break;\n        }\n\n        schemaAttributes[prop] = { type: 'string', format: 'password', example: '*******' };\n        break;\n      }\n      case 'email': {\n        schemaAttributes[prop] = { type: 'string', format: 'email' };\n        break;\n      }\n      case 'string':\n      case 'text':\n      case 'richtext': {\n        schemaAttributes[prop] = { type: 'string' };\n        break;\n      }\n      case 'timestamp': {\n        schemaAttributes[prop] = { type: 'string', format: 'timestamp', example: Date.now() };\n        break;\n      }\n      case 'time': {\n        schemaAttributes[prop] = { type: 'string', format: 'time', example: '12:54.000' };\n        break;\n      }\n      case 'date': {\n        schemaAttributes[prop] = { type: 'string', format: 'date' };\n        break;\n      }\n      case 'datetime': {\n        schemaAttributes[prop] = { type: 'string', format: 'date-time' };\n        break;\n      }\n      case 'boolean': {\n        schemaAttributes[prop] = { type: 'boolean' };\n        break;\n      }\n      case 'enumeration': {\n        schemaAttributes[prop] = { type: 'string', enum: [...attribute.enum] };\n        break;\n      }\n      case 'decimal':\n      case 'float': {\n        schemaAttributes[prop] = { type: 'number', format: 'float' };\n        break;\n      }\n      case 'integer': {\n        schemaAttributes[prop] = { type: 'integer' };\n        break;\n      }\n      case 'biginteger': {\n        schemaAttributes[prop] = { type: 'string', pattern: '^\\\\d*$', example: '123456789' };\n        break;\n      }\n      case 'json':\n      case 'blocks': {\n        schemaAttributes[prop] = {};\n        break;\n      }\n      case 'uid': {\n        schemaAttributes[prop] = { type: 'string' };\n        break;\n      }\n      case 'component': {\n        const componentAttributes = strapi.components[attribute.component].attributes;\n        const rawComponentSchema: OpenAPIV3.SchemaObject = {\n          type: 'object',\n          properties: {\n            ...(isRequest ? {} : { id: { type: 'number' } }),\n            ...cleanSchemaAttributes(componentAttributes, {\n              typeMap,\n              isRequest,\n              didAddStrapiComponentsToSchemas,\n            }),\n          },\n        };\n\n        const refComponentSchema: OpenAPIV3.ReferenceObject = {\n          $ref: convertComponentName(attribute.component, true),\n        };\n\n        const componentExists = didAddStrapiComponentsToSchemas(\n          convertComponentName(attribute.component),\n          rawComponentSchema\n        );\n\n        const finalComponentSchema = componentExists ? refComponentSchema : rawComponentSchema;\n        if (attribute.repeatable) {\n          schemaAttributes[prop] = {\n            type: 'array',\n            items: finalComponentSchema,\n          };\n        } else {\n          schemaAttributes[prop] = finalComponentSchema;\n        }\n        break;\n      }\n      case 'dynamiczone': {\n        const components = attribute.components.map((component) => {\n          const componentAttributes = strapi.components[component].attributes;\n          const rawComponentSchema: OpenAPIV3.SchemaObject = {\n            type: 'object',\n            properties: {\n              ...(isRequest ? {} : { id: { type: 'number' } }),\n              __component: { type: 'string', enum: [component] },\n              ...cleanSchemaAttributes(componentAttributes, {\n                typeMap,\n                isRequest,\n                didAddStrapiComponentsToSchemas,\n              }),\n            },\n          };\n\n          const refComponentSchema: OpenAPIV3.ReferenceObject = {\n            $ref: convertComponentName(component, true),\n          };\n\n          const componentExists = didAddStrapiComponentsToSchemas(\n            convertComponentName(component),\n            rawComponentSchema\n          );\n          const finalComponentSchema = componentExists ? refComponentSchema : rawComponentSchema;\n          return finalComponentSchema;\n        });\n        let discriminator: OpenAPIV3.DiscriminatorObject | undefined;\n        if (components.every((component) => Object.hasOwn(component, '$ref'))) {\n          discriminator = {\n            propertyName: '__component',\n            mapping: attribute.components.reduce(\n              (acc, component) => {\n                acc[component] = convertComponentName(component, true);\n                return acc;\n              },\n              {} as {\n                [value: string]: string;\n              }\n            ),\n          };\n        }\n\n        schemaAttributes[prop] = {\n          type: 'array',\n          items: {\n            anyOf: components,\n          },\n          discriminator,\n        };\n        break;\n      }\n      case 'media': {\n        const imageAttributes = strapi.contentType('plugin::upload.file').attributes;\n        const isListOfEntities = attribute.multiple ?? false;\n\n        if (isRequest) {\n          const oneOfType: OpenAPIV3.SchemaObject = {\n            oneOf: [{ type: 'integer' }, { type: 'string' }],\n            example: 'string or id',\n          };\n\n          schemaAttributes[prop] = isListOfEntities\n            ? { type: 'array', items: oneOfType }\n            : oneOfType;\n          break;\n        }\n\n        schemaAttributes[prop] = getSchemaData(\n          isListOfEntities,\n          cleanSchemaAttributes(imageAttributes, { typeMap, didAddStrapiComponentsToSchemas })\n        );\n        break;\n      }\n\n      case 'relation': {\n        const isListOfEntities = attribute.relation.includes('ToMany');\n\n        if (isRequest) {\n          const oneOfType: OpenAPIV3.SchemaObject = {\n            oneOf: [{ type: 'integer' }, { type: 'string' }],\n            example: 'string or id',\n          };\n\n          schemaAttributes[prop] = isListOfEntities\n            ? { type: 'array', items: oneOfType }\n            : oneOfType;\n          break;\n        }\n\n        if (!('target' in attribute) || !attribute.target || typeMap.has(attribute.target)) {\n          schemaAttributes[prop] = getSchemaData(isListOfEntities, {});\n\n          break;\n        }\n\n        typeMap.set(attribute.target, true);\n        const targetAttributes = strapi.contentType(attribute.target).attributes;\n\n        schemaAttributes[prop] = getSchemaData(\n          isListOfEntities,\n          cleanSchemaAttributes(targetAttributes, {\n            typeMap,\n            isRequest,\n            didAddStrapiComponentsToSchemas,\n          })\n        );\n\n        break;\n      }\n      default: {\n        // @ts-expect-error - This is a catch all for any other types\n        throw new Error(`Invalid type ${attribute.type} while generating open api schema.`);\n      }\n    }\n  }\n\n  return schemaAttributes;\n};\n\nexport default cleanSchemaAttributes;\n"],"names":["convertComponentName","component","isRef","cleanComponentName","pascalCase","cleanSchemaAttributes","attributes","typeMap","Map","isRequest","didAddStrapiComponentsToSchemas","schemaAttributes","prop","Object","keys","attribute","type","format","example","Date","now","enum","pattern","componentAttributes","strapi","components","rawComponentSchema","properties","id","refComponentSchema","$ref","componentExists","finalComponentSchema","repeatable","items","map","__component","discriminator","every","hasOwn","propertyName","mapping","reduce","acc","anyOf","imageAttributes","contentType","isListOfEntities","multiple","oneOfType","oneOf","getSchemaData","relation","includes","target","has","set","targetAttributes","Error"],"mappings":"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"}