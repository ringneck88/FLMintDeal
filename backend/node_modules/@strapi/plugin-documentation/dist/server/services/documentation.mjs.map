{"version":3,"file":"documentation.mjs","sources":["../../../server/src/services/documentation.ts"],"sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport { produce } from 'immer';\nimport type { Core } from '@strapi/types';\n\nimport { builApiEndpointPath, buildComponentSchema } from './helpers';\nimport { getPluginsThatNeedDocumentation } from './utils/get-plugins-that-need-documentation';\nimport { getService } from '../utils';\n\nimport type { Config, PluginConfig } from '../types';\n\nexport type Version = {\n  version: string;\n  generatedDate: string;\n  url: string;\n};\n\nexport type DocumentationService = ReturnType<typeof createService>;\n\nconst createService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const config = strapi.config.get('plugin::documentation') as PluginConfig;\n  const pluginsThatNeedDocumentation = getPluginsThatNeedDocumentation(config);\n  const overrideService = getService('override');\n\n  return {\n    getDocumentationVersion() {\n      return config.info.version;\n    },\n\n    getFullDocumentationPath() {\n      return path.join(strapi.dirs.app.extensions, 'documentation', 'documentation');\n    },\n\n    getDocumentationVersions(): Version[] {\n      return fs\n        .readdirSync(this.getFullDocumentationPath())\n        .map((version) => {\n          try {\n            const filePath = path.resolve(\n              this.getFullDocumentationPath(),\n              version,\n              'full_documentation.json'\n            );\n\n            const doc = JSON.parse(fs.readFileSync(filePath).toString());\n\n            const generatedDate = doc.info['x-generation-date'];\n\n            return { version, generatedDate, url: '' };\n          } catch (err) {\n            return null;\n          }\n        })\n        .filter((x) => x) as Version[];\n    },\n\n    /**\n     * Returns settings stored in core-store\n     */\n    async getDocumentationAccess() {\n      const { restrictedAccess } = (await strapi.store!({\n        environment: '',\n        type: 'plugin',\n        name: 'documentation',\n        key: 'config',\n      }).get()) as Config;\n\n      return { restrictedAccess };\n    },\n\n    getApiDocumentationPath(api: { name: string; getter: string }) {\n      if (api.getter === 'plugin') {\n        return path.join(strapi.dirs.app.extensions, api.name, 'documentation');\n      }\n\n      return path.join(strapi.dirs.app.api, api.name, 'documentation');\n    },\n\n    async deleteDocumentation(version: string) {\n      const apis = this.getPluginAndApiInfo();\n      for (const api of apis) {\n        await fs.remove(path.join(this.getApiDocumentationPath(api), version));\n      }\n\n      await fs.remove(path.join(this.getFullDocumentationPath(), version));\n    },\n\n    getPluginAndApiInfo() {\n      const pluginsToDocument = pluginsThatNeedDocumentation.map((plugin) => {\n        return {\n          name: plugin,\n          getter: 'plugin',\n          ctNames: Object.keys(strapi.plugin(plugin).contentTypes),\n        };\n      });\n\n      const apisToDocument = Object.keys(strapi.apis).map((api) => {\n        return {\n          name: api,\n          getter: 'api',\n          ctNames: Object.keys(strapi.api(api).contentTypes),\n        };\n      });\n\n      return [...apisToDocument, ...pluginsToDocument];\n    },\n\n    /**\n     * @description - Creates the Swagger json files\n     */\n    async generateFullDoc(versionOpt?: string) {\n      const version = versionOpt ?? this.getDocumentationVersion();\n\n      const apis = this.getPluginAndApiInfo();\n      const apisThatNeedGeneratedDocumentation = apis.filter(\n        ({ name }) => !overrideService.isEnabled(name)\n      );\n\n      // Initialize the generated documentation with defaults\n      const generatedDocumentation = await produce(config, async (draft) => {\n        if (draft.servers?.length === 0) {\n          // When no servers found set the defaults\n          const serverUrl = strapi.config.get('server.absoluteUrl');\n          const apiPath = strapi.config.get('api.rest.prefix');\n          draft.servers = [\n            {\n              url: `${serverUrl}${apiPath}`,\n              description: 'Development server',\n            },\n          ];\n        }\n\n        if (!draft.components) {\n          draft.components = {};\n        }\n\n        // Set the generated date\n        draft.info['x-generation-date'] = new Date().toISOString();\n        // Set the plugins that need documentation\n        draft['x-strapi-config'].plugins = pluginsThatNeedDocumentation;\n\n        // Delete the mutateDocumentation key from the config so it doesn't end up in the spec\n        delete draft['x-strapi-config'].mutateDocumentation;\n\n        // Generate the documentation for each api and update the generatedDocumentation\n        for (const api of apisThatNeedGeneratedDocumentation) {\n          const newApiPath = builApiEndpointPath(api);\n          const generatedSchemas = buildComponentSchema(api);\n\n          if (generatedSchemas) {\n            draft.components.schemas = { ...draft.components.schemas, ...generatedSchemas };\n          }\n\n          if (newApiPath) {\n            draft.paths = { ...draft.paths, ...newApiPath };\n          }\n        }\n\n        // When overrides are present update the generatedDocumentation\n        if (overrideService.registeredOverrides.length > 0) {\n          overrideService.registeredOverrides.forEach((override: Partial<PluginConfig>) => {\n            // Only run the overrrides when no override version is provided,\n            // or when the generated documentation version matches the override version\n            if (!override?.info?.version || override.info.version === version) {\n              if (override.tags) {\n                // Merge override tags with the generated tags\n                draft.tags = draft.tags || [];\n                draft.tags.push(...override.tags);\n              }\n\n              if (override.paths) {\n                // Merge override paths with the generated paths\n                // The override will add a new path or replace the value of an existing path\n                draft.paths = { ...draft.paths, ...override.paths };\n              }\n\n              if (override.components) {\n                const keys = Object.keys(override.components) as Array<\n                  keyof typeof override.components\n                >;\n\n                keys.forEach((overrideKey) => {\n                  draft.components = draft.components || {};\n\n                  const overrideValue = override.components?.[overrideKey];\n                  const originalValue = draft.components?.[overrideKey];\n\n                  Object.assign(draft.components, {\n                    [overrideKey]: {\n                      ...originalValue,\n                      ...overrideValue,\n                    },\n                  });\n                });\n              }\n            }\n          });\n        }\n      });\n\n      // Escape hatch, allow the user to provide a mutateDocumentation function that can alter any part of\n      // the generated documentation before it is written to the file system\n      const userMutatesDocumentation = config['x-strapi-config'].mutateDocumentation;\n\n      const finalDocumentation = userMutatesDocumentation\n        ? produce(generatedDocumentation, userMutatesDocumentation)\n        : generatedDocumentation;\n\n      // Get the file path for the final documentation\n      const fullDocJsonPath = path.join(\n        this.getFullDocumentationPath(),\n        version,\n        'full_documentation.json'\n      );\n      // Write the documentation to the file system\n      await fs.ensureFile(fullDocJsonPath);\n      await fs.writeJson(fullDocJsonPath, finalDocumentation, { spaces: 2 });\n    },\n  };\n};\n\nexport default createService;\n"],"names":["createService","strapi","config","get","pluginsThatNeedDocumentation","getPluginsThatNeedDocumentation","overrideService","getService","getDocumentationVersion","info","version","getFullDocumentationPath","path","join","dirs","app","extensions","getDocumentationVersions","fs","readdirSync","map","filePath","resolve","doc","JSON","parse","readFileSync","toString","generatedDate","url","err","filter","x","getDocumentationAccess","restrictedAccess","store","environment","type","name","key","getApiDocumentationPath","api","getter","deleteDocumentation","apis","getPluginAndApiInfo","remove","pluginsToDocument","plugin","ctNames","Object","keys","contentTypes","apisToDocument","generateFullDoc","versionOpt","apisThatNeedGeneratedDocumentation","isEnabled","generatedDocumentation","produce","draft","servers","length","serverUrl","apiPath","description","components","Date","toISOString","plugins","mutateDocumentation","newApiPath","builApiEndpointPath","generatedSchemas","buildComponentSchema","schemas","paths","registeredOverrides","forEach","override","tags","push","overrideKey","overrideValue","originalValue","assign","userMutatesDocumentation","finalDocumentation","fullDocJsonPath","ensureFile","writeJson","spaces"],"mappings":"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"}