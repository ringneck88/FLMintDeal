{"version":3,"file":"override.js","sources":["../../../server/src/services/override.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\n\nimport { getPluginsThatNeedDocumentation } from './utils/get-plugins-that-need-documentation';\nimport type { PluginConfig } from '../types';\n\nexport type OverrideService = ReturnType<typeof createService>;\n\nconst createService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const registeredOverrides: Partial<PluginConfig>[] = [];\n  const excludedFromGeneration: string[] = [];\n\n  return {\n    registeredOverrides,\n    excludedFromGeneration,\n    /**\n     *\n     * @param {(string | string[])} api - The name of the api or and array of apis to exclude from generation\n     */\n    excludeFromGeneration(api: string | string[]) {\n      if (Array.isArray(api)) {\n        excludedFromGeneration.push(...api);\n\n        return;\n      }\n\n      excludedFromGeneration.push(api);\n    },\n\n    isEnabled(name: string) {\n      return excludedFromGeneration.includes(name);\n    },\n\n    registerOverride(\n      override: Partial<PluginConfig>,\n      opts?: { pluginOrigin: string; excludeFromGeneration?: string[] }\n    ) {\n      const { pluginOrigin, excludeFromGeneration = [] } = opts ?? {};\n\n      const pluginsThatNeedDocumentation = getPluginsThatNeedDocumentation(\n        strapi.config.get('plugin::documentation')\n      );\n      // Don't apply the override if the plugin is not in the list of plugins that need documentation\n      if (pluginOrigin && !pluginsThatNeedDocumentation.includes(pluginOrigin)) return;\n\n      if (excludeFromGeneration.length) {\n        this.excludeFromGeneration(excludeFromGeneration);\n      }\n\n      let overrideToRegister = override;\n      // Parse yaml if we receive a string\n      if (typeof override === 'string') {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        overrideToRegister = require('yaml').parse(overrideToRegister);\n      }\n      // receive an object we can register it directly\n      registeredOverrides.push(overrideToRegister);\n    },\n  };\n};\n\nexport default createService;\n"],"names":["createService","strapi","registeredOverrides","excludedFromGeneration","excludeFromGeneration","api","Array","isArray","push","isEnabled","name","includes","registerOverride","override","opts","pluginOrigin","pluginsThatNeedDocumentation","getPluginsThatNeedDocumentation","config","get","length","overrideToRegister","require","parse"],"mappings":";;;;AAOA,MAAMA,aAAgB,GAAA,CAAC,EAAEC,MAAM,EAA2B,GAAA;AACxD,IAAA,MAAMC,sBAA+C,EAAE;AACvD,IAAA,MAAMC,yBAAmC,EAAE;IAE3C,OAAO;AACLD,QAAAA,mBAAAA;AACAC,QAAAA,sBAAAA;AACA;;;AAGC,QACDC,uBAAsBC,GAAsB,EAAA;YAC1C,IAAIC,KAAAA,CAAMC,OAAO,CAACF,GAAM,CAAA,EAAA;AACtBF,gBAAAA,sBAAAA,CAAuBK,IAAI,CAAIH,GAAAA,GAAAA,CAAAA;AAE/B,gBAAA;AACF;AAEAF,YAAAA,sBAAAA,CAAuBK,IAAI,CAACH,GAAAA,CAAAA;AAC9B,SAAA;AAEAI,QAAAA,SAAAA,CAAAA,CAAUC,IAAY,EAAA;YACpB,OAAOP,sBAAAA,CAAuBQ,QAAQ,CAACD,IAAAA,CAAAA;AACzC,SAAA;QAEAE,gBACEC,CAAAA,CAAAA,QAA+B,EAC/BC,IAAiE,EAAA;YAEjE,MAAM,EAAEC,YAAY,EAAEX,qBAAAA,GAAwB,EAAE,EAAE,GAAGU,QAAQ,EAAC;AAE9D,YAAA,MAAME,+BAA+BC,+DACnChB,CAAAA,MAAAA,CAAOiB,MAAM,CAACC,GAAG,CAAC,uBAAA,CAAA,CAAA;;AAGpB,YAAA,IAAIJ,YAAgB,IAAA,CAACC,4BAA6BL,CAAAA,QAAQ,CAACI,YAAe,CAAA,EAAA;YAE1E,IAAIX,qBAAAA,CAAsBgB,MAAM,EAAE;gBAChC,IAAI,CAAChB,qBAAqB,CAACA,qBAAAA,CAAAA;AAC7B;AAEA,YAAA,IAAIiB,kBAAqBR,GAAAA,QAAAA;;YAEzB,IAAI,OAAOA,aAAa,QAAU,EAAA;;gBAEhCQ,kBAAqBC,GAAAA,OAAAA,CAAQ,MAAQC,CAAAA,CAAAA,KAAK,CAACF,kBAAAA,CAAAA;AAC7C;;AAEAnB,YAAAA,mBAAAA,CAAoBM,IAAI,CAACa,kBAAAA,CAAAA;AAC3B;AACF,KAAA;AACF;;;;"}