{"version":3,"file":"Context.js","sources":["../../../../../../admin/src/components/GuidedTour/Context.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { produce } from 'immer';\n\nimport { GetGuidedTourMeta } from '../../../../shared/contracts/admin';\nimport { usePersistentState } from '../../hooks/usePersistentState';\nimport { createContext } from '../Context';\n\nimport { type Tours, tours as guidedTours } from './Tours';\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype ValidTourName = keyof Tours;\n\nexport type ExtendedCompletedActions = (\n  | GetGuidedTourMeta.Response['data']['completedActions'][number]\n  | 'didCopyApiToken'\n)[];\n\ntype Action =\n  | {\n      type: 'next_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'skip_tour';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'set_completed_actions';\n      payload: ExtendedCompletedActions;\n    }\n  | {\n      type: 'skip_all_tours';\n    }\n  | {\n      type: 'reset_all_tours';\n    };\n\ntype Tour = Record<ValidTourName, { currentStep: number; length: number; isCompleted: boolean }>;\ntype State = {\n  tours: Tour;\n  enabled: boolean;\n  completedActions: ExtendedCompletedActions;\n};\n\nconst [GuidedTourProviderImpl, useGuidedTour] = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}>('GuidedTour');\n\nconst getInitialTourState = (tours: Tours) => {\n  return Object.keys(tours).reduce((acc, tourName) => {\n    const tourLength = Object.keys(tours[tourName as ValidTourName]).length;\n    acc[tourName as ValidTourName] = {\n      currentStep: 0,\n      length: tourLength,\n      isCompleted: false,\n    };\n\n    return acc;\n  }, {} as Tour);\n};\n\nfunction reducer(state: State, action: Action): State {\n  return produce(state, (draft) => {\n    if (action.type === 'next_step') {\n      const nextStep = draft.tours[action.payload].currentStep + 1;\n      draft.tours[action.payload].currentStep = nextStep;\n      draft.tours[action.payload].isCompleted = nextStep === draft.tours[action.payload].length;\n    }\n\n    if (action.type === 'skip_tour') {\n      draft.tours[action.payload].isCompleted = true;\n    }\n\n    if (action.type === 'set_completed_actions') {\n      draft.completedActions = [...new Set([...draft.completedActions, ...action.payload])];\n    }\n\n    if (action.type === 'skip_all_tours') {\n      draft.enabled = false;\n    }\n\n    if (action.type === 'reset_all_tours') {\n      draft.enabled = true;\n      draft.tours = getInitialTourState(guidedTours);\n      draft.completedActions = [];\n    }\n  });\n}\n\nconst STORAGE_KEY = 'STRAPI_GUIDED_TOUR';\nconst GuidedTourContext = ({\n  children,\n  enabled = true,\n}: {\n  children: React.ReactNode;\n  enabled?: boolean;\n}) => {\n  const [tours, setTours] = usePersistentState<State>(STORAGE_KEY, {\n    tours: getInitialTourState(guidedTours),\n    enabled,\n    completedActions: [],\n  });\n  const [state, dispatch] = React.useReducer(reducer, tours);\n\n  // Sync local storage\n  React.useEffect(() => {\n    setTours(state);\n  }, [state, setTours]);\n\n  return (\n    <GuidedTourProviderImpl state={state} dispatch={dispatch}>\n      {children}\n    </GuidedTourProviderImpl>\n  );\n};\n\nexport type { Action, State, ValidTourName };\nexport { GuidedTourContext, useGuidedTour, reducer };\n"],"names":["GuidedTourProviderImpl","useGuidedTour","createContext","getInitialTourState","tours","Object","keys","reduce","acc","tourName","tourLength","length","currentStep","isCompleted","reducer","state","action","produce","draft","type","nextStep","payload","completedActions","Set","enabled","guidedTours","STORAGE_KEY","GuidedTourContext","children","setTours","usePersistentState","dispatch","React","useReducer","useEffect","_jsx"],"mappings":"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"}