{"version":3,"file":"Tours.js","sources":["../../../../../../admin/src/components/GuidedTour/Tours.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Popover, Portal, Button } from '@strapi/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useGetGuidedTourMetaQuery } from '../../services/admin';\n\nimport {\n  type State,\n  type Action,\n  useGuidedTour,\n  ValidTourName,\n  ExtendedCompletedActions,\n} from './Context';\nimport { Step, StepCount, createStepComponents } from './Step';\n\n/* -------------------------------------------------------------------------------------------------\n * Tours\n * -----------------------------------------------------------------------------------------------*/\n\nconst GotItAction = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <Button onClick={onClick}>\n      <FormattedMessage id=\"tours.gotIt\" defaultMessage=\"Got it\" />\n    </Button>\n  );\n};\n\nconst tours = {\n  contentTypeBuilder: createTour('contentTypeBuilder', [\n    {\n      name: 'Introduction',\n      content: (Step) => (\n        <Step.Root side=\"bottom\" sideOffset={33} withArrow={false}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.Introduction.title\"\n            defaultMessage=\"Content-Type Builder\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Introduction.content\"\n            defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CollectionTypes',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={16}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.CollectionTypes.title\"\n            defaultMessage=\"Collection Types\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.CollectionTypes.content\"\n            defaultMessage=\"A content structure that can manage multiple entries, such as articles or products.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'SingleTypes',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={16}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.SingleTypes.title\"\n            defaultMessage=\"Single Types\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.SingleTypes.content\"\n            defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Components',\n      content: (Step, { dispatch }) => (\n        <Step.Root side=\"right\" sideOffset={16}>\n          <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Components.content\"\n            defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\n          />\n          <Step.Actions>\n            <StepCount tourName=\"contentTypeBuilder\" />\n            <GotItAction\n              onClick={() => dispatch({ type: 'next_step', payload: 'contentTypeBuilder' })}\n            />\n          </Step.Actions>\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\">\n          <Step.Title\n            id=\"tours.contentTypeBuilder.Finish.title\"\n            defaultMessage=\"It's time to create content!\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Finish.content\"\n            defaultMessage=\"Now that you created content types, you'll be able to create content in the content manager.\"\n          />\n          <Step.Actions showStepCount={false} to=\"/content-manager\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateContentTypeSchema'),\n    },\n  ]),\n  contentManager: createTour('contentManager', [\n    {\n      name: 'Introduction',\n      when: (completedActions) => completedActions.includes('didCreateContentTypeSchema'),\n      content: (Step) => (\n        <Step.Root side=\"top\" sideOffset={33} withArrow={false}>\n          <Step.Title\n            id=\"tours.contentManager.Introduction.title\"\n            defaultMessage=\"Content manager\"\n          />\n          <Step.Content\n            id=\"tours.contentManager.Introduction.content\"\n            defaultMessage=\"Create and manage content from your collection types and single types.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Fields',\n      content: (Step) => (\n        <Step.Root sideOffset={-12}>\n          <Step.Title id=\"tours.contentManager.Fields.title\" defaultMessage=\"Fields\" />\n          <Step.Content\n            id=\"tours.contentManager.Fields.content\"\n            defaultMessage=\"Add content to the fields created in the Content-Type Builder.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Publish',\n      content: (Step, { dispatch }) => (\n        <Step.Root side=\"left\" align=\"center\">\n          <Step.Title id=\"tours.contentManager.Publish.title\" defaultMessage=\"Publish\" />\n          <Step.Content\n            id=\"tours.contentManager.Publish.content\"\n            defaultMessage=\"Publish entries to make their content available through the Document Service API.\"\n          />\n          <Step.Actions>\n            <StepCount tourName=\"contentManager\" />\n            <GotItAction\n              onClick={() => dispatch({ type: 'next_step', payload: 'contentManager' })}\n            />\n          </Step.Actions>\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\">\n          <Step.Title\n            id=\"tours.contentManager.FinalStep.title\"\n            defaultMessage=\"It's time to create API Tokens!\"\n          />\n          <Step.Content\n            id=\"tours.contentManager.FinalStep.content\"\n            defaultMessage=\"Now that you've created and published content, time to create API tokens and set up permissions.\"\n          />\n          <Step.Actions showStepCount={false} to=\"/settings/api-tokens\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateContent'),\n    },\n  ]),\n  apiTokens: createTour('apiTokens', [\n    {\n      name: 'Introduction',\n      content: (Step) => (\n        <Step.Root sideOffset={-36} withArrow={false}>\n          <Step.Title id=\"tours.apiTokens.Introduction.title\" defaultMessage=\"API tokens\" />\n          <Step.Content\n            id=\"tours.apiTokens.Introduction.content\"\n            defaultMessage=\"Create and manage API tokens with highly customizable permissions.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CreateAnAPIToken',\n      content: (Step) => (\n        <Step.Root side=\"bottom\" align=\"end\" sideOffset={-10}>\n          <Step.Title\n            id=\"tours.apiTokens.CreateAnAPIToken.title\"\n            defaultMessage=\"Create an API token\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.CreateAnAPIToken.content\"\n            defaultMessage=\"Create a new API token. Choose a name, duration and type.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CopyAPIToken',\n      content: (Step, { dispatch }) => (\n        <Step.Root side=\"bottom\" align=\"start\" sideOffset={-5}>\n          <Step.Title\n            id=\"tours.apiTokens.CopyAPIToken.title\"\n            defaultMessage=\"Copy your new API token\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.CopyAPIToken.content\"\n            defaultMessage=\"Make sure to do it now, you won’t be able to see it again. You’ll need to generate a new one if you lose it.\"\n          />\n          <Step.Actions>\n            <StepCount tourName=\"apiTokens\" />\n            <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'apiTokens' })} />\n          </Step.Actions>\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateApiToken'),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\" align=\"start\">\n          <Step.Title\n            id=\"tours.apiTokens.FinalStep.title\"\n            defaultMessage=\"It's time to deploy your application!\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.FinalStep.content\"\n            defaultMessage=\"Your application is ready to be deployed and its content to be shared with the world!\"\n          />\n          <Step.Actions showStepCount={false} to=\"/\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCopyApiToken'),\n    },\n  ]),\n  strapiCloud: createTour('strapiCloud', []),\n} as const;\n\ntype Tours = typeof tours;\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourTooltip\n * -----------------------------------------------------------------------------------------------*/\n\ntype Content = (\n  Step: Step,\n  {\n    state,\n    dispatch,\n  }: {\n    state: State;\n    dispatch: React.Dispatch<Action>;\n  }\n) => React.ReactNode;\n\ntype GuidedTourTooltipProps = {\n  children: React.ReactNode;\n  content: Content;\n  tourName: ValidTourName;\n  step: number;\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\n};\n\nconst GuidedTourTooltip = ({ children, ...props }: GuidedTourTooltipProps) => {\n  const state = useGuidedTour('TooltipWrapper', (s) => s.state);\n\n  if (!state.enabled) {\n    return <>{children}</>;\n  }\n\n  return <GuidedTourTooltipImpl {...props}>{children}</GuidedTourTooltipImpl>;\n};\n\nconst GuidedTourOverlay = styled(Box)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(50, 50, 77, 0.2);\n  z-index: 10;\n`;\n\nconst GuidedTourTooltipImpl = ({\n  children,\n  content,\n  tourName,\n  step,\n  when,\n}: GuidedTourTooltipProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n\n  const state = useGuidedTour('GuidedTourTooltip', (s) => s.state);\n  const dispatch = useGuidedTour('GuidedTourTooltip', (s) => s.dispatch);\n\n  const isCurrentStep = state.tours[tourName].currentStep === step;\n  const isStepConditionMet = when ? when(state.completedActions) : true;\n  const isPopoverOpen =\n    guidedTourMeta?.data?.isFirstSuperAdminUser &&\n    !state.tours[tourName].isCompleted &&\n    isCurrentStep &&\n    isStepConditionMet;\n\n  // Lock the scroll\n  React.useEffect(() => {\n    if (!isPopoverOpen) return;\n\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, [isPopoverOpen]);\n\n  // TODO: This isn't great but the only solution for syncing the completed actions\n  React.useEffect(() => {\n    dispatch({\n      type: 'set_completed_actions',\n      payload: guidedTourMeta?.data?.completedActions ?? [],\n    });\n  }, [dispatch, guidedTourMeta?.data?.completedActions]);\n\n  const Step = React.useMemo(() => createStepComponents(tourName), [tourName]);\n\n  return (\n    <>\n      {isPopoverOpen && (\n        <Portal>\n          <GuidedTourOverlay />\n        </Portal>\n      )}\n      <Popover.Root open={isPopoverOpen}>\n        <Popover.Anchor>{children}</Popover.Anchor>\n        {content(Step, { state, dispatch })}\n      </Popover.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Tour factory\n * -----------------------------------------------------------------------------------------------*/\n\ntype TourStep<P extends string> = {\n  name: P;\n  content: Content;\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\n};\n\nfunction createTour<const T extends ReadonlyArray<TourStep<string>>>(tourName: string, steps: T) {\n  type Components = {\n    [K in T[number]['name']]: React.ComponentType<{ children: React.ReactNode }>;\n  };\n\n  const tour = steps.reduce((acc, step, index) => {\n    if (step.name in acc) {\n      throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);\n    }\n\n    acc[step.name as keyof Components] = ({ children }: { children: React.ReactNode }) => {\n      return (\n        <GuidedTourTooltip\n          tourName={tourName as ValidTourName}\n          step={index}\n          content={step.content}\n          when={step.when}\n        >\n          {children}\n        </GuidedTourTooltip>\n      );\n    };\n\n    return acc;\n  }, {} as Components);\n\n  return tour;\n}\n\nexport type { Content, Tours };\nexport { tours };\n"],"names":["GotItAction","onClick","_jsx","Button","FormattedMessage","id","defaultMessage","tours","contentTypeBuilder","createTour","name","content","Step","_jsxs","Root","side","sideOffset","withArrow","Title","Content","Actions","showSkip","dispatch","StepCount","tourName","type","payload","showStepCount","to","when","completedActions","includes","contentManager","align","apiTokens","strapiCloud","GuidedTourTooltip","children","props","state","useGuidedTour","s","enabled","_Fragment","GuidedTourTooltipImpl","GuidedTourOverlay","styled","Box","step","data","guidedTourMeta","useGetGuidedTourMetaQuery","isCurrentStep","currentStep","isStepConditionMet","isPopoverOpen","isFirstSuperAdminUser","isCompleted","React","useEffect","originalStyle","window","getComputedStyle","document","body","overflow","style","useMemo","createStepComponents","Portal","Popover","open","Anchor","steps","tour","reduce","acc","index","Error"],"mappings":"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"}