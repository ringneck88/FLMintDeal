{"version":3,"file":"wrap-resolvers.js","sources":["../../../../server/src/services/content-api/wrap-resolvers.ts"],"sourcesContent":["import { get, getOr, isFunction, first, isNil } from 'lodash/fp';\nimport {\n  GraphQLObjectType,\n  GraphQLResolveInfo,\n  GraphQLSchema,\n  GraphQLFieldResolver,\n} from 'graphql';\nimport { errors } from '@strapi/utils';\nimport type { Core } from '@strapi/types';\n\nimport { createPoliciesMiddleware } from './policy';\n\nconst { ForbiddenError } = errors;\n\nconst introspectionQueries = [\n  '__Schema',\n  '__Type',\n  '__Field',\n  '__InputValue',\n  '__EnumValue',\n  '__Directive',\n];\n\ntype GraphQLMiddleware = (\n  resolve: GraphQLFieldResolver<any, any>,\n  parents: unknown,\n  args: unknown,\n  context: unknown,\n  info: GraphQLResolveInfo\n) => any;\n\n/**\n * Get & parse middlewares definitions from the resolver's config\n * @param {object} resolverConfig\n * @param {object} strapi\n * @return {function[]}\n */\nconst parseMiddlewares = (resolverConfig: any, strapi: Core.Strapi): GraphQLMiddleware[] => {\n  const resolverMiddlewares = getOr([], 'middlewares', resolverConfig);\n\n  // TODO: [v4] to factorize with compose endpoints (routes)\n  return resolverMiddlewares.map(\n    (middleware: string | Core.MiddlewareHandler | { name: string; options: any }) => {\n      if (isFunction(middleware)) {\n        return middleware;\n      }\n\n      if (typeof middleware === 'string') {\n        return strapi.middleware(middleware);\n      }\n\n      if (typeof middleware === 'object') {\n        const { name, options = {} } = middleware;\n\n        return strapi.middleware(name)(options, { strapi });\n      }\n\n      throw new Error(\n        `Invalid middleware type, expected (function,string,object), received ${typeof middleware}`\n      );\n    }\n  );\n};\n\n/**\n * Wrap the schema's resolvers if they've been\n * customized using the GraphQL extension service\n * @param {object} options\n * @param {GraphQLSchema} options.schema\n * @param {object} options.strapi\n * @param {object} options.extension\n * @return {GraphQLSchema}\n */\nconst wrapResolvers = ({\n  schema,\n  strapi,\n  extension = {},\n}: {\n  schema: GraphQLSchema;\n  strapi: Core.Strapi;\n  extension: any;\n}) => {\n  // Get all the registered resolvers configuration\n  const { resolversConfig = {} } = extension;\n\n  // Fields filters\n  const isValidFieldName = (field: string) => !field.startsWith('__');\n\n  const typeMap = schema.getTypeMap();\n\n  Object.entries(typeMap).forEach(([type, definition]) => {\n    const isGraphQLObjectType = definition instanceof GraphQLObjectType;\n    const isIgnoredType = introspectionQueries.includes(type);\n\n    if (!isGraphQLObjectType || isIgnoredType) {\n      return;\n    }\n\n    const fields = definition.getFields();\n    const fieldsToProcess = Object.entries(fields).filter(([field]) => isValidFieldName(field));\n\n    for (const [fieldName, fieldDefinition] of fieldsToProcess) {\n      const defaultResolver = get(fieldName);\n\n      const path = `${type}.${fieldName}`;\n      const resolverConfig = getOr({}, path, resolversConfig);\n\n      const { resolve: baseResolver = defaultResolver } = fieldDefinition;\n\n      // Parse & initialize the middlewares\n      const middlewares = parseMiddlewares(resolverConfig, strapi);\n\n      // Generate the policy middleware\n      const policyMiddleware = createPoliciesMiddleware(resolverConfig, { strapi });\n\n      // Add the policyMiddleware at the end of the middlewares collection\n      middlewares.push(policyMiddleware);\n\n      // Bind every middleware to the next one\n      const boundMiddlewares = middlewares.map((middleware, index, collection) => {\n        return (parents: unknown, args: unknown, context: unknown, info: GraphQLResolveInfo) =>\n          middleware(\n            // Make sure the last middleware in the list calls the baseResolver\n            index >= collection.length - 1 ? baseResolver : boundMiddlewares[index + 1],\n            parents,\n            args,\n            context,\n            info\n          );\n      });\n\n      /**\n       * GraphQL authorization flow\n       * @param {object} context\n       * @return {Promise<void>}\n       */\n      const authorize = async ({ context }: any) => {\n        const authConfig = get('auth', resolverConfig);\n        const authContext = get('state.auth', context);\n\n        const isValidType = ['Mutation', 'Query', 'Subscription'].includes(type);\n        const hasConfig = !isNil(authConfig);\n\n        const isAuthDisabled = authConfig === false;\n\n        if ((isValidType || hasConfig) && !isAuthDisabled) {\n          try {\n            await strapi.auth.verify(authContext, authConfig);\n          } catch (error) {\n            throw new ForbiddenError();\n          }\n        }\n      };\n\n      /**\n       * Base resolver wrapper that handles authorization, middlewares & policies\n       * @return {Promise<any>}\n       */\n      fieldDefinition.resolve = async (parent, args, context, info) => {\n        await authorize({ context });\n\n        // Execute middlewares (including the policy middleware which will always be included)\n        return first(boundMiddlewares)!(parent, args, context, info);\n      };\n    }\n  });\n\n  return schema;\n};\n\nexport { wrapResolvers };\n"],"names":["ForbiddenError","errors","introspectionQueries","parseMiddlewares","resolverConfig","strapi","resolverMiddlewares","getOr","map","middleware","isFunction","name","options","Error","wrapResolvers","schema","extension","resolversConfig","isValidFieldName","field","startsWith","typeMap","getTypeMap","Object","entries","forEach","type","definition","isGraphQLObjectType","GraphQLObjectType","isIgnoredType","includes","fields","getFields","fieldsToProcess","filter","fieldName","fieldDefinition","defaultResolver","get","path","resolve","baseResolver","middlewares","policyMiddleware","createPoliciesMiddleware","push","boundMiddlewares","index","collection","parents","args","context","info","length","authorize","authConfig","authContext","isValidType","hasConfig","isNil","isAuthDisabled","auth","verify","error","parent","first"],"mappings":"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"}