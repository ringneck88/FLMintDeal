{"version":3,"file":"polymorphic.mjs","sources":["../../../../../server/src/services/content-api/register-functions/polymorphic.ts"],"sourcesContent":["import { unionType } from 'nexus';\nimport type { Struct } from '@strapi/types';\nimport type { Context } from '../../types';\n\nconst registerPolymorphicContentType = (\n  contentType: Struct.Schema,\n  { registry, strapi }: Context\n) => {\n  const { service: getService } = strapi.plugin('graphql');\n\n  const {\n    naming,\n    attributes: { isMorphRelation },\n  } = getService('utils');\n  const { KINDS } = getService('constants');\n\n  const { attributes = {} } = contentType;\n\n  // Isolate its polymorphic attributes\n  const morphAttributes = Object.entries(attributes).filter(([, attribute]) =>\n    isMorphRelation(attribute)\n  );\n\n  // For each one of those polymorphic attribute\n  for (const [attributeName, attribute] of morphAttributes) {\n    const name = naming.getMorphRelationTypeName(contentType, attributeName);\n    const { target } = attribute as any;\n\n    // Ignore those whose target is not an array\n    if (!Array.isArray(target)) {\n      continue;\n    }\n\n    // Transform target UIDs into types names\n    const members = target\n      // Get content types definitions\n      .map((uid) => strapi.getModel(uid))\n      // Resolve types names\n      .map((contentType) => naming.getTypeName(contentType));\n\n    // Register the new polymorphic union type\n    registry.register(\n      name,\n\n      unionType({\n        name,\n\n        resolveType(obj) {\n          const contentType = strapi.getModel(obj.__type);\n\n          if (!contentType) {\n            return null;\n          }\n\n          if (contentType.modelType === 'component') {\n            return naming.getComponentName(contentType);\n          }\n\n          return naming.getTypeName(contentType);\n        },\n\n        definition(t) {\n          t.members(...members);\n        },\n      }),\n\n      { kind: KINDS.morph, contentType, attributeName }\n    );\n  }\n};\n\nexport { registerPolymorphicContentType };\n"],"names":["registerPolymorphicContentType","contentType","registry","strapi","service","getService","plugin","naming","attributes","isMorphRelation","KINDS","morphAttributes","Object","entries","filter","attribute","attributeName","name","getMorphRelationTypeName","target","Array","isArray","members","map","uid","getModel","getTypeName","register","unionType","resolveType","obj","__type","modelType","getComponentName","definition","t","kind","morph"],"mappings":";;AAIA,MAAMA,iCAAiC,CACrCC,WAAAA,EACA,EAAEC,QAAQ,EAAEC,MAAM,EAAW,GAAA;AAE7B,IAAA,MAAM,EAAEC,OAASC,EAAAA,UAAU,EAAE,GAAGF,MAAAA,CAAOG,MAAM,CAAC,SAAA,CAAA;IAE9C,MAAM,EACJC,MAAM,EACNC,UAAAA,EAAY,EAAEC,eAAe,EAAE,EAChC,GAAGJ,UAAW,CAAA,OAAA,CAAA;AACf,IAAA,MAAM,EAAEK,KAAK,EAAE,GAAGL,UAAW,CAAA,WAAA,CAAA;AAE7B,IAAA,MAAM,EAAEG,UAAAA,GAAa,EAAE,EAAE,GAAGP,WAAAA;;IAG5B,MAAMU,eAAAA,GAAkBC,MAAOC,CAAAA,OAAO,CAACL,UAAAA,CAAAA,CAAYM,MAAM,CAAC,CAAC,GAAGC,SAAU,CAAA,GACtEN,eAAgBM,CAAAA,SAAAA,CAAAA,CAAAA;;AAIlB,IAAA,KAAK,MAAM,CAACC,aAAeD,EAAAA,SAAAA,CAAU,IAAIJ,eAAiB,CAAA;AACxD,QAAA,MAAMM,IAAOV,GAAAA,MAAAA,CAAOW,wBAAwB,CAACjB,WAAae,EAAAA,aAAAA,CAAAA;QAC1D,MAAM,EAAEG,MAAM,EAAE,GAAGJ,SAAAA;;AAGnB,QAAA,IAAI,CAACK,KAAAA,CAAMC,OAAO,CAACF,MAAS,CAAA,EAAA;AAC1B,YAAA;AACF;;QAGA,MAAMG,OAAAA,GAAUH,MACd;AACCI,SAAAA,GAAG,CAAC,CAACC,GAAAA,GAAQrB,OAAOsB,QAAQ,CAACD,KAC9B;AACCD,SAAAA,GAAG,CAAC,CAACtB,WAAgBM,GAAAA,MAAAA,CAAOmB,WAAW,CAACzB,WAAAA,CAAAA,CAAAA;;QAG3CC,QAASyB,CAAAA,QAAQ,CACfV,IAAAA,EAEAW,SAAU,CAAA;AACRX,YAAAA,IAAAA;AAEAY,YAAAA,WAAAA,CAAAA,CAAYC,GAAG,EAAA;AACb,gBAAA,MAAM7B,WAAcE,GAAAA,MAAAA,CAAOsB,QAAQ,CAACK,IAAIC,MAAM,CAAA;AAE9C,gBAAA,IAAI,CAAC9B,WAAa,EAAA;oBAChB,OAAO,IAAA;AACT;gBAEA,IAAIA,WAAAA,CAAY+B,SAAS,KAAK,WAAa,EAAA;oBACzC,OAAOzB,MAAAA,CAAO0B,gBAAgB,CAAChC,WAAAA,CAAAA;AACjC;gBAEA,OAAOM,MAAAA,CAAOmB,WAAW,CAACzB,WAAAA,CAAAA;AAC5B,aAAA;AAEAiC,YAAAA,UAAAA,CAAAA,CAAWC,CAAC,EAAA;AACVA,gBAAAA,CAAAA,CAAEb,OAAO,CAAIA,GAAAA,OAAAA,CAAAA;AACf;SAGF,CAAA,EAAA;AAAEc,YAAAA,IAAAA,EAAM1B,MAAM2B,KAAK;AAAEpC,YAAAA,WAAAA;AAAae,YAAAA;AAAc,SAAA,CAAA;AAEpD;AACF;;;;"}