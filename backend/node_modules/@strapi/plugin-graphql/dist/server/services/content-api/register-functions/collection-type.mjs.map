{"version":3,"file":"collection-type.mjs","sources":["../../../../../server/src/services/content-api/register-functions/collection-type.ts"],"sourcesContent":["import type { Core, Struct } from '@strapi/types';\nimport type { TypeRegistry } from '../../type-registry';\n\nconst registerCollectionType = (\n  contentType: Struct.CollectionTypeSchema,\n  {\n    registry,\n    strapi,\n    builders,\n  }: {\n    registry: TypeRegistry;\n    strapi: Core.Strapi;\n    builders: any;\n  }\n) => {\n  const { service: getService } = strapi.plugin('graphql');\n\n  const { naming } = getService('utils');\n  const { KINDS } = getService('constants');\n\n  const extension = getService('extension');\n\n  // Types name (as string)\n  const types = {\n    base: naming.getTypeName(contentType),\n    entity: naming.getEntityName(contentType),\n    response: naming.getEntityResponseName(contentType),\n    responseCollection: naming.getEntityResponseCollectionName(contentType),\n    relationResponseCollection: naming.getRelationResponseCollectionName(contentType),\n    queries: naming.getEntityQueriesTypeName(contentType),\n    mutations: naming.getEntityMutationsTypeName(contentType),\n  };\n\n  const getConfig = (kind: string) => ({ kind, contentType });\n\n  // Type definition\n  registry.register(types.base, builders.buildTypeDefinition(contentType), getConfig(KINDS.type));\n\n  // Higher level entity definition\n  registry.register(\n    types.entity,\n    builders.buildEntityDefinition(contentType),\n    getConfig(KINDS.entity)\n  );\n\n  // Responses definition\n  registry.register(\n    types.response,\n    builders.buildResponseDefinition(contentType),\n    getConfig(KINDS.entityResponse)\n  );\n\n  registry.register(\n    types.responseCollection,\n    builders.buildResponseCollectionDefinition(contentType),\n    getConfig(KINDS.entityResponseCollection)\n  );\n\n  registry.register(\n    types.relationResponseCollection,\n    builders.buildRelationResponseCollectionDefinition(contentType),\n    getConfig(KINDS.relationResponseCollection)\n  );\n\n  if (extension.shadowCRUD(contentType.uid).areQueriesEnabled()) {\n    // Query extensions\n    registry.register(\n      types.queries,\n      builders.buildCollectionTypeQueries(contentType),\n      getConfig(KINDS.query)\n    );\n  }\n\n  if (extension.shadowCRUD(contentType.uid).areMutationsEnabled()) {\n    // Mutation extensions\n    registry.register(\n      types.mutations,\n      builders.buildCollectionTypeMutations(contentType),\n      getConfig(KINDS.mutation)\n    );\n  }\n};\n\nexport { registerCollectionType };\n"],"names":["registerCollectionType","contentType","registry","strapi","builders","service","getService","plugin","naming","KINDS","extension","types","base","getTypeName","entity","getEntityName","response","getEntityResponseName","responseCollection","getEntityResponseCollectionName","relationResponseCollection","getRelationResponseCollectionName","queries","getEntityQueriesTypeName","mutations","getEntityMutationsTypeName","getConfig","kind","register","buildTypeDefinition","type","buildEntityDefinition","buildResponseDefinition","entityResponse","buildResponseCollectionDefinition","entityResponseCollection","buildRelationResponseCollectionDefinition","shadowCRUD","uid","areQueriesEnabled","buildCollectionTypeQueries","query","areMutationsEnabled","buildCollectionTypeMutations","mutation"],"mappings":"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"}