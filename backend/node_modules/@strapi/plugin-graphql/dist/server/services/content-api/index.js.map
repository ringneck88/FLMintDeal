{"version":3,"file":"index.js","sources":["../../../../server/src/services/content-api/index.ts"],"sourcesContent":["import { pruneSchema } from '@graphql-tools/utils';\nimport { makeSchema } from 'nexus';\nimport { prop, startsWith } from 'lodash/fp';\nimport type * as Nexus from 'nexus';\nimport type { Core, Struct } from '@strapi/types';\n\nimport { wrapResolvers } from './wrap-resolvers';\nimport {\n  registerSingleType,\n  registerCollectionType,\n  registerComponent,\n  registerScalars,\n  registerInternals,\n  registerPolymorphicContentType,\n  registerEnumsDefinition,\n  registerInputsDefinition,\n  registerFiltersDefinition,\n  registerDynamicZonesDefinition,\n} from './register-functions';\nimport { TypeRegistry } from '../type-registry';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const { mergeSchemas, addResolversToSchema } = require('@graphql-tools/schema');\n\n  const { service: getGraphQLService } = strapi.plugin('graphql');\n  const { config } = strapi.plugin('graphql');\n\n  const { KINDS, GENERIC_MORPH_TYPENAME } = getGraphQLService('constants');\n  const extensionService = getGraphQLService('extension');\n\n  // Type Registry\n  let registry: any;\n  // Builders Instances\n  let builders: any;\n\n  const buildSchema = () => {\n    const isShadowCRUDEnabled = !!config('shadowCRUD');\n\n    // Create a new empty type registry\n    registry = getGraphQLService('type-registry').new();\n\n    // Reset the builders instances associated to the\n    // content-api, and link the new type registry\n    builders = getGraphQLService('builders').new('content-api', registry);\n\n    registerScalars({ registry, strapi });\n    registerInternals({ registry, strapi });\n\n    if (isShadowCRUDEnabled) {\n      shadowCRUD();\n    }\n\n    // Build a merged schema from both Nexus types & SDL type definitions\n    const schema = buildMergedSchema({ registry });\n\n    // Generate the extension configuration for the content API.\n    // This extension instance needs to be generated after the Nexus schema's\n    // generation, so that configurations created during types definitions\n    // can be registered before being used in the wrap resolvers operation\n    const extension = extensionService.generate({ typeRegistry: registry });\n\n    // Add the extension's resolvers to the final schema\n    const schemaWithResolvers = addResolversToSchema({\n      schema,\n      resolvers: extension.resolvers,\n    });\n\n    // Create a configuration object for the artifacts generation\n    const outputs: Nexus.core.SchemaConfig['outputs'] = {\n      schema: config('artifacts.schema', false),\n      typegen: config('artifacts.typegen', false),\n    };\n\n    const currentEnv = strapi.config.get('environment');\n\n    const nexusSchema = makeSchema({\n      types: [],\n      // Build the schema from the merged GraphQL schema.\n      // Since we're passing the schema to the mergeSchema property, it'll transform our SDL type definitions\n      // into Nexus type definition, thus allowing them to be handled by  Nexus plugins & other processing\n      mergeSchema: { schema: schemaWithResolvers },\n\n      // Apply user-defined plugins\n      plugins: extension.plugins,\n\n      // Whether to generate artifacts (GraphQL schema, TS types definitions) or not.\n      // By default, we generate artifacts only on development environment\n      shouldGenerateArtifacts: config('generateArtifacts', currentEnv === 'development'),\n\n      // Artifacts generation configuration\n      outputs,\n    });\n\n    // Wrap resolvers if needed (auth, middlewares, policies...) as configured in the extension\n    const wrappedNexusSchema = wrapResolvers({ schema: nexusSchema, strapi, extension });\n\n    // Prune schema, remove unused types\n    // eg: removes registered subscriptions if they're disabled in the config)\n    const prunedNexusSchema = pruneSchema(wrappedNexusSchema);\n\n    return prunedNexusSchema;\n  };\n\n  const buildMergedSchema = ({ registry }: { registry: TypeRegistry }) => {\n    // Here we extract types, plugins & typeDefs from a temporary generated\n    // extension since there won't be any addition allowed after schemas generation\n    const { types, typeDefs = [] } = extensionService.generate({ typeRegistry: registry });\n\n    // Nexus schema built with user-defined & shadow CRUD auto generated Nexus types\n    const nexusSchema = makeSchema({ types: [registry.definitions, types] });\n\n    // Merge type definitions with the Nexus schema\n    return mergeSchemas({\n      typeDefs,\n      // Give access to the shadowCRUD & nexus based types\n      // Note: This is necessary so that types defined in SDL can reference types defined with Nexus\n      schemas: [nexusSchema],\n    });\n  };\n\n  const shadowCRUD = () => {\n    const extensionService = getGraphQLService('extension');\n\n    // Get every content type & component defined in Strapi\n    const contentTypes = [\n      ...Object.values(strapi.components),\n      ...Object.values(strapi.contentTypes),\n    ];\n\n    // Disable Shadow CRUD for admin content types\n    contentTypes\n      .map(prop('uid'))\n      .filter(startsWith('admin::'))\n      .forEach((uid) => extensionService.shadowCRUD(uid).disable());\n\n    const contentTypesWithShadowCRUD = contentTypes.filter((ct) =>\n      extensionService.shadowCRUD(ct.uid).isEnabled()\n    );\n\n    // Generate and register definitions for every content type\n    registerAPITypes(contentTypesWithShadowCRUD);\n\n    // Generate and register polymorphic types' definitions\n    registerMorphTypes(contentTypesWithShadowCRUD);\n  };\n\n  /**\n   * Register needed GraphQL types for every content type\n   * @param {object[]} contentTypes\n   */\n  const registerAPITypes = (contentTypes: Struct.Schema[]) => {\n    for (const contentType of contentTypes) {\n      const { modelType } = contentType;\n\n      const registerOptions = { registry, strapi, builders };\n\n      // Generate various types associated to the content type\n      // (enums, dynamic-zones, filters, inputs...)\n      registerEnumsDefinition(contentType, registerOptions);\n      registerDynamicZonesDefinition(contentType, registerOptions);\n      registerFiltersDefinition(contentType, registerOptions);\n      registerInputsDefinition(contentType, registerOptions);\n\n      // Generate & register component's definition\n      if (modelType === 'component') {\n        registerComponent(contentType, registerOptions);\n        continue;\n      }\n\n      const { kind } = contentType;\n\n      // Generate & register single type's definition\n      if (kind === 'singleType') {\n        registerSingleType(contentType as Struct.SingleTypeSchema, registerOptions);\n      }\n\n      // Generate & register collection type's definition\n      else if (kind === 'collectionType') {\n        registerCollectionType(contentType as Struct.CollectionTypeSchema, registerOptions);\n      }\n    }\n  };\n\n  const registerMorphTypes = (contentTypes: Struct.Schema[]) => {\n    // Create & register a union type that includes every type or component registered\n    const genericMorphType = builders.buildGenericMorphDefinition();\n    registry.register(GENERIC_MORPH_TYPENAME, genericMorphType, { kind: KINDS.morph });\n\n    for (const contentType of contentTypes) {\n      registerPolymorphicContentType(contentType, { registry, strapi });\n    }\n  };\n\n  return { buildSchema };\n};\n"],"names":["strapi","mergeSchemas","addResolversToSchema","require","service","getGraphQLService","plugin","config","KINDS","GENERIC_MORPH_TYPENAME","extensionService","registry","builders","buildSchema","isShadowCRUDEnabled","new","registerScalars","registerInternals","shadowCRUD","schema","buildMergedSchema","extension","generate","typeRegistry","schemaWithResolvers","resolvers","outputs","typegen","currentEnv","get","nexusSchema","makeSchema","types","mergeSchema","plugins","shouldGenerateArtifacts","wrappedNexusSchema","wrapResolvers","prunedNexusSchema","pruneSchema","typeDefs","definitions","schemas","contentTypes","Object","values","components","map","prop","filter","startsWith","forEach","uid","disable","contentTypesWithShadowCRUD","ct","isEnabled","registerAPITypes","registerMorphTypes","contentType","modelType","registerOptions","registerEnumsDefinition","registerDynamicZonesDefinition","registerFiltersDefinition","registerInputsDefinition","registerComponent","kind","registerSingleType","registerCollectionType","genericMorphType","buildGenericMorphDefinition","register","morph","registerPolymorphicContentType"],"mappings":"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"}