{"version":3,"file":"dynamic-zones.js","sources":["../../../../../server/src/services/content-api/register-functions/dynamic-zones.ts"],"sourcesContent":["import type { Core, Struct } from '@strapi/types';\nimport type { TypeRegistry } from '../../type-registry';\n\nconst registerDynamicZonesDefinition = (\n  contentType: Struct.Schema,\n  {\n    registry,\n    strapi,\n    builders,\n  }: {\n    registry: TypeRegistry;\n    strapi: Core.Strapi;\n    builders: any;\n  }\n) => {\n  const { service: getService } = strapi.plugin('graphql');\n\n  const {\n    naming,\n    attributes: { isDynamicZone },\n  } = getService('utils');\n  const { KINDS } = getService('constants');\n\n  const { attributes } = contentType;\n\n  const dynamicZoneAttributes = Object.keys(attributes).filter((attributeName) =>\n    isDynamicZone(attributes[attributeName])\n  );\n\n  for (const attributeName of dynamicZoneAttributes) {\n    const attribute = attributes[attributeName];\n    const dzName = naming.getDynamicZoneName(contentType, attributeName);\n    const dzInputName = naming.getDynamicZoneInputName(contentType, attributeName);\n\n    const [type, input] = builders.buildDynamicZoneDefinition(attribute, dzName, dzInputName);\n\n    const baseConfig = {\n      contentType,\n      attributeName,\n      attribute,\n    };\n\n    registry.register(dzName, type, { kind: KINDS.dynamicZone, ...baseConfig });\n    registry.register(dzInputName, input, { kind: KINDS.input, ...baseConfig });\n  }\n};\n\nexport { registerDynamicZonesDefinition };\n"],"names":["registerDynamicZonesDefinition","contentType","registry","strapi","builders","service","getService","plugin","naming","attributes","isDynamicZone","KINDS","dynamicZoneAttributes","Object","keys","filter","attributeName","attribute","dzName","getDynamicZoneName","dzInputName","getDynamicZoneInputName","type","input","buildDynamicZoneDefinition","baseConfig","register","kind","dynamicZone"],"mappings":";;AAGMA,MAAAA,8BAAAA,GAAiC,CACrCC,WACA,EAAA,EACEC,QAAQ,EACRC,MAAM,EACNC,QAAQ,EAKT,GAAA;AAED,IAAA,MAAM,EAAEC,OAASC,EAAAA,UAAU,EAAE,GAAGH,MAAAA,CAAOI,MAAM,CAAC,SAAA,CAAA;IAE9C,MAAM,EACJC,MAAM,EACNC,UAAAA,EAAY,EAAEC,aAAa,EAAE,EAC9B,GAAGJ,UAAW,CAAA,OAAA,CAAA;AACf,IAAA,MAAM,EAAEK,KAAK,EAAE,GAAGL,UAAW,CAAA,WAAA,CAAA;IAE7B,MAAM,EAAEG,UAAU,EAAE,GAAGR,WAAAA;AAEvB,IAAA,MAAMW,qBAAwBC,GAAAA,MAAAA,CAAOC,IAAI,CAACL,UAAYM,CAAAA,CAAAA,MAAM,CAAC,CAACC,aAC5DN,GAAAA,aAAAA,CAAcD,UAAU,CAACO,aAAc,CAAA,CAAA,CAAA;IAGzC,KAAK,MAAMA,iBAAiBJ,qBAAuB,CAAA;QACjD,MAAMK,SAAAA,GAAYR,UAAU,CAACO,aAAc,CAAA;AAC3C,QAAA,MAAME,MAASV,GAAAA,MAAAA,CAAOW,kBAAkB,CAAClB,WAAae,EAAAA,aAAAA,CAAAA;AACtD,QAAA,MAAMI,WAAcZ,GAAAA,MAAAA,CAAOa,uBAAuB,CAACpB,WAAae,EAAAA,aAAAA,CAAAA;QAEhE,MAAM,CAACM,MAAMC,KAAM,CAAA,GAAGnB,SAASoB,0BAA0B,CAACP,WAAWC,MAAQE,EAAAA,WAAAA,CAAAA;AAE7E,QAAA,MAAMK,UAAa,GAAA;AACjBxB,YAAAA,WAAAA;AACAe,YAAAA,aAAAA;AACAC,YAAAA;AACF,SAAA;QAEAf,QAASwB,CAAAA,QAAQ,CAACR,MAAAA,EAAQI,IAAM,EAAA;AAAEK,YAAAA,IAAAA,EAAMhB,MAAMiB,WAAW;AAAE,YAAA,GAAGH;AAAW,SAAA,CAAA;QACzEvB,QAASwB,CAAAA,QAAQ,CAACN,WAAAA,EAAaG,KAAO,EAAA;AAAEI,YAAAA,IAAAA,EAAMhB,MAAMY,KAAK;AAAE,YAAA,GAAGE;AAAW,SAAA,CAAA;AAC3E;AACF;;;;"}