{"version":3,"file":"date.mjs","sources":["../../../../../server/src/services/internals/scalars/date.ts"],"sourcesContent":["import { GraphQLDate } from 'graphql-scalars';\n\nconst parseAndCast =\n  (parseFn: any) =>\n  (...args: any[]) => {\n    const parsedValue = parseFn(...args);\n\n    if (parsedValue instanceof Date) {\n      return parsedValue.toISOString().split('T')[0];\n    }\n\n    return parsedValue;\n  };\n\n// GraphQLDate casts the date string to new Date, we want to keep it as a string so we cast it back to a string\n// see https://github.com/excitement-engineer/graphql-iso-date/issues/106\nGraphQLDate.parseValue = parseAndCast(GraphQLDate.parseValue);\nGraphQLDate.parseLiteral = parseAndCast(GraphQLDate.parseLiteral);\n\nexport default GraphQLDate;\n"],"names":["parseAndCast","parseFn","args","parsedValue","Date","toISOString","split","GraphQLDate","parseValue","parseLiteral"],"mappings":";;;AAEA,MAAMA,YACJ,GAAA,CAACC,OACD,GAAA,CAAC,GAAGC,IAAAA,GAAAA;AACF,QAAA,MAAMC,cAAcF,OAAWC,CAAAA,GAAAA,IAAAA,CAAAA;AAE/B,QAAA,IAAIC,uBAAuBC,IAAM,EAAA;AAC/B,YAAA,OAAOD,YAAYE,WAAW,EAAA,CAAGC,KAAK,CAAC,GAAA,CAAI,CAAC,CAAE,CAAA;AAChD;QAEA,OAAOH,WAAAA;AACT,KAAA;AAEF;AACA;AACAI,WAAAA,CAAYC,UAAU,GAAGR,YAAaO,CAAAA,WAAAA,CAAYC,UAAU,CAAA;AAC5DD,WAAAA,CAAYE,YAAY,GAAGT,YAAaO,CAAAA,WAAAA,CAAYE,YAAY,CAAA"}