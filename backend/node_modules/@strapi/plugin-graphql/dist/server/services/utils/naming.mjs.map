{"version":3,"file":"naming.mjs","sources":["../../../../server/src/services/utils/naming.ts"],"sourcesContent":["import { camelCase, upperFirst, lowerFirst, pipe, get } from 'lodash/fp';\nimport { singular } from 'pluralize';\nimport { errors } from '@strapi/utils';\nimport type { Struct, Schema } from '@strapi/types';\nimport type { Context } from '../types';\n\nconst { ApplicationError } = errors;\n\nexport default ({ strapi }: Context) => {\n  /**\n   * Build a type name for a enum based on a content type & an attribute name\n   */\n  const getEnumName = (contentType: Struct.Schema, attributeName: string) => {\n    const { attributes } = contentType;\n    const { enumName } = attributes[attributeName] as Schema.Attribute.Enumeration;\n    const { modelType } = contentType;\n\n    const typeName =\n      modelType === 'component' ? getComponentName(contentType) : getTypeName(contentType);\n\n    const defaultEnumName = `ENUM_${typeName.toUpperCase()}_${attributeName.toUpperCase()}`;\n\n    return enumName || defaultEnumName;\n  };\n\n  /**\n   * Build the base type name for a given content type\n   */\n  const getTypeName = (\n    contentType: Struct.Schema,\n    {\n      plurality = 'singular',\n    }: {\n      plurality?: 'singular' | 'plural';\n    } = {}\n  ) => {\n    const plugin = get('plugin', contentType);\n    const modelName = get('modelName', contentType);\n    const name =\n      plurality === 'singular'\n        ? get('info.singularName', contentType)\n        : get('info.pluralName', contentType);\n\n    const transformedPlugin = plugin ? upperFirst(camelCase(plugin)) : '';\n    const transformedModelName = upperFirst(camelCase(name || singular(modelName)));\n\n    return `${transformedPlugin}${transformedModelName}`;\n  };\n\n  /**\n   * Build the entity's type name for a given content type\n   */\n  const getEntityName = (contentType: Struct.Schema) => {\n    return `${getTypeName(contentType)}Entity`;\n  };\n\n  /**\n   * Build the entity meta type name for a given content type\n   */\n  const getEntityMetaName = (contentType: Struct.Schema) => {\n    return `${getEntityName(contentType)}Meta`;\n  };\n\n  /**\n   * Build the entity response's type name for a given content type\n   */\n  const getEntityResponseName = (contentType: Struct.Schema) => {\n    return `${getEntityName(contentType)}Response`;\n  };\n\n  /**\n   * Build the entity response collection's type name for a given content type\n   */\n  const getEntityResponseCollectionName = (contentType: Struct.Schema) => {\n    return `${getEntityName(contentType)}ResponseCollection`;\n  };\n\n  /**\n   * Build the relation response collection's type name for a given content type\n   */\n  const getRelationResponseCollectionName = (contentType: Struct.Schema) => {\n    return `${getTypeName(contentType)}RelationResponseCollection`;\n  };\n\n  /**\n   * Build a component type name based on its definition\n   */\n  const getComponentName = (contentType: Struct.Schema) => {\n    return contentType.globalId;\n  };\n\n  /**\n   * Build a component type name based on a content type's attribute\n   */\n  const getComponentNameFromAttribute = (attribute: Schema.Attribute.Component) => {\n    return strapi.components[attribute.component].globalId;\n  };\n\n  /**\n   * Build a dynamic zone type name based on a content type and an attribute name\n   */\n  const getDynamicZoneName = (contentType: Struct.Schema, attributeName: string) => {\n    const typeName = getTypeName(contentType);\n    const dzName = upperFirst(camelCase(attributeName));\n    const suffix = 'DynamicZone';\n\n    return `${typeName}${dzName}${suffix}`;\n  };\n\n  /**\n   * Build a dynamic zone input type name based on a content type and an attribute name\n   */\n  const getDynamicZoneInputName = (contentType: Struct.Schema, attributeName: string) => {\n    const dzName = getDynamicZoneName(contentType, attributeName);\n\n    return `${dzName}Input`;\n  };\n\n  /**\n   * Build a component input type name based on a content type and an attribute name\n   */\n  const getComponentInputName = (contentType: Struct.Schema) => {\n    const componentName = getComponentName(contentType);\n\n    return `${componentName}Input`;\n  };\n\n  /**\n   * Build a content type input name based on a content type and an attribute name\n   */\n  const getContentTypeInputName = (contentType: Struct.Schema) => {\n    const typeName = getTypeName(contentType);\n\n    return `${typeName}Input`;\n  };\n\n  /**\n   * Build the queries type name for a given content type\n   */\n  const getEntityQueriesTypeName = (contentType: Struct.Schema) => {\n    return `${getEntityName(contentType)}Queries`;\n  };\n\n  /**\n   * Build the mutations type name for a given content type\n   */\n  const getEntityMutationsTypeName = (contentType: Struct.Schema) => {\n    return `${getEntityName(contentType)}Mutations`;\n  };\n\n  /**\n   * Build the filters type name for a given content type\n   */\n  const getFiltersInputTypeName = (contentType: Struct.Schema) => {\n    const isComponent = contentType.modelType === 'component';\n\n    const baseName = isComponent ? getComponentName(contentType) : getTypeName(contentType);\n\n    return `${baseName}FiltersInput`;\n  };\n\n  /**\n   * Build a filters type name for a given GraphQL scalar type\n   */\n  const getScalarFilterInputTypeName = (scalarType: string) => {\n    return `${scalarType}FilterInput`;\n  };\n\n  /**\n   * Build a type name for a given content type & polymorphic attribute\n   */\n  const getMorphRelationTypeName = (contentType: Struct.Schema, attributeName: string) => {\n    const typeName = getTypeName(contentType);\n    const formattedAttr = upperFirst(camelCase(attributeName));\n\n    return `${typeName}${formattedAttr}Morph`;\n  };\n\n  /**\n   * Build a custom type name generator with different customization options\n   */\n  const buildCustomTypeNameGenerator = (options: {\n    prefix?: string;\n    suffix?: string;\n    firstLetterCase?: 'upper' | 'lower';\n    plurality?: 'plural' | 'singular';\n  }) => {\n    // todo[v4]: use singularName & pluralName is available\n    const { prefix = '', suffix = '', plurality = 'singular', firstLetterCase = 'upper' } = options;\n\n    if (!['plural', 'singular'].includes(plurality)) {\n      throw new ApplicationError(\n        `\"plurality\" param must be either \"plural\" or \"singular\", but got: \"${plurality}\"`\n      );\n    }\n\n    const getCustomTypeName = pipe(\n      (ct) => getTypeName(ct, { plurality }),\n      firstLetterCase === 'upper' ? upperFirst : lowerFirst\n    );\n\n    return (contentType: Struct.Schema) => `${prefix}${getCustomTypeName(contentType)}${suffix}`;\n  };\n\n  const getFindQueryName = buildCustomTypeNameGenerator({\n    plurality: 'plural',\n    firstLetterCase: 'lower',\n  });\n\n  const getFindConnectionQueryName = (contentType: Struct.Schema) => {\n    return `${getFindQueryName(contentType)}_connection`;\n  };\n\n  const getFindOneQueryName = buildCustomTypeNameGenerator({ firstLetterCase: 'lower' });\n\n  const getCreateMutationTypeName = buildCustomTypeNameGenerator({\n    prefix: 'create',\n    firstLetterCase: 'upper',\n  });\n\n  const getUpdateMutationTypeName = buildCustomTypeNameGenerator({\n    prefix: 'update',\n    firstLetterCase: 'upper',\n  });\n\n  const getDeleteMutationTypeName = buildCustomTypeNameGenerator({\n    prefix: 'delete',\n    firstLetterCase: 'upper',\n  });\n\n  return {\n    getEnumName,\n    getTypeName,\n    getEntityName,\n    getEntityMetaName,\n    getEntityResponseName,\n    getEntityResponseCollectionName,\n    getRelationResponseCollectionName,\n    getComponentName,\n    getComponentNameFromAttribute,\n    getDynamicZoneName,\n    getDynamicZoneInputName,\n    getComponentInputName,\n    getContentTypeInputName,\n    getEntityQueriesTypeName,\n    getEntityMutationsTypeName,\n    getFiltersInputTypeName,\n    getScalarFilterInputTypeName,\n    getMorphRelationTypeName,\n    buildCustomTypeNameGenerator,\n    getFindQueryName,\n    getFindOneQueryName,\n    getCreateMutationTypeName,\n    getUpdateMutationTypeName,\n    getDeleteMutationTypeName,\n    getFindConnectionQueryName,\n  };\n};\n"],"names":["ApplicationError","errors","strapi","getEnumName","contentType","attributeName","attributes","enumName","modelType","typeName","getComponentName","getTypeName","defaultEnumName","toUpperCase","plurality","plugin","get","modelName","name","transformedPlugin","upperFirst","camelCase","transformedModelName","singular","getEntityName","getEntityMetaName","getEntityResponseName","getEntityResponseCollectionName","getRelationResponseCollectionName","globalId","getComponentNameFromAttribute","attribute","components","component","getDynamicZoneName","dzName","suffix","getDynamicZoneInputName","getComponentInputName","componentName","getContentTypeInputName","getEntityQueriesTypeName","getEntityMutationsTypeName","getFiltersInputTypeName","isComponent","baseName","getScalarFilterInputTypeName","scalarType","getMorphRelationTypeName","formattedAttr","buildCustomTypeNameGenerator","options","prefix","firstLetterCase","includes","getCustomTypeName","pipe","ct","lowerFirst","getFindQueryName","getFindConnectionQueryName","getFindOneQueryName","getCreateMutationTypeName","getUpdateMutationTypeName","getDeleteMutationTypeName"],"mappings":"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"}