{"version":3,"file":"attributes.js","sources":["../../../../server/src/services/utils/attributes.ts"],"sourcesContent":["import { propEq } from 'lodash/fp';\nimport type { Schema } from '@strapi/types';\nimport type { Context } from '../types';\n\nexport default ({ strapi }: Context) => {\n  /**\n   * Check if the given attribute is a Strapi scalar\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isStrapiScalar = (attribute: Schema.Attribute.AnyAttribute) => {\n    return strapi.plugin('graphql').service('constants').STRAPI_SCALARS.includes(attribute.type);\n  };\n\n  /**\n   * Check if the given attribute is a GraphQL scalar\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isGraphQLScalar = (attribute: Schema.Attribute.AnyAttribute) => {\n    return strapi.plugin('graphql').service('constants').GRAPHQL_SCALARS.includes(attribute.type);\n  };\n\n  /**\n   * Check if the given attribute is a polymorphic relation\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isMorphRelation = (attribute: Schema.Attribute.AnyAttribute) => {\n    return attribute.type === 'relation' && attribute.relation.includes('morph');\n  };\n\n  /**\n   * Check if the given attribute is a media\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isMedia = propEq('type', 'media');\n\n  /**\n   * Check if the given attribute is a relation\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isRelation = propEq('type', 'relation');\n\n  /**\n   * Check if the given attribute is an enum\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isEnumeration = propEq('type', 'enumeration');\n\n  /**\n   * Check if the given attribute is a component\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isComponent = propEq('type', 'component');\n\n  /**\n   * Check if the given attribute is a dynamic zone\n   * @param {object} attribute\n   * @return {boolean}\n   */\n  const isDynamicZone = propEq('type', 'dynamiczone');\n\n  return {\n    isStrapiScalar,\n    isGraphQLScalar,\n    isMorphRelation,\n    isMedia,\n    isRelation,\n    isEnumeration,\n    isComponent,\n    isDynamicZone,\n  };\n};\n"],"names":["strapi","isStrapiScalar","attribute","plugin","service","STRAPI_SCALARS","includes","type","isGraphQLScalar","GRAPHQL_SCALARS","isMorphRelation","relation","isMedia","propEq","isRelation","isEnumeration","isComponent","isDynamicZone"],"mappings":";;;;AAIA,iBAAe,CAAA,CAAC,EAAEA,MAAM,EAAW,GAAA;AACjC;;;;MAKA,MAAMC,iBAAiB,CAACC,SAAAA,GAAAA;AACtB,QAAA,OAAOF,MAAOG,CAAAA,MAAM,CAAC,SAAA,CAAA,CAAWC,OAAO,CAAC,WAAaC,CAAAA,CAAAA,cAAc,CAACC,QAAQ,CAACJ,SAAAA,CAAUK,IAAI,CAAA;AAC7F,KAAA;AAEA;;;;MAKA,MAAMC,kBAAkB,CAACN,SAAAA,GAAAA;AACvB,QAAA,OAAOF,MAAOG,CAAAA,MAAM,CAAC,SAAA,CAAA,CAAWC,OAAO,CAAC,WAAaK,CAAAA,CAAAA,eAAe,CAACH,QAAQ,CAACJ,SAAAA,CAAUK,IAAI,CAAA;AAC9F,KAAA;AAEA;;;;MAKA,MAAMG,kBAAkB,CAACR,SAAAA,GAAAA;QACvB,OAAOA,SAAAA,CAAUK,IAAI,KAAK,UAAA,IAAcL,UAAUS,QAAQ,CAACL,QAAQ,CAAC,OAAA,CAAA;AACtE,KAAA;AAEA;;;;MAKA,MAAMM,OAAUC,GAAAA,SAAAA,CAAO,MAAQ,EAAA,OAAA,CAAA;AAE/B;;;;MAKA,MAAMC,UAAaD,GAAAA,SAAAA,CAAO,MAAQ,EAAA,UAAA,CAAA;AAElC;;;;MAKA,MAAME,aAAgBF,GAAAA,SAAAA,CAAO,MAAQ,EAAA,aAAA,CAAA;AAErC;;;;MAKA,MAAMG,WAAcH,GAAAA,SAAAA,CAAO,MAAQ,EAAA,WAAA,CAAA;AAEnC;;;;MAKA,MAAMI,aAAgBJ,GAAAA,SAAAA,CAAO,MAAQ,EAAA,aAAA,CAAA;IAErC,OAAO;AACLZ,QAAAA,cAAAA;AACAO,QAAAA,eAAAA;AACAE,QAAAA,eAAAA;AACAE,QAAAA,OAAAA;AACAE,QAAAA,UAAAA;AACAC,QAAAA,aAAAA;AACAC,QAAAA,WAAAA;AACAC,QAAAA;AACF,KAAA;AACF,CAAA;;;;"}