{"version":3,"file":"input.js","sources":["../../../../server/src/services/builders/input.ts"],"sourcesContent":["import { inputObjectType, nonNull } from 'nexus';\nimport { contentTypes } from '@strapi/utils';\nimport type { Struct } from '@strapi/types';\nimport type { Context } from '../types';\n\nconst { isWritableAttribute } = contentTypes;\n\nexport default ({ strapi }: Context) => {\n  const { naming, mappers, attributes } = strapi.plugin('graphql').service('utils');\n  const extension = strapi.plugin('graphql').service('extension');\n\n  const { getComponentInputName, getContentTypeInputName, getEnumName, getDynamicZoneInputName } =\n    naming;\n\n  const {\n    isStrapiScalar,\n    isRelation,\n    isMorphRelation,\n    isMedia,\n    isEnumeration,\n    isComponent,\n    isDynamicZone,\n  } = attributes;\n\n  return {\n    buildInputType(contentType: Struct.Schema) {\n      const { attributes, modelType } = contentType;\n\n      const name = (\n        modelType === 'component' ? getComponentInputName : getContentTypeInputName\n      ).call(null, contentType);\n\n      return inputObjectType({\n        name,\n\n        definition(t) {\n          const isFieldEnabled = (fieldName: string) => {\n            return extension.shadowCRUD(contentType.uid).field(fieldName).hasInputEnabled();\n          };\n\n          const validAttributes = Object.entries(attributes)\n            // Remove private attributes\n            .filter(\n              ([attributeName]) => !contentTypes.isPrivateAttribute(contentType, attributeName)\n            )\n            // Remove non-writable attributes\n            .filter(([attributeName]) => isWritableAttribute(contentType, attributeName))\n            // Remove filters that have been disabled using the shadow CRUD extension API\n            .filter(([attributeName]) => isFieldEnabled(attributeName));\n\n          // Add the ID for the component to enable inplace updates\n          if (modelType === 'component' && isFieldEnabled('id')) {\n            t.id('id');\n          }\n\n          validAttributes.forEach(([attributeName, attribute]: [string, any]) => {\n            // Enums\n            if (isEnumeration(attribute)) {\n              const enumTypeName = getEnumName(contentType, attributeName);\n\n              t.field(attributeName, { type: enumTypeName });\n            }\n\n            // Scalars\n            else if (isStrapiScalar(attribute)) {\n              const gqlScalar = mappers.strapiScalarToGraphQLScalar(attribute.type);\n\n              t.field(attributeName, { type: gqlScalar });\n            }\n\n            // Media\n            else if (isMedia(attribute)) {\n              const isMultiple = attribute.multiple === true;\n\n              if (extension.shadowCRUD('plugin::upload.file').isDisabled()) {\n                return;\n              }\n\n              if (isMultiple) {\n                t.list.id(attributeName);\n              } else {\n                t.id(attributeName);\n              }\n            }\n\n            // Regular Relations (ignore polymorphic relations)\n            else if (isRelation(attribute) && !isMorphRelation(attribute)) {\n              if (extension.shadowCRUD(attribute.target).isDisabled()) {\n                return;\n              }\n\n              const isToManyRelation = attribute.relation.endsWith('Many');\n\n              if (isToManyRelation) {\n                t.list.id(attributeName);\n              } else {\n                t.id(attributeName);\n              }\n            }\n\n            // Components\n            else if (isComponent(attribute)) {\n              const isRepeatable = attribute.repeatable === true;\n              const component = strapi.components[attribute.component];\n              const componentInputType = getComponentInputName(component);\n\n              if (isRepeatable) {\n                t.list.field(attributeName, { type: componentInputType });\n              } else {\n                t.field(attributeName, { type: componentInputType });\n              }\n            }\n\n            // Dynamic Zones\n            else if (isDynamicZone(attribute)) {\n              const dzInputName = getDynamicZoneInputName(contentType, attributeName);\n\n              t.list.field(attributeName, { type: nonNull(dzInputName) });\n            }\n          });\n        },\n      });\n    },\n  };\n};\n"],"names":["isWritableAttribute","contentTypes","strapi","naming","mappers","attributes","plugin","service","extension","getComponentInputName","getContentTypeInputName","getEnumName","getDynamicZoneInputName","isStrapiScalar","isRelation","isMorphRelation","isMedia","isEnumeration","isComponent","isDynamicZone","buildInputType","contentType","modelType","name","call","inputObjectType","definition","t","isFieldEnabled","fieldName","shadowCRUD","uid","field","hasInputEnabled","validAttributes","Object","entries","filter","attributeName","isPrivateAttribute","id","forEach","attribute","enumTypeName","type","gqlScalar","strapiScalarToGraphQLScalar","isMultiple","multiple","isDisabled","list","target","isToManyRelation","relation","endsWith","isRepeatable","repeatable","component","components","componentInputType","dzInputName","nonNull"],"mappings":"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"}