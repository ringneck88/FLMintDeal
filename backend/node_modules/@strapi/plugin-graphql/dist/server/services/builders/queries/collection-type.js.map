{"version":3,"file":"collection-type.js","sources":["../../../../../server/src/services/builders/queries/collection-type.ts"],"sourcesContent":["import { extendType, nonNull, list } from 'nexus';\nimport type * as Nexus from 'nexus';\nimport type { Struct } from '@strapi/types';\nimport type { Context } from '../../types';\n\nexport default ({ strapi }: Context) => {\n  const { service: getService } = strapi.plugin('graphql');\n\n  const { naming } = getService('utils');\n  const { transformArgs, getContentTypeArgs } = getService('builders').utils;\n  const { toEntityResponseCollection } = getService('format').returnTypes;\n\n  const {\n    getFindOneQueryName,\n    getTypeName,\n    getFindQueryName,\n    getFindConnectionQueryName,\n    getEntityResponseCollectionName,\n  } = naming;\n\n  const buildCollectionTypeQueries = (contentType: Struct.CollectionTypeSchema) => {\n    const findOneQueryName = `Query.${getFindOneQueryName(contentType)}`;\n    const findQueryName = `Query.${getFindQueryName(contentType)}`;\n    const findConnectionQueryName = `Query.${getFindConnectionQueryName(contentType)}`;\n\n    const extension = getService('extension');\n\n    const registerAuthConfig = (action: string, auth: any) => {\n      return extension.use({ resolversConfig: { [action]: { auth } } });\n    };\n\n    const isActionEnabled = (action: string) => {\n      return extension.shadowCRUD(contentType.uid).isActionEnabled(action);\n    };\n\n    const isFindOneEnabled = isActionEnabled('findOne');\n    const isFindEnabled = isActionEnabled('find');\n\n    if (isFindOneEnabled) {\n      registerAuthConfig(findOneQueryName, { scope: [`${contentType.uid}.findOne`] });\n    }\n\n    if (isFindEnabled) {\n      registerAuthConfig(findQueryName, { scope: [`${contentType.uid}.find`] });\n      registerAuthConfig(findConnectionQueryName, { scope: [`${contentType.uid}.find`] });\n    }\n\n    return extendType({\n      type: 'Query',\n\n      definition(t) {\n        if (isFindOneEnabled) {\n          addFindOneQuery(t, contentType);\n        }\n\n        if (isFindEnabled) {\n          addFindConnectionQuery(t, contentType);\n          addFindQuery(t, contentType);\n        }\n      },\n    });\n  };\n\n  /**\n   * Register a \"find one\" query field to the nexus type definition\n   */\n  const addFindOneQuery = (\n    t: Nexus.blocks.ObjectDefinitionBlock<'Query'>,\n    contentType: Struct.CollectionTypeSchema\n  ) => {\n    const findOneQueryName = getFindOneQueryName(contentType);\n    const typeName = getTypeName(contentType);\n\n    t.field(findOneQueryName, {\n      type: typeName,\n\n      extensions: {\n        strapi: {\n          contentType,\n        },\n      },\n\n      args: getContentTypeArgs(contentType, { multiple: false }),\n\n      async resolve(parent, args, ctx) {\n        const transformedArgs = transformArgs(args, { contentType });\n\n        const { findOne } = getService('builders')\n          .get('content-api')\n          .buildQueriesResolvers({ contentType });\n\n        // queryResolvers will sanitize params\n        return findOne(parent, transformedArgs, ctx);\n      },\n    });\n  };\n\n  /**\n   * Register a \"find\" query field to the nexus type definition\n   */\n  const addFindQuery = (\n    t: Nexus.blocks.ObjectDefinitionBlock<'Query'>,\n    contentType: Struct.CollectionTypeSchema\n  ) => {\n    const findQueryName = getFindQueryName(contentType);\n    const typeName = getTypeName(contentType);\n\n    t.field(findQueryName, {\n      type: nonNull(list(typeName)),\n\n      extensions: {\n        strapi: {\n          contentType,\n        },\n      },\n\n      args: getContentTypeArgs(contentType),\n\n      async resolve(parent, args, ctx) {\n        const transformedArgs = transformArgs(args, { contentType, usePagination: true });\n\n        const { findMany } = getService('builders')\n          .get('content-api')\n          .buildQueriesResolvers({ contentType });\n\n        // queryResolvers will sanitize params\n        return findMany(parent, transformedArgs, ctx);\n      },\n    });\n  };\n\n  /**\n   * Register a \"find\" query field to the nexus type definition\n   */\n  const addFindConnectionQuery = (\n    t: Nexus.blocks.ObjectDefinitionBlock<'Query'>,\n    contentType: Struct.CollectionTypeSchema\n  ) => {\n    const { uid } = contentType;\n\n    const queryName = getFindConnectionQueryName(contentType);\n    const responseCollectionTypeName = getEntityResponseCollectionName(contentType);\n\n    t.field(queryName, {\n      type: responseCollectionTypeName,\n\n      extensions: {\n        strapi: {\n          contentType,\n        },\n      },\n\n      args: getContentTypeArgs(contentType),\n\n      async resolve(parent, args, ctx) {\n        const transformedArgs = transformArgs(args, { contentType, usePagination: true });\n\n        const { findMany } = getService('builders')\n          .get('content-api')\n          .buildQueriesResolvers({ contentType });\n\n        // queryResolvers will sanitize params\n        const nodes = await findMany(parent, transformedArgs, ctx);\n\n        return toEntityResponseCollection(nodes, { args: transformedArgs, resourceUID: uid });\n      },\n    });\n  };\n\n  return { buildCollectionTypeQueries };\n};\n"],"names":["strapi","service","getService","plugin","naming","transformArgs","getContentTypeArgs","utils","toEntityResponseCollection","returnTypes","getFindOneQueryName","getTypeName","getFindQueryName","getFindConnectionQueryName","getEntityResponseCollectionName","buildCollectionTypeQueries","contentType","findOneQueryName","findQueryName","findConnectionQueryName","extension","registerAuthConfig","action","auth","use","resolversConfig","isActionEnabled","shadowCRUD","uid","isFindOneEnabled","isFindEnabled","scope","extendType","type","definition","t","addFindOneQuery","addFindConnectionQuery","addFindQuery","typeName","field","extensions","args","multiple","resolve","parent","ctx","transformedArgs","findOne","get","buildQueriesResolvers","nonNull","list","usePagination","findMany","queryName","responseCollectionTypeName","nodes","resourceUID"],"mappings":"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"}