{"version":3,"file":"association.mjs","sources":["../../../../../server/src/services/builders/resolvers/association.ts"],"sourcesContent":["import { get, merge } from 'lodash/fp';\nimport { async, contentTypes, errors } from '@strapi/utils';\nimport type { Internal } from '@strapi/types';\n\nimport type { Context } from '../../types';\n\nconst { ApplicationError } = errors;\n\nexport default ({ strapi }: Context) => {\n  const { service: getGraphQLService } = strapi.plugin('graphql');\n\n  const { isMorphRelation, isMedia } = getGraphQLService('utils').attributes;\n  const { transformArgs } = getGraphQLService('builders').utils;\n  const { toEntityResponse, toEntityResponseCollection } = getGraphQLService('format').returnTypes;\n\n  return {\n    buildAssociationResolver({\n      contentTypeUID,\n      attributeName,\n    }: {\n      contentTypeUID: Internal.UID.ContentType;\n      attributeName: string;\n    }) {\n      const contentType = strapi.getModel(contentTypeUID);\n      const attribute: any = contentType.attributes[attributeName];\n\n      if (!attribute) {\n        throw new ApplicationError(\n          `Failed to build an association resolver for ${contentTypeUID}::${attributeName}`\n        );\n      }\n\n      const isMediaAttribute = isMedia(attribute);\n      const isMorphAttribute = isMorphRelation(attribute);\n\n      const targetUID = isMediaAttribute ? 'plugin::upload.file' : attribute.target;\n      const isToMany = isMediaAttribute ? attribute.multiple : attribute.relation.endsWith('Many');\n\n      const targetContentType = strapi.getModel(targetUID);\n\n      return async (parent: any, args: any = {}, context: any = {}) => {\n        const { auth } = context.state;\n\n        const transformedArgs = transformArgs(args, {\n          contentType: targetContentType,\n          usePagination: true,\n        });\n\n        await strapi.contentAPI.validate.query(transformedArgs, targetContentType, {\n          auth,\n        });\n\n        const sanitizedQuery = await strapi.contentAPI.sanitize.query(\n          transformedArgs,\n          targetContentType,\n          {\n            auth,\n          }\n        );\n        const transformedQuery = strapi.get('query-params').transform(targetUID, sanitizedQuery);\n\n        const isTargetDraftAndPublishContentType =\n          contentTypes.hasDraftAndPublish(targetContentType);\n        const defaultFilters = isTargetDraftAndPublishContentType\n          ? {\n              where: {\n                publishedAt: {\n                  $notNull: context.rootQueryArgs?.status\n                    ? // Filter by the same status as the root query if the argument is present\n                      context.rootQueryArgs?.status === 'published'\n                    : // Otherwise fallback to the published version\n                      true,\n                },\n              },\n            }\n          : {};\n\n        const dbQuery = merge(defaultFilters, transformedQuery);\n\n        // Sign media URLs if upload plugin is available and using private provider\n        const data = await (async () => {\n          const rawData = await strapi.db\n            .query(contentTypeUID)\n            .load(parent, attributeName, dbQuery);\n          if (isMediaAttribute && strapi.plugin('upload')) {\n            const { signFileUrls } = strapi.plugin('upload').service('file');\n\n            if (Array.isArray(rawData)) {\n              return async.map(rawData, (item: any) => signFileUrls(item));\n            }\n\n            if (rawData) {\n              return signFileUrls(rawData);\n            }\n          }\n\n          return rawData;\n        })();\n\n        const info = {\n          args: sanitizedQuery,\n          resourceUID: targetUID,\n        };\n\n        // If this a polymorphic association, it sanitizes & returns the raw data\n        // Note: The value needs to be wrapped in a fake object that represents its parent\n        // so that the sanitize util can work properly.\n        if (isMorphAttribute) {\n          // Helpers used for the data cleanup\n          const wrapData = (dataToWrap: any) => ({ [attributeName]: dataToWrap });\n          const sanitizeData = (dataToSanitize: any) => {\n            return strapi.contentAPI.sanitize.output(dataToSanitize, contentType, { auth });\n          };\n          const unwrapData = get(attributeName);\n\n          // Sanitizer definition\n          const sanitizeMorphAttribute = async.pipe(wrapData, sanitizeData, unwrapData);\n\n          return sanitizeMorphAttribute(data);\n        }\n\n        // If this is a to-many relation, it returns an object that\n        // matches what the entity-response-collection's resolvers expect\n        if (isToMany) {\n          return toEntityResponseCollection(data, info);\n        }\n\n        // Else, it returns an object that matches\n        // what the entity-response's resolvers expect\n        return toEntityResponse(data, info);\n      };\n    },\n  };\n};\n"],"names":["ApplicationError","errors","strapi","service","getGraphQLService","plugin","isMorphRelation","isMedia","attributes","transformArgs","utils","toEntityResponse","toEntityResponseCollection","returnTypes","buildAssociationResolver","contentTypeUID","attributeName","contentType","getModel","attribute","isMediaAttribute","isMorphAttribute","targetUID","target","isToMany","multiple","relation","endsWith","targetContentType","parent","args","context","auth","state","transformedArgs","usePagination","contentAPI","validate","query","sanitizedQuery","sanitize","transformedQuery","get","transform","isTargetDraftAndPublishContentType","contentTypes","hasDraftAndPublish","defaultFilters","where","publishedAt","$notNull","rootQueryArgs","status","dbQuery","merge","data","rawData","db","load","signFileUrls","Array","isArray","async","map","item","info","resourceUID","wrapData","dataToWrap","sanitizeData","dataToSanitize","output","unwrapData","sanitizeMorphAttribute","pipe"],"mappings":";;;AAMA,MAAM,EAAEA,gBAAgB,EAAE,GAAGC,MAAAA;AAE7B,2BAAe,CAAA,CAAC,EAAEC,MAAM,EAAW,GAAA;AACjC,IAAA,MAAM,EAAEC,OAASC,EAAAA,iBAAiB,EAAE,GAAGF,MAAAA,CAAOG,MAAM,CAAC,SAAA,CAAA;IAErD,MAAM,EAAEC,eAAe,EAAEC,OAAO,EAAE,GAAGH,iBAAAA,CAAkB,SAASI,UAAU;AAC1E,IAAA,MAAM,EAAEC,aAAa,EAAE,GAAGL,iBAAAA,CAAkB,YAAYM,KAAK;IAC7D,MAAM,EAAEC,gBAAgB,EAAEC,0BAA0B,EAAE,GAAGR,iBAAAA,CAAkB,UAAUS,WAAW;IAEhG,OAAO;AACLC,QAAAA,wBAAAA,CAAAA,CAAyB,EACvBC,cAAc,EACdC,aAAa,EAId,EAAA;YACC,MAAMC,WAAAA,GAAcf,MAAOgB,CAAAA,QAAQ,CAACH,cAAAA,CAAAA;AACpC,YAAA,MAAMI,SAAiBF,GAAAA,WAAAA,CAAYT,UAAU,CAACQ,aAAc,CAAA;AAE5D,YAAA,IAAI,CAACG,SAAW,EAAA;gBACd,MAAM,IAAInB,iBACR,CAAC,4CAA4C,EAAEe,cAAe,CAAA,EAAE,EAAEC,aAAAA,CAAc,CAAC,CAAA;AAErF;AAEA,YAAA,MAAMI,mBAAmBb,OAAQY,CAAAA,SAAAA,CAAAA;AACjC,YAAA,MAAME,mBAAmBf,eAAgBa,CAAAA,SAAAA,CAAAA;AAEzC,YAAA,MAAMG,SAAYF,GAAAA,gBAAAA,GAAmB,qBAAwBD,GAAAA,SAAAA,CAAUI,MAAM;YAC7E,MAAMC,QAAAA,GAAWJ,mBAAmBD,SAAUM,CAAAA,QAAQ,GAAGN,SAAUO,CAAAA,QAAQ,CAACC,QAAQ,CAAC,MAAA,CAAA;YAErF,MAAMC,iBAAAA,GAAoB1B,MAAOgB,CAAAA,QAAQ,CAACI,SAAAA,CAAAA;YAE1C,OAAO,OAAOO,QAAaC,IAAY,GAAA,EAAE,EAAEC,OAAAA,GAAe,EAAE,GAAA;AAC1D,gBAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,QAAQE,KAAK;gBAE9B,MAAMC,eAAAA,GAAkBzB,cAAcqB,IAAM,EAAA;oBAC1Cb,WAAaW,EAAAA,iBAAAA;oBACbO,aAAe,EAAA;AACjB,iBAAA,CAAA;gBAEA,MAAMjC,MAAAA,CAAOkC,UAAU,CAACC,QAAQ,CAACC,KAAK,CAACJ,iBAAiBN,iBAAmB,EAAA;AACzEI,oBAAAA;AACF,iBAAA,CAAA;gBAEA,MAAMO,cAAAA,GAAiB,MAAMrC,MAAAA,CAAOkC,UAAU,CAACI,QAAQ,CAACF,KAAK,CAC3DJ,eAAAA,EACAN,iBACA,EAAA;AACEI,oBAAAA;AACF,iBAAA,CAAA;AAEF,gBAAA,MAAMS,mBAAmBvC,MAAOwC,CAAAA,GAAG,CAAC,cAAgBC,CAAAA,CAAAA,SAAS,CAACrB,SAAWiB,EAAAA,cAAAA,CAAAA;gBAEzE,MAAMK,kCAAAA,GACJC,YAAaC,CAAAA,kBAAkB,CAAClB,iBAAAA,CAAAA;AAClC,gBAAA,MAAMmB,iBAAiBH,kCACnB,GAAA;oBACEI,KAAO,EAAA;wBACLC,WAAa,EAAA;4BACXC,QAAUnB,EAAAA,OAAAA,CAAQoB,aAAa,EAAEC,MAAAA,GAE7BrB,QAAQoB,aAAa,EAAEC,WAAW,WAElC,GAAA;AACN;AACF;AACF,iBAAA,GACA,EAAC;gBAEL,MAAMC,OAAAA,GAAUC,MAAMP,cAAgBN,EAAAA,gBAAAA,CAAAA;;gBAGtC,MAAMc,IAAAA,GAAO,MAAO,CAAA,UAAA;oBAClB,MAAMC,OAAAA,GAAU,MAAMtD,MAAAA,CAAOuD,EAAE,CAC5BnB,KAAK,CAACvB,cACN2C,CAAAA,CAAAA,IAAI,CAAC7B,MAAAA,EAAQb,aAAeqC,EAAAA,OAAAA,CAAAA;AAC/B,oBAAA,IAAIjC,gBAAoBlB,IAAAA,MAAAA,CAAOG,MAAM,CAAC,QAAW,CAAA,EAAA;wBAC/C,MAAM,EAAEsD,YAAY,EAAE,GAAGzD,OAAOG,MAAM,CAAC,QAAUF,CAAAA,CAAAA,OAAO,CAAC,MAAA,CAAA;wBAEzD,IAAIyD,KAAAA,CAAMC,OAAO,CAACL,OAAU,CAAA,EAAA;AAC1B,4BAAA,OAAOM,MAAMC,GAAG,CAACP,OAAS,EAAA,CAACQ,OAAcL,YAAaK,CAAAA,IAAAA,CAAAA,CAAAA;AACxD;AAEA,wBAAA,IAAIR,OAAS,EAAA;AACX,4BAAA,OAAOG,YAAaH,CAAAA,OAAAA,CAAAA;AACtB;AACF;oBAEA,OAAOA,OAAAA;iBACT,GAAA;AAEA,gBAAA,MAAMS,IAAO,GAAA;oBACXnC,IAAMS,EAAAA,cAAAA;oBACN2B,WAAa5C,EAAAA;AACf,iBAAA;;;;AAKA,gBAAA,IAAID,gBAAkB,EAAA;;oBAEpB,MAAM8C,QAAAA,GAAW,CAACC,UAAAA,IAAqB;AAAE,4BAAA,CAACpD,gBAAgBoD;yBAAW,CAAA;AACrE,oBAAA,MAAMC,eAAe,CAACC,cAAAA,GAAAA;wBACpB,OAAOpE,MAAAA,CAAOkC,UAAU,CAACI,QAAQ,CAAC+B,MAAM,CAACD,gBAAgBrD,WAAa,EAAA;AAAEe,4BAAAA;AAAK,yBAAA,CAAA;AAC/E,qBAAA;AACA,oBAAA,MAAMwC,aAAa9B,GAAI1B,CAAAA,aAAAA,CAAAA;;AAGvB,oBAAA,MAAMyD,sBAAyBX,GAAAA,KAAAA,CAAMY,IAAI,CAACP,UAAUE,YAAcG,EAAAA,UAAAA,CAAAA;AAElE,oBAAA,OAAOC,sBAAuBlB,CAAAA,IAAAA,CAAAA;AAChC;;;AAIA,gBAAA,IAAI/B,QAAU,EAAA;AACZ,oBAAA,OAAOZ,2BAA2B2C,IAAMU,EAAAA,IAAAA,CAAAA;AAC1C;;;AAIA,gBAAA,OAAOtD,iBAAiB4C,IAAMU,EAAAA,IAAAA,CAAAA;AAChC,aAAA;AACF;AACF,KAAA;AACF,CAAA;;;;"}