{"version":3,"file":"index.mjs","sources":["../../../../server/src/services/builders/index.ts"],"sourcesContent":["import { merge, map, pipe, reduce } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\n\n// Builders Factories\n\nimport enums from './enums';\nimport dynamicZone from './dynamic-zones';\nimport entity from './entity';\nimport typeBuilder from './type';\nimport response from './response';\nimport responseCollection from './response-collection';\nimport relationResponseCollection from './relation-response-collection';\nimport queries from './queries';\nimport mutations from './mutations';\nimport filters from './filters';\nimport inputs from './input';\nimport genericMorph from './generic-morph';\nimport resolvers from './resolvers';\n\n// Misc\n\nimport operators from './filters/operators';\nimport utils from './utils';\nimport type { TypeRegistry } from '../type-registry';\n\nconst buildersFactories = [\n  enums,\n  dynamicZone,\n  entity,\n  typeBuilder,\n  response,\n  responseCollection,\n  relationResponseCollection,\n  queries,\n  mutations,\n  filters,\n  inputs,\n  genericMorph,\n  resolvers,\n];\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const buildersMap = new Map();\n\n  return {\n    /**\n     * Instantiate every builder with a strapi instance & a type registry\n     */\n    new(name: string, registry: TypeRegistry) {\n      const context = { strapi, registry };\n\n      const builders = pipe(\n        // Create a new instance of every builders\n        map((factory: any) => factory(context)),\n        // Merge every builder into the same object\n        reduce(merge, {})\n      ).call(null, buildersFactories);\n\n      buildersMap.set(name, builders);\n\n      return builders;\n    },\n\n    /**\n     * Delete a set of builders instances from\n     * the builders map for a given name\n     */\n    delete(name: string) {\n      buildersMap.delete(name);\n    },\n\n    /**\n     * Retrieve a set of builders instances from\n     * the builders map for a given name\n     */\n    get(name: string) {\n      return buildersMap.get(name);\n    },\n\n    filters: {\n      operators: operators({ strapi }),\n    },\n\n    utils: utils({ strapi }),\n  };\n};\n"],"names":["buildersFactories","enums","dynamicZone","entity","typeBuilder","response","responseCollection","relationResponseCollection","queries","mutations","filters","inputs","genericMorph","resolvers","strapi","buildersMap","Map","new","name","registry","context","builders","pipe","map","factory","reduce","merge","call","set","delete","get","operators","utils"],"mappings":";;;;;;;;;;;;;;;;;AAyBA,MAAMA,iBAAoB,GAAA;AACxBC,IAAAA,KAAAA;AACAC,IAAAA,WAAAA;AACAC,IAAAA,MAAAA;AACAC,IAAAA,WAAAA;AACAC,IAAAA,QAAAA;AACAC,IAAAA,kBAAAA;AACAC,IAAAA,0BAAAA;AACAC,IAAAA,OAAAA;AACAC,IAAAA,SAAAA;AACAC,IAAAA,OAAAA;AACAC,IAAAA,MAAAA;AACAC,IAAAA,YAAAA;AACAC,IAAAA;AACD,CAAA;AAED,eAAe,CAAA,CAAC,EAAEC,MAAM,EAA2B,GAAA;AACjD,IAAA,MAAMC,cAAc,IAAIC,GAAAA,EAAAA;IAExB,OAAO;AACL;;QAGAC,GAAAA,CAAAA,CAAIC,IAAY,EAAEC,QAAsB,EAAA;AACtC,YAAA,MAAMC,OAAU,GAAA;AAAEN,gBAAAA,MAAAA;AAAQK,gBAAAA;AAAS,aAAA;YAEnC,MAAME,QAAAA,GAAWC;AAEfC,YAAAA,GAAAA,CAAI,CAACC,OAAAA,GAAiBA,OAAQJ,CAAAA,OAAAA,CAAAA,CAAAA;AAE9BK,YAAAA,MAAAA,CAAOC,KAAO,EAAA,EACdC,CAAAA,CAAAA,CAAAA,IAAI,CAAC,IAAM3B,EAAAA,iBAAAA,CAAAA;YAEbe,WAAYa,CAAAA,GAAG,CAACV,IAAMG,EAAAA,QAAAA,CAAAA;YAEtB,OAAOA,QAAAA;AACT,SAAA;AAEA;;;AAGC,QACDQ,QAAOX,IAAY,EAAA;AACjBH,YAAAA,WAAAA,CAAYc,MAAM,CAACX,IAAAA,CAAAA;AACrB,SAAA;AAEA;;;AAGC,QACDY,KAAIZ,IAAY,EAAA;YACd,OAAOH,WAAAA,CAAYe,GAAG,CAACZ,IAAAA,CAAAA;AACzB,SAAA;QAEAR,OAAS,EAAA;AACPqB,YAAAA,SAAAA,EAAWA,SAAU,CAAA;AAAEjB,gBAAAA;AAAO,aAAA;AAChC,SAAA;AAEAkB,QAAAA,KAAAA,EAAOA,KAAM,CAAA;AAAElB,YAAAA;AAAO,SAAA;AACxB,KAAA;AACF,CAAA;;;;"}