{"version":3,"file":"query.mjs","sources":["../../../../../server/src/services/builders/resolvers/query.ts"],"sourcesContent":["import { omit } from 'lodash/fp';\nimport type { Schema } from '@strapi/types';\nimport type { Context } from '../../types';\n\nexport default ({ strapi }: Context) => ({\n  buildQueriesResolvers({ contentType }: { contentType: Schema.ContentType }) {\n    const { uid } = contentType;\n\n    return {\n      async findMany(parent: any, args: any, ctx: any) {\n        await strapi.contentAPI.validate.query(args, contentType, {\n          auth: ctx?.state?.auth,\n        });\n\n        const sanitizedQuery = await strapi.contentAPI.sanitize.query(args, contentType, {\n          auth: ctx?.state?.auth,\n        });\n\n        return strapi.documents!(uid).findMany({ status: 'published', ...sanitizedQuery });\n      },\n\n      async findFirst(parent: any, args: any, ctx: any) {\n        await strapi.contentAPI.validate.query(args, contentType, {\n          auth: ctx?.state?.auth,\n        });\n\n        const sanitizedQuery = await strapi.contentAPI.sanitize.query(args, contentType, {\n          auth: ctx?.state?.auth,\n        });\n\n        return strapi.documents!(uid).findFirst({ status: 'published', ...sanitizedQuery });\n      },\n\n      async findOne(parent: any, args: any, ctx: any) {\n        const { documentId } = args;\n\n        await strapi.contentAPI.validate.query(args, contentType, {\n          auth: ctx?.state?.auth,\n        });\n\n        const sanitizedQuery = await strapi.contentAPI.sanitize.query(args, contentType, {\n          auth: ctx?.state?.auth,\n        });\n\n        return strapi.documents!(uid).findOne({\n          status: 'published',\n          ...omit(['id', 'documentId'], sanitizedQuery),\n          documentId,\n        });\n      },\n    };\n  },\n});\n"],"names":["strapi","buildQueriesResolvers","contentType","uid","findMany","parent","args","ctx","contentAPI","validate","query","auth","state","sanitizedQuery","sanitize","documents","status","findFirst","findOne","documentId","omit"],"mappings":";;AAIA,uBAAe,CAAA,CAAC,EAAEA,MAAM,EAAW,IAAM;QACvCC,qBAAsB,CAAA,CAAA,EAAEC,WAAW,EAAuC,EAAA;YACxE,MAAM,EAAEC,GAAG,EAAE,GAAGD,WAAAA;YAEhB,OAAO;AACL,gBAAA,MAAME,QAASC,CAAAA,CAAAA,MAAW,EAAEC,IAAS,EAAEC,GAAQ,EAAA;oBAC7C,MAAMP,MAAAA,CAAOQ,UAAU,CAACC,QAAQ,CAACC,KAAK,CAACJ,MAAMJ,WAAa,EAAA;AACxDS,wBAAAA,IAAAA,EAAMJ,KAAKK,KAAOD,EAAAA;AACpB,qBAAA,CAAA;oBAEA,MAAME,cAAAA,GAAiB,MAAMb,MAAAA,CAAOQ,UAAU,CAACM,QAAQ,CAACJ,KAAK,CAACJ,IAAAA,EAAMJ,WAAa,EAAA;AAC/ES,wBAAAA,IAAAA,EAAMJ,KAAKK,KAAOD,EAAAA;AACpB,qBAAA,CAAA;AAEA,oBAAA,OAAOX,MAAOe,CAAAA,SAAS,CAAEZ,GAAAA,CAAAA,CAAKC,QAAQ,CAAC;wBAAEY,MAAQ,EAAA,WAAA;AAAa,wBAAA,GAAGH;AAAe,qBAAA,CAAA;AAClF,iBAAA;AAEA,gBAAA,MAAMI,SAAUZ,CAAAA,CAAAA,MAAW,EAAEC,IAAS,EAAEC,GAAQ,EAAA;oBAC9C,MAAMP,MAAAA,CAAOQ,UAAU,CAACC,QAAQ,CAACC,KAAK,CAACJ,MAAMJ,WAAa,EAAA;AACxDS,wBAAAA,IAAAA,EAAMJ,KAAKK,KAAOD,EAAAA;AACpB,qBAAA,CAAA;oBAEA,MAAME,cAAAA,GAAiB,MAAMb,MAAAA,CAAOQ,UAAU,CAACM,QAAQ,CAACJ,KAAK,CAACJ,IAAAA,EAAMJ,WAAa,EAAA;AAC/ES,wBAAAA,IAAAA,EAAMJ,KAAKK,KAAOD,EAAAA;AACpB,qBAAA,CAAA;AAEA,oBAAA,OAAOX,MAAOe,CAAAA,SAAS,CAAEZ,GAAAA,CAAAA,CAAKc,SAAS,CAAC;wBAAED,MAAQ,EAAA,WAAA;AAAa,wBAAA,GAAGH;AAAe,qBAAA,CAAA;AACnF,iBAAA;AAEA,gBAAA,MAAMK,OAAQb,CAAAA,CAAAA,MAAW,EAAEC,IAAS,EAAEC,GAAQ,EAAA;oBAC5C,MAAM,EAAEY,UAAU,EAAE,GAAGb,IAAAA;oBAEvB,MAAMN,MAAAA,CAAOQ,UAAU,CAACC,QAAQ,CAACC,KAAK,CAACJ,MAAMJ,WAAa,EAAA;AACxDS,wBAAAA,IAAAA,EAAMJ,KAAKK,KAAOD,EAAAA;AACpB,qBAAA,CAAA;oBAEA,MAAME,cAAAA,GAAiB,MAAMb,MAAAA,CAAOQ,UAAU,CAACM,QAAQ,CAACJ,KAAK,CAACJ,IAAAA,EAAMJ,WAAa,EAAA;AAC/ES,wBAAAA,IAAAA,EAAMJ,KAAKK,KAAOD,EAAAA;AACpB,qBAAA,CAAA;AAEA,oBAAA,OAAOX,MAAOe,CAAAA,SAAS,CAAEZ,GAAAA,CAAAA,CAAKe,OAAO,CAAC;wBACpCF,MAAQ,EAAA,WAAA;AACR,wBAAA,GAAGI,IAAK,CAAA;AAAC,4BAAA,IAAA;AAAM,4BAAA;AAAa,yBAAA,EAAEP,cAAe,CAAA;AAC7CM,wBAAAA;AACF,qBAAA,CAAA;AACF;AACF,aAAA;AACF;AACF,KAAA,CAAC;;;;"}