{"version":3,"file":"single-type.js","sources":["../../../../../server/src/services/builders/mutations/single-type.ts"],"sourcesContent":["import { extendType, nonNull } from 'nexus';\nimport { errors } from '@strapi/utils';\nimport type * as Nexus from 'nexus';\nimport type { Struct } from '@strapi/types';\nimport type { Context } from '../../types';\n\nconst { NotFoundError } = errors;\n\nexport default ({ strapi }: Context) => {\n  const { service: getService } = strapi.plugin('graphql');\n\n  const { naming } = getService('utils');\n  const { args } = getService('internals');\n\n  const {\n    getUpdateMutationTypeName,\n    getTypeName,\n    getContentTypeInputName,\n    getDeleteMutationTypeName,\n  } = naming;\n\n  const addUpdateMutation = (\n    t: Nexus.blocks.ObjectDefinitionBlock<'Mutation'>,\n    contentType: Struct.SingleTypeSchema\n  ) => {\n    const { uid } = contentType;\n\n    const updateMutationName = getUpdateMutationTypeName(contentType);\n    const typeName = getTypeName(contentType);\n\n    t.field(updateMutationName, {\n      type: typeName,\n\n      extensions: {\n        strapi: {\n          contentType,\n        },\n      },\n\n      args: {\n        // Update payload\n        status: args.PublicationStatusArg,\n        data: nonNull(getContentTypeInputName(contentType)),\n      },\n\n      async resolve(parent, args, context) {\n        const { auth } = context.state;\n\n        // Sanitize input data\n        const sanitizedInputData = await strapi.contentAPI.sanitize.input(args.data, contentType, {\n          auth,\n        });\n\n        const document = await strapi.db?.query(uid).findOne();\n\n        if (document) {\n          return strapi.documents!(uid).update({\n            ...args,\n            documentId: document.documentId,\n            data: sanitizedInputData,\n          });\n        }\n\n        return strapi.documents!(uid).create({\n          ...args,\n          data: sanitizedInputData,\n        });\n      },\n    });\n  };\n\n  const addDeleteMutation = (\n    t: Nexus.blocks.ObjectDefinitionBlock<'Mutation'>,\n    contentType: Struct.SingleTypeSchema\n  ) => {\n    const { uid } = contentType;\n\n    const deleteMutationName = getDeleteMutationTypeName(contentType);\n    const { DELETE_MUTATION_RESPONSE_TYPE_NAME } = strapi.plugin('graphql').service('constants');\n\n    t.field(deleteMutationName, {\n      type: DELETE_MUTATION_RESPONSE_TYPE_NAME,\n\n      extensions: {\n        strapi: {\n          contentType,\n        },\n      },\n\n      args: {},\n\n      async resolve(parent, args) {\n        const document = await strapi.db?.query(uid).findOne();\n\n        if (!document) {\n          throw new NotFoundError('Document not found');\n        }\n\n        await strapi.documents!(uid).delete({ ...args, documentId: document.documentId });\n\n        return document;\n      },\n    });\n  };\n\n  return {\n    buildSingleTypeMutations(contentType: Struct.SingleTypeSchema) {\n      const updateMutationName = `Mutation.${getUpdateMutationTypeName(contentType)}`;\n      const deleteMutationName = `Mutation.${getDeleteMutationTypeName(contentType)}`;\n\n      const extension = getService('extension');\n\n      const registerAuthConfig = (action: string, auth: any) => {\n        return extension.use({ resolversConfig: { [action]: { auth } } });\n      };\n\n      const isActionEnabled = (action: string) => {\n        return extension.shadowCRUD(contentType.uid).isActionEnabled(action);\n      };\n\n      const isUpdateEnabled = isActionEnabled('update');\n      const isDeleteEnabled = isActionEnabled('delete');\n\n      if (isUpdateEnabled) {\n        registerAuthConfig(updateMutationName, { scope: [`${contentType.uid}.update`] });\n      }\n\n      if (isDeleteEnabled) {\n        registerAuthConfig(deleteMutationName, { scope: [`${contentType.uid}.delete`] });\n      }\n\n      return extendType({\n        type: 'Mutation',\n\n        definition(t) {\n          if (isUpdateEnabled) {\n            addUpdateMutation(t, contentType);\n          }\n\n          if (isDeleteEnabled) {\n            addDeleteMutation(t, contentType);\n          }\n        },\n      });\n    },\n  };\n};\n"],"names":["NotFoundError","errors","strapi","service","getService","plugin","naming","args","getUpdateMutationTypeName","getTypeName","getContentTypeInputName","getDeleteMutationTypeName","addUpdateMutation","t","contentType","uid","updateMutationName","typeName","field","type","extensions","status","PublicationStatusArg","data","nonNull","resolve","parent","context","auth","state","sanitizedInputData","contentAPI","sanitize","input","document","db","query","findOne","documents","update","documentId","create","addDeleteMutation","deleteMutationName","DELETE_MUTATION_RESPONSE_TYPE_NAME","delete","buildSingleTypeMutations","extension","registerAuthConfig","action","use","resolversConfig","isActionEnabled","shadowCRUD","isUpdateEnabled","isDeleteEnabled","scope","extendType","definition"],"mappings":"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"}