{"version":3,"file":"response-collection.js","sources":["../../../../server/src/services/builders/response-collection.ts"],"sourcesContent":["import { objectType, nonNull } from 'nexus';\nimport { defaultTo, prop, pipe, identity } from 'lodash/fp';\nimport type { Schema } from '@strapi/types';\nimport type { Context } from '../types';\n\nexport default ({ strapi }: Context) => {\n  const { service: getService } = strapi.plugin('graphql');\n\n  const { naming } = getService('utils');\n  const { RESPONSE_COLLECTION_META_TYPE_NAME, PAGINATION_TYPE_NAME } = getService('constants');\n\n  return {\n    /**\n     * Build a type definition for a content API collection response for a given content type\n     * @param {Schema.ContentType} contentType The content type which will be used to build its content API response definition\n     * @return {NexusObjectTypeDef}\n     */\n    buildResponseCollectionDefinition(contentType: Schema.ContentType) {\n      const name = naming.getEntityResponseCollectionName(contentType);\n      const typeName = naming.getTypeName(contentType);\n      const { resolvePagination } = getService('builders').get('content-api');\n\n      return objectType({\n        name,\n        definition(t) {\n          // NOTE: add edges & cursor based pagination to support the relay spec in a later version\n\n          t.nonNull.list.field('nodes', {\n            type: nonNull(typeName),\n            resolve: pipe(prop('nodes'), defaultTo([])),\n          });\n\n          t.nonNull.field('pageInfo', {\n            type: PAGINATION_TYPE_NAME,\n            resolve: resolvePagination,\n          });\n\n          if (strapi.plugin('graphql').config('v4CompatibilityMode', false)) {\n            t.nonNull.list.field('data', {\n              deprecation: 'Use `nodes` field instead',\n              type: nonNull(typeName),\n              resolve: pipe(prop('nodes'), defaultTo([])),\n            });\n\n            t.nonNull.field('meta', {\n              deprecation: 'Use the `pageInfo` field instead',\n              type: RESPONSE_COLLECTION_META_TYPE_NAME,\n              resolve: identity,\n            });\n          }\n        },\n      });\n    },\n  };\n};\n"],"names":["strapi","service","getService","plugin","naming","RESPONSE_COLLECTION_META_TYPE_NAME","PAGINATION_TYPE_NAME","buildResponseCollectionDefinition","contentType","name","getEntityResponseCollectionName","typeName","getTypeName","resolvePagination","get","objectType","definition","t","nonNull","list","field","type","resolve","pipe","prop","defaultTo","config","deprecation","identity"],"mappings":";;;;;AAKA,yBAAe,CAAA,CAAC,EAAEA,MAAM,EAAW,GAAA;AACjC,IAAA,MAAM,EAAEC,OAASC,EAAAA,UAAU,EAAE,GAAGF,MAAAA,CAAOG,MAAM,CAAC,SAAA,CAAA;AAE9C,IAAA,MAAM,EAAEC,MAAM,EAAE,GAAGF,UAAW,CAAA,OAAA,CAAA;AAC9B,IAAA,MAAM,EAAEG,kCAAkC,EAAEC,oBAAoB,EAAE,GAAGJ,UAAW,CAAA,WAAA,CAAA;IAEhF,OAAO;AACL;;;;AAIC,QACDK,mCAAkCC,WAA+B,EAAA;YAC/D,MAAMC,IAAAA,GAAOL,MAAOM,CAAAA,+BAA+B,CAACF,WAAAA,CAAAA;YACpD,MAAMG,QAAAA,GAAWP,MAAOQ,CAAAA,WAAW,CAACJ,WAAAA,CAAAA;AACpC,YAAA,MAAM,EAAEK,iBAAiB,EAAE,GAAGX,UAAW,CAAA,UAAA,CAAA,CAAYY,GAAG,CAAC,aAAA,CAAA;AAEzD,YAAA,OAAOC,gBAAW,CAAA;AAChBN,gBAAAA,IAAAA;AACAO,gBAAAA,UAAAA,CAAAA,CAAWC,CAAC,EAAA;;AAGVA,oBAAAA,CAAAA,CAAEC,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,OAAS,EAAA;AAC5BC,wBAAAA,IAAAA,EAAMH,aAAQP,CAAAA,QAAAA,CAAAA;AACdW,wBAAAA,OAAAA,EAASC,OAAKC,CAAAA,OAAAA,CAAK,OAAUC,CAAAA,EAAAA,YAAAA,CAAU,EAAE,CAAA;AAC3C,qBAAA,CAAA;AAEAR,oBAAAA,CAAAA,CAAEC,OAAO,CAACE,KAAK,CAAC,UAAY,EAAA;wBAC1BC,IAAMf,EAAAA,oBAAAA;wBACNgB,OAAST,EAAAA;AACX,qBAAA,CAAA;AAEA,oBAAA,IAAIb,OAAOG,MAAM,CAAC,WAAWuB,MAAM,CAAC,uBAAuB,KAAQ,CAAA,EAAA;AACjET,wBAAAA,CAAAA,CAAEC,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,MAAQ,EAAA;4BAC3BO,WAAa,EAAA,2BAAA;AACbN,4BAAAA,IAAAA,EAAMH,aAAQP,CAAAA,QAAAA,CAAAA;AACdW,4BAAAA,OAAAA,EAASC,OAAKC,CAAAA,OAAAA,CAAK,OAAUC,CAAAA,EAAAA,YAAAA,CAAU,EAAE,CAAA;AAC3C,yBAAA,CAAA;AAEAR,wBAAAA,CAAAA,CAAEC,OAAO,CAACE,KAAK,CAAC,MAAQ,EAAA;4BACtBO,WAAa,EAAA,kCAAA;4BACbN,IAAMhB,EAAAA,kCAAAA;4BACNiB,OAASM,EAAAA;AACX,yBAAA,CAAA;AACF;AACF;AACF,aAAA,CAAA;AACF;AACF,KAAA;AACF,CAAA;;;;"}