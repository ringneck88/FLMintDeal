{"version":3,"file":"dynamic-zones.js","sources":["../../../../server/src/services/builders/dynamic-zones.ts"],"sourcesContent":["import { Kind, valueFromASTUntyped } from 'graphql';\nimport { omit } from 'lodash/fp';\nimport { unionType, scalarType } from 'nexus';\nimport { errors } from '@strapi/utils';\nimport type { Internal, Schema } from '@strapi/types';\n\nimport type { Context } from '../types';\n\nconst { ApplicationError } = errors;\n\nexport default ({ strapi }: Context) => {\n  const buildTypeDefinition = (name: string, components: Internal.UID.Component[]) => {\n    const { ERROR_TYPE_NAME } = strapi.plugin('graphql').service('constants');\n    const isEmpty = components.length === 0;\n\n    const componentsTypeNames = components.map((componentUID) => {\n      const component = strapi.components[componentUID];\n\n      if (!component) {\n        throw new ApplicationError(\n          `Trying to create a dynamic zone type with an unknown component: \"${componentUID}\"`\n        );\n      }\n\n      return component.globalId;\n    });\n\n    return unionType({\n      name,\n\n      resolveType(obj) {\n        if (isEmpty) {\n          return ERROR_TYPE_NAME;\n        }\n\n        return strapi.components[obj.__component].globalId;\n      },\n\n      definition(t) {\n        t.members(...componentsTypeNames, ERROR_TYPE_NAME);\n      },\n    });\n  };\n\n  const buildInputDefinition = (name: string, components: Internal.UID.Component[]) => {\n    const parseData = (value: any) => {\n      const component = Object.values(strapi.components).find(\n        (component) => component.globalId === value.__typename\n      );\n\n      if (!component) {\n        throw new ApplicationError(\n          `Component not found. expected one of: ${components\n            .map((uid) => strapi.components[uid].globalId)\n            .join(', ')}`\n        );\n      }\n\n      return {\n        __component: component.uid,\n        ...omit(['__typename'], value),\n      };\n    };\n\n    return scalarType({\n      name,\n\n      serialize: (value) => value,\n\n      parseValue: (value) => parseData(value),\n\n      parseLiteral(ast, variables) {\n        if (ast.kind !== Kind.OBJECT) {\n          return undefined;\n        }\n\n        const value = valueFromASTUntyped(ast, variables);\n        return parseData(value);\n      },\n    });\n  };\n\n  return {\n    /**\n     * Build a Nexus dynamic zone type from a Strapi dz attribute\n     */\n    buildDynamicZoneDefinition(\n      definition: Schema.Attribute.DynamicZone,\n      name: string,\n      inputName: string\n    ) {\n      const { components } = definition;\n\n      const typeDefinition = buildTypeDefinition(name, components);\n      const inputDefinition = buildInputDefinition(inputName, components);\n\n      return [typeDefinition, inputDefinition];\n    },\n  };\n};\n"],"names":["ApplicationError","errors","strapi","buildTypeDefinition","name","components","ERROR_TYPE_NAME","plugin","service","isEmpty","length","componentsTypeNames","map","componentUID","component","globalId","unionType","resolveType","obj","__component","definition","t","members","buildInputDefinition","parseData","value","Object","values","find","__typename","uid","join","omit","scalarType","serialize","parseValue","parseLiteral","ast","variables","kind","Kind","OBJECT","undefined","valueFromASTUntyped","buildDynamicZoneDefinition","inputName","typeDefinition","inputDefinition"],"mappings":"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"}