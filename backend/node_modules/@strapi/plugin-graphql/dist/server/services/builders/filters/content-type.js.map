{"version":3,"file":"content-type.js","sources":["../../../../../server/src/services/builders/filters/content-type.ts"],"sourcesContent":["import { inputObjectType } from 'nexus';\nimport { contentTypes } from '@strapi/utils';\nimport type * as Nexus from 'nexus';\nimport type { Struct, Schema } from '@strapi/types';\nimport type { Context } from '../../types';\n\nexport default ({ strapi }: Context) => {\n  const rootLevelOperators = () => {\n    const { operators } = strapi.plugin('graphql').service('builders').filters;\n\n    return [operators.and, operators.or, operators.not];\n  };\n\n  const addScalarAttribute = (\n    builder: Nexus.blocks.InputDefinitionBlock<any>,\n    attributeName: string,\n    attribute: Schema.Attribute.AnyAttribute\n  ) => {\n    const { naming, mappers } = strapi.plugin('graphql').service('utils');\n\n    const gqlType = mappers.strapiScalarToGraphQLScalar(attribute.type);\n\n    builder.field(attributeName, { type: naming.getScalarFilterInputTypeName(gqlType) });\n  };\n\n  const addRelationalAttribute = (\n    builder: Nexus.blocks.InputDefinitionBlock<any>,\n    attributeName: string,\n    attribute: Schema.Attribute.Relation\n  ) => {\n    const utils = strapi.plugin('graphql').service('utils');\n    const extension = strapi.plugin('graphql').service('extension');\n    const { getFiltersInputTypeName } = utils.naming;\n    const { isMorphRelation } = utils.attributes;\n\n    const model = 'target' in attribute && strapi.getModel(attribute.target);\n\n    // If there is no model corresponding to the attribute configuration\n    // or if the attribute is a polymorphic relation, then ignore it\n    if (!model || isMorphRelation(attribute)) return;\n\n    // If the target model is disabled, then ignore it too\n    if (extension.shadowCRUD(model.uid).isDisabled()) return;\n\n    builder.field(attributeName, { type: getFiltersInputTypeName(model) });\n  };\n\n  const addComponentAttribute = (\n    builder: Nexus.blocks.InputDefinitionBlock<any>,\n    attributeName: string,\n    attribute: Schema.Attribute.Component\n  ) => {\n    const utils = strapi.plugin('graphql').service('utils');\n    const extension = strapi.plugin('graphql').service('extension');\n    const { getFiltersInputTypeName } = utils.naming;\n\n    const component = strapi.getModel(attribute.component);\n\n    // If there is no component corresponding to the attribute configuration, then ignore it\n    if (!component) return;\n\n    // If the component is disabled, then ignore it too\n    if (extension.shadowCRUD(component.uid).isDisabled()) return;\n\n    builder.field(attributeName, { type: getFiltersInputTypeName(component) });\n  };\n\n  const buildContentTypeFilters = (contentType: Struct.ContentTypeSchema) => {\n    const utils = strapi.plugin('graphql').service('utils');\n    const extension = strapi.plugin('graphql').service('extension');\n\n    const { getFiltersInputTypeName, getScalarFilterInputTypeName } = utils.naming;\n    const { isStrapiScalar, isRelation, isComponent } = utils.attributes;\n\n    const { attributes } = contentType;\n\n    const filtersTypeName = getFiltersInputTypeName(contentType);\n\n    return inputObjectType({\n      name: filtersTypeName,\n\n      definition(t) {\n        const validAttributes = Object.entries(attributes)\n          // Remove private attributes\n          .filter(([attributeName]) => !contentTypes.isPrivateAttribute(contentType, attributeName))\n          // Remove attributes that have been disabled using the shadow CRUD extension API\n          .filter(([attributeName]) =>\n            extension.shadowCRUD(contentType.uid).field(attributeName).hasFiltersEnabeld()\n          );\n\n        const isIDFilterEnabled = extension\n          .shadowCRUD(contentType.uid)\n          .field('documentId')\n          .hasFiltersEnabeld();\n\n        // Add an ID filter to the collection types\n        if (contentType.kind === 'collectionType' && isIDFilterEnabled) {\n          t.field('documentId', { type: getScalarFilterInputTypeName('ID') });\n        }\n\n        // Add every defined attribute\n        for (const [attributeName, attribute] of validAttributes) {\n          // Handle scalars\n          if (isStrapiScalar(attribute)) {\n            addScalarAttribute(t, attributeName, attribute);\n          }\n\n          // Handle relations\n          else if (isRelation(attribute)) {\n            addRelationalAttribute(t, attributeName, attribute as Schema.Attribute.Relation);\n          }\n\n          // Handle components\n          else if (isComponent(attribute)) {\n            addComponentAttribute(t, attributeName, attribute as Schema.Attribute.Component);\n          }\n        }\n\n        // Conditional clauses\n        for (const operator of rootLevelOperators()) {\n          operator.add(t, filtersTypeName);\n        }\n      },\n    });\n  };\n\n  return {\n    buildContentTypeFilters,\n  };\n};\n"],"names":["strapi","rootLevelOperators","operators","plugin","service","filters","and","or","not","addScalarAttribute","builder","attributeName","attribute","naming","mappers","gqlType","strapiScalarToGraphQLScalar","type","field","getScalarFilterInputTypeName","addRelationalAttribute","utils","extension","getFiltersInputTypeName","isMorphRelation","attributes","model","getModel","target","shadowCRUD","uid","isDisabled","addComponentAttribute","component","buildContentTypeFilters","contentType","isStrapiScalar","isRelation","isComponent","filtersTypeName","inputObjectType","name","definition","t","validAttributes","Object","entries","filter","contentTypes","isPrivateAttribute","hasFiltersEnabeld","isIDFilterEnabled","kind","operator","add"],"mappings":"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"}