{"version":3,"file":"bootstrap.mjs","sources":["../../server/src/bootstrap.ts"],"sourcesContent":["import { isEmpty, mergeWith, isArray, isObject, isFunction } from 'lodash/fp';\nimport { ApolloServer, type ApolloServerPlugin, type ApolloServerOptions } from '@apollo/server';\nimport {\n  ApolloServerPluginLandingPageLocalDefault,\n  ApolloServerPluginLandingPageProductionDefault,\n} from '@apollo/server/plugin/landingPage/default';\nimport { koaMiddleware } from '@as-integrations/koa';\nimport depthLimit from 'graphql-depth-limit';\nimport bodyParser from 'koa-bodyparser';\nimport cors from '@koa/cors';\n\nimport type { Core } from '@strapi/types';\nimport type { BaseContext, DefaultContextExtends, DefaultStateExtends } from 'koa';\n\nimport { formatGraphqlError } from './format-graphql-error';\n\nconst merge = mergeWith((a, b) => {\n  if (isArray(a) && isArray(b)) {\n    return a.concat(b);\n  }\n});\n\ntype StrapiGraphQLContext = BaseContext & {\n  rootQueryArgs?: Record<string, unknown>;\n};\n\nexport const determineLandingPage = (\n  strapi: Core.Strapi\n): ApolloServerPlugin<StrapiGraphQLContext> => {\n  const { config } = strapi.plugin('graphql');\n  const utils = strapi.plugin('graphql').service('utils');\n\n  /**\n   * configLanding page may be one of the following:\n   *\n   * - true: always use \"playground\" even in production\n   * - false: never show \"playground\" even in non-production\n   * - undefined: default Apollo behavior (hide playground on production)\n   * - a function that returns an Apollo plugin that implements renderLandingPage\n   ** */\n  const configLandingPage = config('landingPage');\n\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  const localLanding = () => {\n    strapi.log.debug('Apollo landing page: local');\n    utils.playground.setEnabled(true);\n    return ApolloServerPluginLandingPageLocalDefault();\n  };\n\n  const prodLanding = () => {\n    strapi.log.debug('Apollo landing page: production');\n    utils.playground.setEnabled(false);\n    return ApolloServerPluginLandingPageProductionDefault();\n  };\n\n  const userLanding = (userFunction: (strapi?: Core.Strapi) => ApolloServerPlugin | boolean) => {\n    strapi.log.debug('Apollo landing page: from user-defined function...');\n    const result = userFunction(strapi);\n    if (result === true) {\n      return localLanding();\n    }\n    if (result === false) {\n      return prodLanding();\n    }\n    strapi.log.debug('Apollo landing page: user-defined');\n    return result;\n  };\n\n  // DEPRECATED, remove in Strapi v6\n  const playgroundAlways = config('playgroundAlways');\n  if (playgroundAlways !== undefined) {\n    strapi.log.warn(\n      'The graphql config playgroundAlways is deprecated. This will be removed in Strapi 6. Please use landingPage instead. '\n    );\n  }\n  if (playgroundAlways === false) {\n    strapi.log.warn(\n      'graphql config playgroundAlways:false has no effect, please use landingPage:false to disable Graphql Playground in all environments'\n    );\n  }\n\n  if (playgroundAlways || configLandingPage === true) {\n    return localLanding();\n  }\n\n  // if landing page has been disabled, use production\n  if (configLandingPage === false) {\n    return prodLanding();\n  }\n\n  // If user did not define any settings, use our defaults\n  if (configLandingPage === undefined) {\n    return isProduction ? prodLanding() : localLanding();\n  }\n\n  // if user provided a landing page function, return that\n  if (isFunction(configLandingPage)) {\n    return userLanding(configLandingPage);\n  }\n\n  // If no other setting could be found, default to production settings\n  strapi.log.warn(\n    'Your Graphql landing page has been disabled because there is a problem with your Graphql settings'\n  );\n  return prodLanding();\n};\n\nexport async function bootstrap({ strapi }: { strapi: Core.Strapi }) {\n  // Generate the GraphQL schema for the content API\n  const schema = strapi.plugin('graphql').service('content-api').buildSchema();\n\n  if (isEmpty(schema)) {\n    strapi.log.warn('The GraphQL schema has not been generated because it is empty');\n\n    return;\n  }\n\n  const { config } = strapi.plugin('graphql');\n\n  const path: string = config('endpoint');\n\n  const landingPage = determineLandingPage(strapi);\n  /**\n   * We need the arguments passed to the root query to be available in the association resolver\n   * so we can forward those arguments along to any relations.\n   *\n   * In order to do that we are currently storing the arguments in context.\n   * There is likely a better solution, but for now this is the simplest fix we could find.\n   *\n   * @see https://github.com/strapi/strapi/issues/23524\n   */\n  const pluginAddRootQueryArgs: ApolloServerPlugin<StrapiGraphQLContext> = {\n    async requestDidStart() {\n      return {\n        async executionDidStart() {\n          return {\n            willResolveField({ source, args, contextValue, info }) {\n              if (!source && info.operation.operation === 'query') {\n                // NOTE: context.rootQueryArgs is intended for internal use only\n                contextValue.rootQueryArgs = args;\n              }\n            },\n          };\n        },\n      };\n    },\n  };\n\n  type CustomOptions = {\n    cors: boolean;\n    uploads: boolean;\n    bodyParserConfig: boolean;\n  };\n\n  const defaultServerConfig: ApolloServerOptions<StrapiGraphQLContext> & CustomOptions = {\n    // Schema\n    schema,\n\n    // Validation\n    validationRules: [depthLimit(config('depthLimit') as number) as any],\n\n    // Errors\n    formatError: formatGraphqlError,\n\n    // Misc\n    cors: false,\n    uploads: false,\n    bodyParserConfig: true,\n    // send 400 http status instead of 200 for input validation errors\n    status400ForVariableCoercionErrors: true,\n    plugins: [landingPage, pluginAddRootQueryArgs],\n\n    cache: 'bounded' as const,\n  };\n\n  const serverConfig = merge(\n    defaultServerConfig,\n    config('apolloServer')\n  ) as ApolloServerOptions<StrapiGraphQLContext> & CustomOptions;\n\n  // Create a new Apollo server\n  const server = new ApolloServer(serverConfig);\n\n  try {\n    // server.start() must be called before using server.applyMiddleware()\n    await server.start();\n  } catch (error) {\n    if (error instanceof Error) {\n      strapi.log.error('Failed to start the Apollo server', error.message);\n    }\n\n    throw error;\n  }\n\n  // Create the route handlers for Strapi\n  const handler: Core.MiddlewareHandler[] = [];\n\n  // add cors middleware\n  if (cors) {\n    handler.push(cors());\n  }\n\n  // add koa bodyparser middleware\n  if (isObject(serverConfig.bodyParserConfig)) {\n    handler.push(bodyParser(serverConfig.bodyParserConfig));\n  } else if (serverConfig.bodyParserConfig) {\n    handler.push(bodyParser());\n  } else {\n    strapi.log.debug('Body parser has been disabled for Apollo server');\n  }\n\n  // add the Strapi auth middleware\n  handler.push((ctx, next) => {\n    ctx.state.route = {\n      info: {\n        // Indicate it's a content API route\n        type: 'content-api',\n      },\n    };\n\n    const isPlaygroundRequest =\n      ctx.request.method === 'GET' &&\n      ctx.request.url === path && // Matches the GraphQL endpoint\n      strapi.plugin('graphql').service('utils').playground.isEnabled() && // Only allow if the Playground is enabled\n      ctx.request.header.accept?.includes('text/html'); // Specific to Playground UI loading\n\n    // Skip authentication for the GraphQL Playground UI\n    if (isPlaygroundRequest) {\n      return next();\n    }\n\n    return strapi.auth.authenticate(ctx, next);\n  });\n\n  // add the graphql server for koa\n  handler.push(\n    koaMiddleware<DefaultStateExtends, DefaultContextExtends>(server, {\n      // Initialize loaders for this request.\n      context: async ({ ctx }) => ({\n        state: ctx.state,\n        koaContext: ctx,\n      }),\n    })\n  );\n\n  // now that handlers are set up, add the graphql route to our apollo server\n  strapi.server.routes([\n    {\n      method: 'ALL',\n      path,\n      handler,\n      config: {\n        auth: false,\n      },\n    },\n  ]);\n\n  // Register destroy behavior\n  // We're doing it here instead of exposing a destroy method to the strapi-server.js\n  // file since we need to have access to the ApolloServer instance\n  strapi.plugin('graphql').destroy = async () => {\n    await server.stop();\n  };\n}\n"],"names":["merge","mergeWith","a","b","isArray","concat","determineLandingPage","strapi","config","plugin","utils","service","configLandingPage","isProduction","process","env","NODE_ENV","localLanding","log","debug","playground","setEnabled","ApolloServerPluginLandingPageLocalDefault","prodLanding","ApolloServerPluginLandingPageProductionDefault","userLanding","userFunction","result","playgroundAlways","undefined","warn","isFunction","bootstrap","schema","buildSchema","isEmpty","path","landingPage","pluginAddRootQueryArgs","requestDidStart","executionDidStart","willResolveField","source","args","contextValue","info","operation","rootQueryArgs","defaultServerConfig","validationRules","depthLimit","formatError","formatGraphqlError","cors","uploads","bodyParserConfig","status400ForVariableCoercionErrors","plugins","cache","serverConfig","server","ApolloServer","start","error","Error","message","handler","push","isObject","bodyParser","ctx","next","state","route","type","isPlaygroundRequest","request","method","url","isEnabled","header","accept","includes","auth","authenticate","koaMiddleware","context","koaContext","routes","destroy","stop"],"mappings":"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"}