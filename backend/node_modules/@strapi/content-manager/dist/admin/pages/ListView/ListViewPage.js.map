{"version":3,"file":"ListViewPage.js","sources":["../../../../admin/src/pages/ListView/ListViewPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  SearchInput,\n  Table,\n  BackButton,\n  useNotification,\n  useStrapiApp,\n  useTracking,\n  useAPIErrorHandler,\n  useQueryParams,\n  useRBAC,\n  Layouts,\n  useTable,\n  tours,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Typography,\n  ButtonProps,\n  Box,\n  EmptyStateLayout,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport isEqual from 'lodash/isEqual';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, Link as ReactRouterLink, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { InjectionZone } from '../../components/InjectionZone';\nimport { HOOKS } from '../../constants/hooks';\nimport { PERMISSIONS } from '../../constants/plugin';\nimport { DocumentRBAC, useDocumentRBAC } from '../../features/DocumentRBAC';\nimport { useDoc } from '../../hooks/useDocument';\nimport {\n  ListFieldLayout,\n  convertListLayoutToFieldLayouts,\n  useDocumentLayout,\n} from '../../hooks/useDocumentLayout';\nimport { usePrev } from '../../hooks/usePrev';\nimport { useGetAllDocumentsQuery } from '../../services/documents';\nimport { buildValidParams } from '../../utils/api';\nimport { getTranslation } from '../../utils/translations';\nimport { getDisplayName } from '../../utils/users';\nimport { DocumentStatus } from '../EditView/components/DocumentStatus';\n\nimport { BulkActionsRenderer } from './components/BulkActions/Actions';\nimport { Filters } from './components/Filters';\nimport { TableActions } from './components/TableActions';\nimport { CellContent } from './components/TableCells/CellContent';\nimport { ViewSettingsMenu } from './components/ViewSettingsMenu';\n\nimport type { Modules } from '@strapi/types';\n\nconst { INJECT_COLUMN_IN_TABLE } = HOOKS;\n\n/* -------------------------------------------------------------------------------------------------\n * ListViewPage\n * -----------------------------------------------------------------------------------------------*/\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\n  overflow-wrap: anywhere;\n`;\n\nconst ListViewPage = () => {\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n\n  const { collectionType, model, schema } = useDoc();\n  const { list } = useDocumentLayout(model);\n\n  const [displayedHeaders, setDisplayedHeaders] = React.useState<ListFieldLayout[]>([]);\n\n  const listLayout = usePrev(list.layout);\n  React.useEffect(() => {\n    /**\n     * ONLY update the displayedHeaders if the document\n     * layout has actually changed in value.\n     */\n    if (!isEqual(listLayout, list.layout)) {\n      setDisplayedHeaders(list.layout);\n    }\n  }, [list.layout, listLayout]);\n\n  const handleSetHeaders = (headers: string[]) => {\n    setDisplayedHeaders(\n      convertListLayoutToFieldLayouts(headers, schema!.attributes, list.metadatas)\n    );\n  };\n\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n    page?: string;\n    pageSize?: string;\n    sort?: string;\n  }>({\n    page: '1',\n    pageSize: list.settings.pageSize.toString(),\n    sort: list.settings.defaultSortBy\n      ? `${list.settings.defaultSortBy}:${list.settings.defaultSortOrder}`\n      : '',\n  });\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const { data, error, isFetching } = useGetAllDocumentsQuery({\n    model,\n    params,\n  });\n\n  /**\n   * If the API returns an error, display a notification\n   */\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const { results = [], pagination } = data ?? {};\n\n  React.useEffect(() => {\n    if (pagination && pagination.pageCount > 0 && pagination.page > pagination.pageCount) {\n      navigate(\n        {\n          search: stringify({\n            ...query,\n            page: pagination.pageCount,\n          }),\n        },\n        { replace: true }\n      );\n    }\n  }, [pagination, formatMessage, query, navigate]);\n\n  const { canCreate } = useDocumentRBAC('ListViewPage', ({ canCreate }) => ({\n    canCreate,\n  }));\n\n  const runHookWaterfall = useStrapiApp('ListViewPage', ({ runHookWaterfall }) => runHookWaterfall);\n  /**\n   * Run the waterfall and then inject our additional table headers.\n   */\n  const tableHeaders = React.useMemo(() => {\n    const headers = runHookWaterfall(INJECT_COLUMN_IN_TABLE, {\n      displayedHeaders,\n      layout: list,\n    });\n\n    const formattedHeaders = headers.displayedHeaders.map<ListFieldLayout>((header) => {\n      /**\n       * When the header label is a string, it is an attribute on the current content-type:\n       * Use the attribute name value to compute the translation.\n       * Otherwise, it should be a  translation object coming from a plugin that injects into the table (ie i18n, content-releases, review-workflows):\n       * Use the translation object as is.\n       */\n      const translation =\n        typeof header.label === 'string'\n          ? {\n              id: `content-manager.content-types.${model}.${header.name}`,\n              defaultMessage: header.label,\n            }\n          : header.label;\n\n      return {\n        ...header,\n        label: formatMessage(translation),\n        name: `${header.name}${header.mainField?.name ? `.${header.mainField.name}` : ''}`,\n      };\n    });\n\n    if (schema?.options?.draftAndPublish) {\n      formattedHeaders.push({\n        attribute: {\n          type: 'custom',\n        },\n        name: 'status',\n        label: formatMessage({\n          id: getTranslation(`containers.list.table-headers.status`),\n          defaultMessage: 'status',\n        }),\n        searchable: false,\n        sortable: false,\n      } satisfies ListFieldLayout);\n    }\n\n    return formattedHeaders;\n  }, [\n    displayedHeaders,\n    formatMessage,\n    list,\n    runHookWaterfall,\n    schema?.options?.draftAndPublish,\n    model,\n  ]);\n\n  if (isFetching) {\n    return <Page.Loading />;\n  }\n\n  if (error) {\n    return <Page.Error />;\n  }\n\n  const contentTypeTitle = schema?.info.displayName\n    ? formatMessage({ id: schema.info.displayName, defaultMessage: schema.info.displayName })\n    : formatMessage({\n        id: 'content-manager.containers.untitled',\n        defaultMessage: 'Untitled',\n      });\n\n  const handleRowClick = (id: Modules.Documents.ID) => () => {\n    trackUsage('willEditEntryFromList');\n    navigate({\n      pathname: id.toString(),\n      search: stringify({ plugins: query.plugins }),\n    });\n  };\n\n  if (!isFetching && results.length === 0) {\n    return (\n      <>\n        <tours.contentManager.Introduction>\n          {/* Invisible Anchor */}\n          <Box />\n        </tours.contentManager.Introduction>\n        <Page.Main>\n          <Page.Title>{`${contentTypeTitle}`}</Page.Title>\n          <LayoutsHeaderCustom\n            primaryAction={canCreate ? <CreateButton /> : null}\n            subtitle={formatMessage(\n              {\n                id: getTranslation('pages.ListView.header-subtitle'),\n                defaultMessage:\n                  '{number, plural, =0 {# entries} one {# entry} other {# entries}} found',\n              },\n              { number: pagination?.total }\n            )}\n            title={contentTypeTitle}\n            navigationAction={<BackButton />}\n          />\n          <Layouts.Action\n            endActions={\n              <>\n                <InjectionZone area=\"listView.actions\" />\n                <ViewSettingsMenu\n                  setHeaders={handleSetHeaders}\n                  resetHeaders={() => setDisplayedHeaders(list.layout)}\n                  headers={displayedHeaders.map((header) => header.name)}\n                />\n              </>\n            }\n            startActions={\n              <>\n                {list.settings.searchable && (\n                  <SearchInput\n                    disabled={results.length === 0}\n                    label={formatMessage(\n                      { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                      { target: contentTypeTitle }\n                    )}\n                    placeholder={formatMessage({\n                      id: 'global.search',\n                      defaultMessage: 'Search',\n                    })}\n                    trackedEvent=\"didSearch\"\n                  />\n                )}\n                {list.settings.filterable && schema ? (\n                  <Filters disabled={results.length === 0} schema={schema} />\n                ) : null}\n              </>\n            }\n          />\n          <Layouts.Content>\n            <Box background=\"neutral0\" shadow=\"filterShadow\" hasRadius>\n              <EmptyStateLayout\n                action={canCreate ? <CreateButton variant=\"secondary\" /> : null}\n                content={formatMessage({\n                  id: 'app.components.EmptyStateLayout.content-document',\n                  defaultMessage: 'No content found',\n                })}\n                hasRadius\n                icon={<EmptyDocuments width=\"16rem\" />}\n              />\n            </Box>\n          </Layouts.Content>\n        </Page.Main>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <tours.contentManager.Introduction>\n        {/* Invisible Anchor */}\n        <Box />\n      </tours.contentManager.Introduction>\n      <Page.Main>\n        <Page.Title>{`${contentTypeTitle}`}</Page.Title>\n        <LayoutsHeaderCustom\n          primaryAction={canCreate ? <CreateButton /> : null}\n          subtitle={formatMessage(\n            {\n              id: getTranslation('pages.ListView.header-subtitle'),\n              defaultMessage:\n                '{number, plural, =0 {# entries} one {# entry} other {# entries}} found',\n            },\n            { number: pagination?.total }\n          )}\n          title={contentTypeTitle}\n          navigationAction={<BackButton />}\n        />\n        <Layouts.Action\n          endActions={\n            <>\n              <InjectionZone area=\"listView.actions\" />\n              <ViewSettingsMenu\n                setHeaders={handleSetHeaders}\n                resetHeaders={() => setDisplayedHeaders(list.layout)}\n                headers={displayedHeaders.map((header) => header.name)}\n              />\n            </>\n          }\n          startActions={\n            <>\n              {list.settings.searchable && (\n                <SearchInput\n                  disabled={results.length === 0}\n                  label={formatMessage(\n                    { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                    { target: contentTypeTitle }\n                  )}\n                  placeholder={formatMessage({\n                    id: 'global.search',\n                    defaultMessage: 'Search',\n                  })}\n                  trackedEvent=\"didSearch\"\n                />\n              )}\n              {list.settings.filterable && schema ? (\n                <Filters disabled={results.length === 0} schema={schema} />\n              ) : null}\n            </>\n          }\n        />\n        <Layouts.Content>\n          <Flex gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Table.Root rows={results} headers={tableHeaders} isLoading={isFetching}>\n              <TableActionsBar />\n              <Table.Content>\n                <Table.Head>\n                  <Table.HeaderCheckboxCell />\n                  {tableHeaders.map((header: ListFieldLayout) => (\n                    <Table.HeaderCell key={header.name} {...header} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Empty action={canCreate ? <CreateButton variant=\"secondary\" /> : null} />\n                <Table.Body>\n                  {results.map((row) => {\n                    return (\n                      <Table.Row\n                        cursor=\"pointer\"\n                        key={row.id}\n                        onClick={handleRowClick(row.documentId)}\n                      >\n                        <Table.CheckboxCell id={row.id} />\n                        {tableHeaders.map(({ cellFormatter, ...header }) => {\n                          if (header.name === 'status') {\n                            const { status } = row;\n\n                            return (\n                              <Table.Cell key={header.name}>\n                                <DocumentStatus status={status} maxWidth={'min-content'} />\n                              </Table.Cell>\n                            );\n                          }\n                          if (['createdBy', 'updatedBy'].includes(header.name.split('.')[0])) {\n                            // Display the users full name\n                            // Some entries doesn't have a user assigned as creator/updater (ex: entries created through content API)\n                            // In this case, we display a dash\n                            return (\n                              <Table.Cell key={header.name}>\n                                <Typography textColor=\"neutral800\">\n                                  {row[header.name.split('.')[0]]\n                                    ? getDisplayName(row[header.name.split('.')[0]])\n                                    : '-'}\n                                </Typography>\n                              </Table.Cell>\n                            );\n                          }\n                          if (typeof cellFormatter === 'function') {\n                            return (\n                              <Table.Cell key={header.name}>\n                                {/* @ts-expect-error – TODO: fix this TS error */}\n                                {cellFormatter(row, header, { collectionType, model })}\n                              </Table.Cell>\n                            );\n                          }\n                          return (\n                            <Table.Cell key={header.name}>\n                              <CellContent\n                                content={row[header.name.split('.')[0]]}\n                                rowId={row.documentId}\n                                {...header}\n                              />\n                            </Table.Cell>\n                          );\n                        })}\n                        {/* we stop propagation here to allow the menu to trigger it's events without triggering the row redirect */}\n                        <ActionsCell onClick={(e) => e.stopPropagation()}>\n                          <TableActions document={row} />\n                        </ActionsCell>\n                      </Table.Row>\n                    );\n                  })}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n            <Pagination.Root\n              {...pagination}\n              onPageSizeChange={() => trackUsage('willChangeNumberOfEntriesPerPage')}\n            >\n              <Pagination.PageSize />\n              <Pagination.Links />\n            </Pagination.Root>\n          </Flex>\n        </Layouts.Content>\n      </Page.Main>\n    </>\n  );\n};\n\nconst ActionsCell = styled(Table.Cell)`\n  display: flex;\n  justify-content: flex-end;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * TableActionsBar\n * -----------------------------------------------------------------------------------------------*/\n\nconst TableActionsBar = () => {\n  const selectRow = useTable('TableActionsBar', (state) => state.selectRow);\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\n  const locale = query?.plugins?.i18n?.locale;\n  const prevLocale = usePrev(locale);\n\n  // TODO: find a better way to reset the selected rows when the locale changes across all the app\n  React.useEffect(() => {\n    if (prevLocale !== locale) {\n      selectRow([]);\n    }\n  }, [selectRow, prevLocale, locale]);\n\n  return (\n    <Table.ActionBar>\n      <BulkActionsRenderer />\n    </Table.ActionBar>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CreateButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CreateButtonProps extends Pick<ButtonProps, 'variant'> {}\n\nconst CreateButton = ({ variant }: CreateButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [{ query }] = useQueryParams<{ plugins: object }>();\n\n  return (\n    <Button\n      variant={variant}\n      tag={ReactRouterLink}\n      onClick={() => {\n        trackUsage('willCreateEntry', { status: 'draft' });\n      }}\n      startIcon={<Plus />}\n      style={{ textDecoration: 'none' }}\n      to={{\n        pathname: 'create',\n        search: stringify({ plugins: query.plugins }),\n      }}\n      minWidth=\"max-content\"\n      marginLeft={2}\n    >\n      {formatMessage({\n        id: getTranslation('HeaderLayout.button.label-add-entry'),\n        defaultMessage: 'Create new entry',\n      })}\n    </Button>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListViewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListViewPage = () => {\n  const { slug = '' } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC(\n    PERMISSIONS.map((action) => ({\n      action,\n      subject: slug,\n    }))\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !slug) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Protect permissions={permissions}>\n      {({ permissions }) => (\n        <DocumentRBAC permissions={permissions}>\n          <ListViewPage />\n        </DocumentRBAC>\n      )}\n    </Page.Protect>\n  );\n};\n\nexport { ListViewPage, ProtectedListViewPage };\n"],"names":["INJECT_COLUMN_IN_TABLE","HOOKS","LayoutsHeaderCustom","styled","Layouts","Header","ListViewPage","trackUsage","useTracking","navigate","useNavigate","formatMessage","useIntl","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","getTranslation","collectionType","model","schema","useDoc","list","useDocumentLayout","displayedHeaders","setDisplayedHeaders","React","useState","listLayout","usePrev","layout","useEffect","isEqual","handleSetHeaders","headers","convertListLayoutToFieldLayouts","attributes","metadatas","query","useQueryParams","page","pageSize","settings","toString","sort","defaultSortBy","defaultSortOrder","params","useMemo","buildValidParams","data","error","isFetching","useGetAllDocumentsQuery","type","message","results","pagination","pageCount","search","stringify","replace","canCreate","useDocumentRBAC","runHookWaterfall","useStrapiApp","tableHeaders","formattedHeaders","map","header","translation","label","id","name","defaultMessage","mainField","options","draftAndPublish","push","attribute","searchable","sortable","_jsx","Page","Loading","Error","contentTypeTitle","info","displayName","handleRowClick","pathname","plugins","length","_jsxs","_Fragment","tours","contentManager","Introduction","Box","Main","Title","primaryAction","CreateButton","subtitle","number","total","title","navigationAction","BackButton","Action","endActions","InjectionZone","area","ViewSettingsMenu","setHeaders","resetHeaders","startActions","SearchInput","disabled","target","placeholder","trackedEvent","filterable","Filters","Content","background","shadow","hasRadius","EmptyStateLayout","action","variant","content","icon","EmptyDocuments","width","Flex","gap","direction","alignItems","Table","Root","rows","isLoading","TableActionsBar","Head","HeaderCheckboxCell","HeaderCell","Empty","Body","row","Row","cursor","onClick","documentId","CheckboxCell","cellFormatter","status","Cell","DocumentStatus","maxWidth","includes","split","Typography","textColor","getDisplayName","CellContent","rowId","ActionsCell","e","stopPropagation","TableActions","document","Pagination","onPageSizeChange","PageSize","Links","selectRow","useTable","state","locale","i18n","prevLocale","ActionBar","BulkActionsRenderer","Button","tag","ReactRouterLink","startIcon","Plus","style","textDecoration","to","minWidth","marginLeft","ProtectedListViewPage","slug","useParams","permissions","useRBAC","PERMISSIONS","subject","Protect","DocumentRBAC"],"mappings":"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"}