'use strict';

var jsxRuntime = require('react/jsx-runtime');
require('react');
var strapiAdmin = require('@strapi/admin/strapi-admin');
var designSystem = require('@strapi/design-system');
var InputRenderer = require('../../pages/EditView/components/InputRenderer.js');
var Preview = require('../pages/Preview.js');

const [InputPopoverProvider, useInputPopoverContext] = strapiAdmin.createContext('InputPopover');
const InputPopover = ({ documentResponse })=>{
    const iframeRef = Preview.usePreviewContext('VisualEditingPopover', (state)=>state.iframeRef);
    const popoverField = Preview.usePreviewContext('VisualEditingPopover', (state)=>state.popoverField);
    const setPopoverField = Preview.usePreviewContext('VisualEditingPopover', (state)=>state.setPopoverField);
    if (!popoverField || !documentResponse.schema || !iframeRef.current) {
        return null;
    }
    const iframeRect = iframeRef.current.getBoundingClientRect();
    return /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                position: 'fixed',
                top: iframeRect.top + 'px',
                left: iframeRect.left + 'px',
                width: iframeRect.width + 'px',
                height: iframeRect.height + 'px',
                zIndex: 4
            }),
            /*#__PURE__*/ jsxRuntime.jsx(InputPopoverProvider, {
                children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Popover.Root, {
                    open: true,
                    onOpenChange: (open)=>!open && setPopoverField(null),
                    children: [
                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Popover.Trigger, {
                            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                position: "fixed",
                                width: popoverField.position.width + 'px',
                                height: popoverField.position.height + 'px',
                                top: 0,
                                left: 0,
                                transform: `translate(${iframeRect.left + popoverField.position.left}px, ${iframeRect.top + popoverField.position.top}px)`
                            })
                        }),
                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Popover.Content, {
                            sideOffset: 4,
                            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                padding: 4,
                                width: "400px",
                                children: /*#__PURE__*/ jsxRuntime.jsx(InputRenderer.InputRenderer, {
                                    document: documentResponse,
                                    attribute: documentResponse.schema.attributes[popoverField.path],
                                    label: popoverField.path,
                                    name: popoverField.path,
                                    type: documentResponse.schema.attributes[popoverField.path].type,
                                    visible: true
                                })
                            })
                        })
                    ]
                })
            })
        ]
    });
};
function useHasInputPopoverParent() {
    const context = useInputPopoverContext('useHasInputPopoverParent', ()=>true, false);
    // useContext will return undefined if the called is not wrapped in the provider
    return context !== undefined;
}

exports.InputPopover = InputPopover;
exports.useHasInputPopoverParent = useHasInputPopoverParent;
//# sourceMappingURL=InputPopover.js.map
