{"version":3,"file":"utils.mjs","sources":["../../../../src/core-api/routes/validation/utils.ts"],"sourcesContent":["import { transformUidToValidOpenApiName } from '@strapi/utils';\nimport type { Internal } from '@strapi/types';\nimport * as z from 'zod/v4';\n\n/**\n * Safely adds or updates a schema in Zod's global registry.\n *\n * If a schema with the given `id` already exists, it will be removed before adding the new one.\n *\n * This is useful for hot-reloading or preventing issues with cyclical dependencies.\n *\n * @param id - The unique identifier for the schema in the global registry.\n * @param schema - The Zod schema to register.\n * @example\n * ```typescript\n * safeGlobalRegistrySet(\"mySchema\", z.object({ name: z.string() }));\n * ```\n */\nexport const safeGlobalRegistrySet = (id: Internal.UID.Schema, schema: z.ZodType) => {\n  try {\n    const { _idmap: idMap } = z.globalRegistry;\n\n    const transformedId = transformUidToValidOpenApiName(id);\n\n    if (idMap.has(transformedId)) {\n      // Remove existing schema to prevent conflicts\n      strapi.log.debug(`Removing existing schema ${transformedId} from registry`);\n      idMap.delete(transformedId);\n    }\n\n    // Register the new schema with the transformed ID\n    strapi.log.debug(`Registering schema ${transformedId} in global registry`);\n    z.globalRegistry.add(schema, { id: transformedId });\n  } catch (error) {\n    strapi.log.error(\n      `Schema registration failed: Failed to register schema ${id} in global registry`\n    );\n\n    throw error;\n  }\n};\n\n/**\n * Safely creates and registers a Zod schema in the global registry, particularly useful for handling cyclical data structures.\n *\n * If a schema with the given `id` already exists in the global registry, it returns the existing schema.\n *\n * Otherwise, it registers a temporary `z.any()` schema, calls the provided `callback` to create the actual schema,\n * and then replaces the temporary schema with the actual one in the registry.\n *\n * This prevents infinite loops in cases of cyclical dependencies.\n *\n * @param id - The unique identifier for the schema in the global registry.\n * @param callback - A function that returns the Zod schema to be created and registered.\n * @returns The created or retrieved Zod schema.\n * @example\n * ```typescript\n * const CategorySchema = safeSchemaCreation(\"Category\", () =>\n *   z.object({\n *     name: z.string(),\n *     products: z.array(safeSchemaCreation(\"Product\", () =>\n *       z.object({\n *         name: z.string(),\n *         category: z.lazy(() => CategorySchema) // Cyclical reference\n *       })\n *     ))\n *   })\n * );\n * ```\n */\nexport const safeSchemaCreation = (id: Internal.UID.Schema, callback: () => z.ZodType) => {\n  try {\n    const { _idmap: idMap } = z.globalRegistry;\n\n    const transformedId = transformUidToValidOpenApiName(id);\n\n    // Return existing schema if already registered\n    const mapItem = idMap.get(transformedId);\n    if (mapItem) {\n      strapi.log.debug(`Schema ${transformedId} found in registry, returning existing schema`);\n      return mapItem;\n    }\n\n    strapi.log.warn(\n      `Schema ${transformedId} not found in global registry, creating an any placeholder`\n    );\n\n    // Temporary any placeholder before replacing with the actual schema type\n    // Used to prevent infinite loops in cyclical data structures\n    safeGlobalRegistrySet(id, z.any());\n\n    // Generate the actual schema using the callback\n    const schema = callback();\n\n    // Replace the placeholder with the real schema\n    safeGlobalRegistrySet(id, schema);\n\n    strapi.log.debug(`Schema ${transformedId} successfully created and registered`);\n\n    return schema;\n  } catch (error) {\n    strapi.log.error(`Schema creation failed: Failed to create schema ${id}`);\n\n    throw error;\n  }\n};\n"],"names":["safeGlobalRegistrySet","id","schema","_idmap","idMap","z","globalRegistry","transformedId","transformUidToValidOpenApiName","has","strapi","log","debug","delete","add","error","safeSchemaCreation","callback","mapItem","get","warn","any"],"mappings":";;;AAIA;;;;;;;;;;;;;AAaC,IACM,MAAMA,qBAAwB,GAAA,CAACC,EAAyBC,EAAAA,MAAAA,GAAAA;IAC7D,IAAI;AACF,QAAA,MAAM,EAAEC,MAAQC,EAAAA,KAAK,EAAE,GAAGC,EAAEC,cAAc;AAE1C,QAAA,MAAMC,gBAAgBC,8BAA+BP,CAAAA,EAAAA,CAAAA;QAErD,IAAIG,KAAAA,CAAMK,GAAG,CAACF,aAAgB,CAAA,EAAA;;YAE5BG,MAAOC,CAAAA,GAAG,CAACC,KAAK,CAAC,CAAC,yBAAyB,EAAEL,aAAc,CAAA,cAAc,CAAC,CAAA;AAC1EH,YAAAA,KAAAA,CAAMS,MAAM,CAACN,aAAAA,CAAAA;AACf;;QAGAG,MAAOC,CAAAA,GAAG,CAACC,KAAK,CAAC,CAAC,mBAAmB,EAAEL,aAAc,CAAA,mBAAmB,CAAC,CAAA;AACzEF,QAAAA,CAAAA,CAAEC,cAAc,CAACQ,GAAG,CAACZ,MAAQ,EAAA;YAAED,EAAIM,EAAAA;AAAc,SAAA,CAAA;AACnD,KAAA,CAAE,OAAOQ,KAAO,EAAA;QACdL,MAAOC,CAAAA,GAAG,CAACI,KAAK,CACd,CAAC,sDAAsD,EAAEd,EAAG,CAAA,mBAAmB,CAAC,CAAA;QAGlF,MAAMc,KAAAA;AACR;AACF;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BC,IACM,MAAMC,kBAAqB,GAAA,CAACf,EAAyBgB,EAAAA,QAAAA,GAAAA;IAC1D,IAAI;AACF,QAAA,MAAM,EAAEd,MAAQC,EAAAA,KAAK,EAAE,GAAGC,EAAEC,cAAc;AAE1C,QAAA,MAAMC,gBAAgBC,8BAA+BP,CAAAA,EAAAA,CAAAA;;QAGrD,MAAMiB,OAAAA,GAAUd,KAAMe,CAAAA,GAAG,CAACZ,aAAAA,CAAAA;AAC1B,QAAA,IAAIW,OAAS,EAAA;YACXR,MAAOC,CAAAA,GAAG,CAACC,KAAK,CAAC,CAAC,OAAO,EAAEL,aAAc,CAAA,6CAA6C,CAAC,CAAA;YACvF,OAAOW,OAAAA;AACT;QAEAR,MAAOC,CAAAA,GAAG,CAACS,IAAI,CACb,CAAC,OAAO,EAAEb,aAAc,CAAA,0DAA0D,CAAC,CAAA;;;QAKrFP,qBAAsBC,CAAAA,EAAAA,EAAII,EAAEgB,GAAG,EAAA,CAAA;;AAG/B,QAAA,MAAMnB,MAASe,GAAAA,QAAAA,EAAAA;;AAGfjB,QAAAA,qBAAAA,CAAsBC,EAAIC,EAAAA,MAAAA,CAAAA;QAE1BQ,MAAOC,CAAAA,GAAG,CAACC,KAAK,CAAC,CAAC,OAAO,EAAEL,aAAc,CAAA,oCAAoC,CAAC,CAAA;QAE9E,OAAOL,MAAAA;AACT,KAAA,CAAE,OAAOa,KAAO,EAAA;QACdL,MAAOC,CAAAA,GAAG,CAACI,KAAK,CAAC,CAAC,gDAAgD,EAAEd,GAAG,CAAC,CAAA;QAExE,MAAMc,KAAAA;AACR;AACF;;;;"}