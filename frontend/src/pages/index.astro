---
import Layout from '../layouts/Layout.astro';
import { strapi } from '../lib/strapi';

let strapiStatus = 'Not connected';
let strapiUrl = import.meta.env.PUBLIC_STRAPI_URL || 'http://localhost:1337';

console.log('üîß DEBUG: Environment check');
console.log('PUBLIC_STRAPI_URL from env:', import.meta.env.PUBLIC_STRAPI_URL);
console.log('Final strapiUrl:', strapiUrl);

// Fetch content from Strapi
let dosageProducts = [];
let dosageForms = [];
let deals = [];
let cannabinoidTypes = [];
let ingredients = [];
let apiError = null;

try {
  console.log('üöÄ DEBUG: Starting API connection test');
  
  // Test connection to Strapi with timeout
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
  
  const testUrl = `${strapiUrl}/api/dosage-products?pagination[limit]=1`;
  console.log('üîç DEBUG: Testing URL:', testUrl);
  
  const healthResponse = await fetch(testUrl, {
    signal: controller.signal
  });
  clearTimeout(timeoutId);
  
  console.log('üì° DEBUG: Health response status:', healthResponse.status);
  console.log('üì° DEBUG: Health response ok:', healthResponse.ok);
  
  if (healthResponse.ok) {
    strapiStatus = 'Connected';
    console.log('‚úÖ DEBUG: Health check passed, fetching data');
    
    // Fetch all content types from Strapi API
    console.log('üì¶ DEBUG: Fetching dosage products...');
    const productsResponse = await strapi.getMany('/dosage-products', { 
      'populate': '*',
      'pagination[limit]': '20'
    });
    
    console.log('üìã DEBUG: Fetching dosage forms...');
    const formsResponse = await strapi.getMany('/dosage-forms', { 
      'populate': '*',
      'pagination[limit]': '100'
    });
    
    console.log('üéØ DEBUG: Fetching deals...');
    const dealsResponse = await strapi.getMany('/deals', { 
      'populate': '*',
      'pagination[limit]': '10'
    });
    
    console.log('üß¨ DEBUG: Fetching cannabinoid types...');
    const cannabinoidsResponse = await strapi.getMany('/cannaboid-types', { 
      'populate': '*',
      'pagination[limit]': '20'
    });
    
    console.log('üåø DEBUG: Fetching ingredients...');
    const ingredientsResponse = await strapi.getMany('/ingredients', { 
      'populate': '*',
      'pagination[limit]': '20'
    });
    
    if (productsResponse && productsResponse.data && productsResponse.data.length > 0) {
      console.log('üéØ DEBUG: Processing products data, found:', productsResponse.data.length, 'items');
      console.log('üéØ DEBUG: First product raw data:', productsResponse.data[0]);
      
      dosageProducts = productsResponse.data.map(product => ({
        id: product.id,
        documentId: product.documentId,
        name: product.Name || product.Title || product.name || 'Unnamed Product',
        description: product.Description || product.description || 'No description available',
        slug: product.slug || (product.Name || product.Title)?.toLowerCase().replace(/[^a-z0-9]+/g, '-') || `product-${product.id}`,
        image: product.image?.url ? `${strapiUrl}${product.image.url}` : `https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?w=400&h=300&fit=crop&q=80`,
        dosageForm: product.dosage_form?.Title || product.dosage_form?.Name || 'Other',
        category: product.cannaboid_type?.Title || product.cannaboid_type?.Name || 'General',
        quantity: product.Quanity || product.quantity,
        unitType: product.unit_type?.Name || product.unit_type?.Title,
        cannabinoidType: product.cannaboid_type?.Title || product.cannaboid_type?.Name,
        ingredients: product.ingredients || [],
        createdAt: product.createdAt,
        updatedAt: product.updatedAt,
        publishedAt: product.publishedAt
      })).filter(product => product.publishedAt); // Only show published products
      
      console.log('‚ú® DEBUG: Processed products:', dosageProducts.length, 'items');
      console.log('‚ú® DEBUG: First processed product:', dosageProducts[0]);
    } else {
      console.log('‚ùå DEBUG: No products data found in response');
      console.log('‚ùå DEBUG: productsResponse exists:', !!productsResponse);
      console.log('‚ùå DEBUG: productsResponse.data exists:', !!(productsResponse && productsResponse.data));
      console.log('‚ùå DEBUG: productsResponse.data length:', productsResponse?.data?.length || 0);
    }
    
    // Process dosage forms
    if (formsResponse && formsResponse.data && formsResponse.data.length > 0) {
      dosageForms = formsResponse.data.map(form => ({
        id: form.id,
        name: form.Title || form.Name || form.name || 'Unnamed Form',
        description: form.Description || form.description,
        slug: form.SEO_Title_Slug || form.slug || form.Title?.toLowerCase().replace(/[^a-z0-9]+/g, '-') || `form-${form.id}`,
        image: form.Form_Image?.url ? `${strapiUrl}${form.Form_Image.url}` : null,
        publishedAt: form.publishedAt
      })).filter(form => form.publishedAt);
    }
    
    // Process deals
    if (dealsResponse && dealsResponse.data && dealsResponse.data.length > 0) {
      deals = dealsResponse.data.map(deal => ({
        id: deal.id,
        title: deal.title || 'Unnamed Deal',
        description: deal.description || 'No description available',
        price: deal.price,
        originalPrice: deal.originalPrice,
        discount: deal.discount,
        category: deal.category || 'General',
        featured: deal.featured || false,
        slug: deal.slug || deal.title?.toLowerCase().replace(/[^a-z0-9]+/g, '-') || `deal-${deal.id}`,
        publishedAt: deal.publishedAt
      })).filter(deal => deal.publishedAt);
    }
    
    // Process cannabinoid types
    if (cannabinoidsResponse && cannabinoidsResponse.data && cannabinoidsResponse.data.length > 0) {
      cannabinoidTypes = cannabinoidsResponse.data.map(cannabinoid => ({
        id: cannabinoid.id,
        name: cannabinoid.Title || cannabinoid.Name || cannabinoid.name || 'Unnamed Cannabinoid',
        description: cannabinoid.Description || cannabinoid.description || 'No description available',
        slug: cannabinoid.slug,
        publishedAt: cannabinoid.publishedAt
      })).filter(cannabinoid => cannabinoid.publishedAt);
    }
    
    // Process ingredients
    if (ingredientsResponse && ingredientsResponse.data && ingredientsResponse.data.length > 0) {
      ingredients = ingredientsResponse.data.map(ingredient => ({
        id: ingredient.id,
        name: ingredient.Name || ingredient.name || 'Unnamed Ingredient',
        description: ingredient.Description || ingredient.description || 'No description available',
        publishedAt: ingredient.publishedAt
      })).filter(ingredient => ingredient.publishedAt);
    }
  } else {
    console.log('‚ùå DEBUG: Health check failed with status:', healthResponse.status);
    const errorText = await healthResponse.text();
    console.log('‚ùå DEBUG: Error response body:', errorText);
    throw new Error(`HTTP ${healthResponse.status}`);
  }
} catch (error) {
  console.log('üí• DEBUG: Catch block - Error occurred:', error);
  console.log('üí• DEBUG: Error name:', error.name);
  console.log('üí• DEBUG: Error message:', error.message);
  
  strapiStatus = 'Disconnected - Cannot connect to backend';
  apiError = error.name === 'AbortError' ? 'Connection timeout' : error.message;
  
  // Comprehensive cannabis product catalog - expanded fallback data
  console.log('üîÑ DEBUG: Using comprehensive cannabis product catalog from backup');
  dosageProducts = [
    // INHALATION PRODUCTS
    {
      id: 16,
      name: 'All in One - Distillate',
      description: 'Premium distillate cartridge with full spectrum cannabinoids for potent, clean vapor',
      slug: 'all-in-one-distillate',
      image: 'https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?w=400&h=300&fit=crop&q=80',
      dosageForm: 'Inhalation',
      category: 'Concentrate',
      potency: '85-90% THC',
      strain: 'Hybrid',
      size: '1g',
      price: '$45',
      createdAt: '2025-08-26T17:39:09.534Z',
      updatedAt: '2025-08-26T23:28:01.391Z',
      publishedAt: '2025-08-26T23:28:01.419Z'
    },
    // SUBLINGUAL PRODUCTS
    {
      id: 28,
      name: 'THC Tincture - Fast Acting',
      description: 'Fast-absorbing sublingual THC tincture with precise dosing dropper',
      slug: 'thc-tincture-fast-acting',
      image: 'https://images.unsplash.com/photo-1612178537253-bccd437b730e?w=400&h=300&fit=crop&q=80',
      dosageForm: 'Sublingual',
      category: 'Tincture',
      potency: '10mg/mL THC',
      strain: 'Full Spectrum',
      size: '30mL',
      price: '$48',
      createdAt: '2025-08-27T16:00:00.000Z',
      updatedAt: '2025-08-27T16:00:00.000Z',
      publishedAt: '2025-08-27T16:00:00.000Z'
    },
    {
      id: 30,
      name: 'Sleep Tincture - CBN Blend',
      description: 'Nighttime tincture with CBN and THC for deep, restful sleep',
      slug: 'sleep-tincture-cbn-blend',
      image: 'https://images.unsplash.com/photo-1612178537253-bccd437b730e?w=400&h=300&fit=crop&q=80',
      dosageForm: 'Sublingual',
      category: 'Sleep Aid',
      potency: '5mg THC / 10mg CBN per mL',
      strain: 'Indica Blend',
      size: '30mL',
      price: '$55',
      createdAt: '2025-08-27T17:00:00.000Z',
      updatedAt: '2025-08-27T17:00:00.000Z',
      publishedAt: '2025-08-27T17:00:00.000Z'
    },

    // EDIBLE PRODUCTS
    {
      id: 31,
      name: 'Gummies - Mixed Berry',
      description: 'Delicious mixed berry gummies with precise 5mg THC dosing',
      slug: 'gummies-mixed-berry',
      image: 'https://images.unsplash.com/photo-1582048928301-2b9c1ed1b93a?w=400&h=300&fit=crop&q=80',
      dosageForm: 'Edibles',
      category: 'Gummy',
      potency: '5mg THC each',
      strain: 'Hybrid',
      size: '20 count (100mg total)',
      price: '$25',
      createdAt: '2025-08-27T18:00:00.000Z',
      updatedAt: '2025-08-27T18:00:00.000Z',
      publishedAt: '2025-08-27T18:00:00.000Z'
    },
    {
      id: 32,
      name: 'Chocolate Bar - Dark Cacao',
      description: 'Artisanal dark chocolate infused with premium cannabis extract',
      slug: 'chocolate-bar-dark-cacao',
      image: 'https://images.unsplash.com/photo-1549007994-cb92caebd54b?w=400&h=300&fit=crop&q=80',
      dosageForm: 'Edibles',
      category: 'Chocolate',
      potency: '10mg THC per square',
      strain: 'Sativa',
      size: '100mg total (10 squares)',
      price: '$22',
      createdAt: '2025-08-27T18:30:00.000Z',
      updatedAt: '2025-08-27T18:30:00.000Z',
      publishedAt: '2025-08-27T18:30:00.000Z'
    },
    {
      id: 33,
      name: 'Cookies - Snickerdoodle',
      description: 'Homestyle snickerdoodle cookies infused with cannabis butter',
      slug: 'cookies-snickerdoodle',
      image: 'https://images.unsplash.com/photo-1558961363-fa8fdf82db35?w=400&h=300&fit=crop&q=80',
      dosageForm: 'Edibles',
      category: 'Baked Goods',
      potency: '10mg THC each',
      strain: 'Indica',
      size: '2 count (20mg total)',
      price: '$18',
      createdAt: '2025-08-27T19:00:00.000Z',
      updatedAt: '2025-08-27T19:00:00.000Z',
      publishedAt: '2025-08-27T19:00:00.000Z'
    }
  ];
  
  dosageForms = [
    { id: 7, name: 'Inhalation', slug: 'inhalation', publishedAt: '2025-08-25T21:03:08.240Z' },
    { id: 11, name: 'Oral Capsule', slug: 'oral-capsule', publishedAt: '2025-08-26T17:19:19.769Z' },
    { id: 9, name: 'Sublingual', slug: 'sublingual', publishedAt: '2025-08-26T17:18:04.519Z' },
    { id: 13, name: 'Edibles', slug: 'edibles', publishedAt: '2025-08-26T17:20:13.643Z' }
  ];
}

// Group products by dosage form for filtering
const productsByDosageForm = {};
dosageProducts.forEach(product => {
  const formName = product.dosageForm || 'Other';
  if (!productsByDosageForm[formName]) {
    productsByDosageForm[formName] = [];
  }
  productsByDosageForm[formName].push(product);
});

// Get unique dosage forms that have products
const availableDosageForms = Object.keys(productsByDosageForm);

console.log('üìä DEBUG: Final summary:');
console.log('üìä DEBUG: Total products:', dosageProducts.length);
console.log('üìä DEBUG: Dosage forms found:', availableDosageForms);
console.log('üìä DEBUG: Products by form:', productsByDosageForm);
console.log('üìä DEBUG: Strapi status:', strapiStatus);
console.log('üìä DEBUG: API error:', apiError);
---

<Layout title="FLMintDeals - Cannabis Information Hub">
  <!-- Hero Section -->
  <div class="bg-gradient-to-r from-green-600 to-blue-700 text-white">
    <div class="px-4 py-16 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-4xl font-bold tracking-tight sm:text-5xl lg:text-6xl">
          FLMintDeals
        </h1>
        <p class="mt-6 text-xl text-green-100 max-w-3xl mx-auto">
          Your comprehensive cannabis information and deals platform. Explore products, ingredients, cannabinoids, and more.
        </p>
        <div class="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
          <a href="#featured" class="inline-flex items-center px-6 py-3 border border-transparent text-lg font-medium rounded-md text-green-700 bg-white hover:bg-green-50 transition-colors duration-200">
            Explore Content
          </a>
          <a href="#products" class="inline-flex items-center px-6 py-3 border-2 border-white text-lg font-medium rounded-md text-white hover:bg-white hover:text-green-700 transition-colors duration-200">
            Browse Products
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Status Bar -->
  <div class="bg-gray-50 py-3">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <span class="text-sm text-gray-600">Status:</span>
          <span class={`px-2 py-1 rounded text-xs font-medium ${strapiStatus === 'Connected' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            Backend {strapiStatus}
          </span>
        </div>
        <div class="text-sm text-gray-500">
          API: {strapiUrl}
        </div>
      </div>
    </div>
  </div>
  <!-- Featured Deals Section -->
  {deals.length > 0 && (
    <div id="featured" class="py-16 bg-white">
      <div class="px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 sm:text-4xl">Featured Deals</h2>
          <p class="mt-4 text-lg text-gray-600">Hand-picked deals with the biggest savings</p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
          {deals.slice(0, 6).map(deal => (
            <div class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
              <div class="p-6">
                <div class="flex items-center justify-between mb-2">
                  <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-semibold">
                    {deal.category}
                  </span>
                  {deal.discount && (
                    <span class="bg-red-500 text-white text-sm font-bold px-2 py-1 rounded">
                      -{deal.discount}%
                    </span>
                  )}
                </div>
                <h3 class="text-xl font-bold text-gray-900 mb-2">{deal.title}</h3>
                <p class="text-gray-600 mb-4">{deal.description}</p>
                {deal.price && (
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-2">
                      <span class="text-2xl font-bold text-blue-600">${deal.price}</span>
                      {deal.originalPrice && (
                        <span class="text-lg text-gray-500 line-through">${deal.originalPrice}</span>
                      )}
                    </div>
                    <span class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium">
                      View Deal
                    </span>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )}

  <!-- Cannabinoids Information Section -->
  {cannabinoidTypes.length > 0 && (
    <div class="py-16 bg-gray-50">
      <div class="px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 sm:text-4xl">Cannabinoid Types</h2>
          <p class="mt-4 text-lg text-gray-600">Learn about different cannabinoids and their properties</p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-7xl mx-auto">
          {cannabinoidTypes.slice(0, 8).map(cannabinoid => (
            <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300">
              <h3 class="text-lg font-semibold text-gray-900 mb-2">{cannabinoid.name}</h3>
              <p class="text-gray-600 text-sm">{cannabinoid.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  )}

  <!-- Dosage Products Section -->
  <div id="products" class="py-16 bg-white">
    <div class="px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 sm:text-4xl">Dosage Products</h2>
        <p class="mt-4 text-lg text-gray-600">Browse products organized by dosage form</p>
      </div>

      {dosageProducts.length > 0 ? (
        <div class="space-y-16">
          {availableDosageForms.map(dosageForm => (
            <div key={dosageForm} class="max-w-7xl mx-auto">
              <!-- Dosage Form Category Header -->
              <div class="mb-8">
                <div class="flex items-center">
                  <h3 class="text-2xl font-bold text-gray-900">{dosageForm}</h3>
                  <div class="ml-4 flex-1 h-px bg-gray-300"></div>
                  <span class="ml-4 bg-green-100 text-green-800 text-sm px-3 py-1 rounded-full font-medium">
                    {productsByDosageForm[dosageForm].length} product{productsByDosageForm[dosageForm].length !== 1 ? 's' : ''}
                  </span>
                </div>
              </div>
              
              <!-- Products Grid for this dosage form -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {productsByDosageForm[dosageForm].map(product => (
                  <div key={product.id} class="group">
                    <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 border-l-4 border-blue-500">
                      <div class="aspect-w-16 aspect-h-9">
                        <img 
                          src={product.image} 
                          alt={product.name}
                          class="w-full h-40 object-cover group-hover:scale-105 transition-transform duration-300"
                        />
                      </div>
                      <div class="p-4">
                        <div class="flex items-center justify-between mb-2">
                          <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded font-medium">
                            {product.category}
                          </span>
                          
                        </div>
                        
                        <h4 class="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 line-clamp-2">
                          {product.name}
                        </h4>
                        
                        <p class="text-gray-600 mb-3 text-sm line-clamp-2">{product.description}</p>
                        
                        {/* Product details grid */}
                        <div class="grid grid-cols-2 gap-2 mb-3 text-xs">
                          {product.potency && (
                            <div>
                              <span class="text-gray-500">Potency:</span>
                              <span class="ml-1 font-medium text-green-600">{product.potency}</span>
                            </div>
                          )}
                          {product.strain && (
                            <div>
                              <span class="text-gray-500">Type:</span>
                              <span class="ml-1 font-medium">{product.strain}</span>
                            </div>
                          )}
                          {product.size && (
                            <div>
                              <span class="text-gray-500">Size:</span>
                              <span class="ml-1 font-medium">{product.size}</span>
                            </div>
                          )}
                          {product.price && (
                            <div>
                              <span class="text-gray-500">Price:</span>
                              <span class="ml-1 font-bold text-blue-600">{product.price}</span>
                            </div>
                          )}
                        </div>
                        
                        <div class="flex items-center justify-between">
                          <div class="flex items-center space-x-2 text-xs text-gray-500">
                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                            </svg>
                            <span>Updated: {new Date(product.updatedAt).toLocaleDateString()}</span>
                          </div>
                          <button class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors duration-200 font-medium">
                            View Details
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="text-center py-12">
          <div class="bg-gray-100 rounded-lg p-8 max-w-md mx-auto">
            <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No Products Available</h3>
            <p class="text-gray-600">
              {strapiStatus === 'Connected' ? 'Add dosage products in your Strapi admin panel.' : 'Connect to Strapi backend to load products.'}
            </p>
            {apiError && (
              <p class="text-red-600 text-sm mt-2">Error: {apiError}</p>
            )}
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Ingredients Section -->
  {ingredients.length > 0 && (
    <div class="py-16 bg-gray-50">
      <div class="px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 sm:text-4xl">Common Ingredients</h2>
          <p class="mt-4 text-lg text-gray-600">Explore ingredients commonly found in cannabis products</p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-7xl mx-auto">
          {ingredients.slice(0, 12).map(ingredient => (
            <div class="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
              <h3 class="text-md font-semibold text-gray-900 mb-2">{ingredient.name}</h3>
              <p class="text-gray-600 text-sm line-clamp-3">{ingredient.description}</p>
            </div>
          ))}
        </div>
        
        {ingredients.length > 12 && (
          <div class="text-center mt-8">
            <button class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 font-medium">
              View All {ingredients.length} Ingredients
            </button>
          </div>
        )}
      </div>
    </div>
  )}

  <!-- Site Statistics -->
  <div class="py-16 bg-blue-900 text-white">
    <div class="px-4 sm:px-6 lg:px-8">
      <div class="max-w-7xl mx-auto">
        <div class="text-center mb-8">
          <h2 class="text-3xl font-bold">Platform Overview</h2>
          <p class="mt-4 text-xl text-blue-200">Content available from Strapi backend</p>
        </div>
        
        <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
          <div class="text-center">
            <div class="text-3xl font-bold text-blue-200">{deals.length}</div>
            <div class="text-blue-100">Deals</div>
          </div>
          <div class="text-center">
            <div class="text-3xl font-bold text-blue-200">{dosageProducts.length}</div>
            <div class="text-blue-100">Products</div>
          </div>
          <div class="text-center">
            <div class="text-3xl font-bold text-blue-200">{cannabinoidTypes.length}</div>
            <div class="text-blue-100">Cannabinoids</div>
          </div>
          <div class="text-center">
            <div class="text-3xl font-bold text-blue-200">{ingredients.length}</div>
            <div class="text-blue-100">Ingredients</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Important Notice -->
  <div class="bg-yellow-50 border-l-4 border-yellow-400 p-6 mx-4 sm:mx-6 lg:mx-8 mb-8">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
        </svg>
      </div>
      <div class="ml-3">
        <h3 class="text-sm font-medium text-yellow-800">Important Medical Notice</h3>
        <div class="mt-2 text-sm text-yellow-700">
          <p>This information is for educational purposes only. Always consult with a healthcare professional before starting, stopping, or changing any medication regimen. Never ignore professional medical advice or delay seeking it because of information found on this website.</p>
        </div>
      </div>
    </div>
  </div>
</Layout>